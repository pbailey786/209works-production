// Debug the exact query being generated by chat API
const { PrismaClient } = require('@prisma/client');

// Copy the buildJobQueryFromFiltersSafe function logic
function buildJobQueryFromFiltersSafe(filters) {
  const query = {
    status: 'active',
    AND: [],
  };

  // Add basic filters to ensure we only get active, non-expired jobs
  query.AND.push({
    OR: [{ expiresAt: null }, { expiresAt: { gt: new Date() } }],
  });

  // HYPERLOCAL FILTERING: Prioritize local/hybrid over remote
  const userRequestsRemote = filters.isRemote === true || 
    (filters.other && filters.other.toLowerCase().includes('remote'));
  const userPreferencesLocal = filters.isLocalPreferred === true;
  
  if (!userRequestsRemote) {
    if (userPreferencesLocal) {
      // User explicitly wants local jobs - exclude all remote
      query.AND.push({ isRemote: false });
    } else {
      // Default hyperlocal filtering
      query.AND.push({
        OR: [
          { isRemote: false }, // Local jobs
          { 
            AND: [
              { isRemote: true }, // Hybrid/remote jobs that also have local presence
              {
                OR: [
                  // Check location field for Central Valley cities
                  { location: { contains: 'Stockton' } },
                  { location: { contains: 'Modesto' } },
                  { location: { contains: 'Tracy' } },
                  { location: { contains: 'Manteca' } },
                  { location: { contains: 'Lodi' } },
                  { location: { contains: 'Turlock' } },
                  { location: { contains: 'Merced' } },
                  { location: { contains: 'Sacramento' } },
                  { location: { contains: 'Central Valley' } },
                  { location: { contains: '209' } }
                ]
              }
            ]
          }
        ]
      });
    }
  }

  // Location filter - skip if '209 area'
  if (filters.location && filters.location !== '209 area') {
    query.AND.push({
      location: {
        contains: filters.location,
        mode: 'insensitive',
      },
    });
  }

  // Industry filter - search in categories, title, and description
  if (filters.industry) {
    query.AND.push({
      OR: [
        {
          categories: {
            has: filters.industry,
          },
        },
        {
          title: {
            contains: filters.industry,
            mode: 'insensitive',
          },
        },
        {
          description: {
            contains: filters.industry,
            mode: 'insensitive',
          },
        },
      ],
    });
  }

  return query;
}

async function debugChatQuery() {
  const prisma = new PrismaClient();
  
  try {
    // Test the exact filters from the chat API
    const filters = {
      location: "209 area",
      job_type: "full_time", 
      role: null,
      industry: "warehouse",
      isRemote: false
    };
    
    console.log('Testing filters:', JSON.stringify(filters, null, 2));
    
    const query = buildJobQueryFromFiltersSafe(filters);
    console.log('Generated query:', JSON.stringify(query, null, 2));
    
    const results = await prisma.job.findMany({
      where: query,
      take: 5,
      select: {
        id: true,
        title: true,
        company: true,
        location: true,
        isRemote: true,
        categories: true
      }
    });
    
    console.log('Results:', results.length);
    results.forEach(job => {
      console.log(`- ${job.title} at ${job.company} in ${job.location} (remote: ${job.isRemote})`);
    });
    
  } catch (error) {
    console.error('Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

debugChatQuery();