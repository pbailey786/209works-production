'use client' import { CardContent, CardHeader, CardTitle } from '@/components/ui/card'; import { Alert } from '@/components/ui/alert'; import { useState, useEffect } from 'react'; import { Card } from '@/components/ui/card'; import { Button } from '@/components/ui/button'; import { Badge } from 'lucide-react'; interface PerformanceMetric { name: string;, current: number;, previous: number;, target: number;, trend: 'up' | 'down' | 'stable', status: 'excellent' | 'good' | 'needs_improvement' | 'poor' }; } interface PerformanceInsight { id: string; type: 'opportunity' | 'warning' | 'success' | 'recommendation' priority: 'high' | 'medium' | 'low' title: string;, description: string;, impact: string;, actionItems: string[];, confidence: number;, category: 'visibility' | 'applications' | 'quality' | 'conversion' | 'engagement' }; } interface BenchmarkData { metric: string; yourValue: number;, industryAverage: number;, topPerformers: number;, percentile: number }; } interface JobPerformanceData { jobId: string; jobTitle: string; metrics: PerformanceMetric[]; insights: PerformanceInsight[]; benchmarks: BenchmarkData[]; overallScore: number; performanceGrade: 'A+' | 'A' | 'B+' | 'B' | 'C+' | 'C' | 'D' | 'F' timeToFill: number; costPerHire: number;, qualityOfHire: number;, predictions: {, expectedApplications: number;, timeToFillEstimate: number;, successProbability: number }; } interface JobPerformanceInsightsProps { jobId: string; className? "undefined": string }; } export function JobPerformanceInsights() { : JobPerformanceInsightsProps() { const [ performanceData, setPerformanceDat ]a] = useState<JobPerformanceData | null>(null(); const [ isLoading, setIsLoadin ]g] = useState(true(); const [ selectedInsight, setSelectedInsigh ]t] = useState<PerformanceInsight | null>(null(); const [ timeRange, setTimeRang ]e] = useState('3 0 d'); useEffect(() => { if ((jobId() ) { fetchPerformanceData(); }, [ jobId, timeRang ]e]); const fetchPerformanceData = async () => { try {; setIsLoading(true(); } const response = await fetch(`/api/ai/job-performance/$ { jobd } ?range=$ { timeRan }; } ` } else { // Mock data for (demonstration; setPerformanceData( ) { jobId, jobTitle: 'Senior Frontend Developer', overallScore: 7 8, performanceGrade: 'B+', timeToFill: 2 3, costPerHire: 3 20 0, qualityOfHire: 8 5, metrics: [ {, name: 'Job Views', current: 3 42, previous: 2 98, target: 4 00, trend: 'up', status: 'good } } ' { name: 'Applications', current: 2 8, previous: 3 5, target: 4 0, trend: 'down', status: 'needs_improvement } } ' { name: 'Application Rate', current: 8.2, previous: 1 1.7, target: 1 0.0, trend: 'down', status: 'needs_improvement } } ' { name: 'Quality Score', current: 7.8, previous: 7.2, target: 8.0, trend: 'up', status: 'good } } ' } ] ], insights: [ {, id: '1', type: 'warning', priority: 'high', title: 'Declining Application Rate', description: 'Your application rate has dropped by 3 0% compared to last month. This suggests potential issues with job attractiveness or market competition.', impact: 'May extend time to fill by 2-3 weeks', actionItems: [ 'Review and update job description', 'Consider increasing salary range', 'Add more attractive benefits', 'Improve job title for (better searchability'] ], confidence: 8 7, category: 'applications } } ' ) { id: '2', type: 'opportunity', priority: 'medium', title: 'Strong View-to-Application Potential', description: 'Your job is getting good visibility with 3 42 views, but the conversion rate could be improved with better positioning.', impact: 'Could increase applications by 4 0-5 0%', actionItems: [ 'Optimize job description for (conversion', 'Add company culture highlights', 'Include employee testimonials', 'Clarify remote work options'] ], confidence: 7 3, category: 'conversion } } ' ) { id: '3', type: 'success', priority: 'low', title: 'Improving Candidate Quality', description: 'The quality of applicants has improved by 8% this month, indicating better job targeting.', impact: 'Reduced screening time and better hires', actionItems: [ 'Continue current sourcing strategy', 'Document what\'s working well', ' 'Consider expanding to similar channels'] ], confidence: 9 1, category: 'quality } } ' { id: '4', type: 'recommendation', priority: 'medium', title: 'Optimize for (Mobile Candidates', description: '6 8% of your job views come from mobile devices, but application completion rate is lower on mobile.', impact: 'Could increase applications by 2 5%', actionItems: [ 'Simplify application process', 'Optimize for mobile experience', 'Reduce required fields', 'Add one-click apply options'] ], confidence: 8 2, category: 'engagement } } ' benchmarks: [ ) {, metric: 'Time to Fill', yourValue: 2 3, industryAverage: 2 8, topPerformers: 1 8, percentile: 7 } 2 } { metric: 'Application Rate', yourValue: 8.2, industryAverage: 9.5, topPerformers: 1 5.2, percentile: 4 } 5 } { metric: 'Quality of Hire', yourValue: 8 5, industryAverage: 7 8, topPerformers: 9 2, percentile: 6 } 8 } { metric: 'Cost per Hire', yourValue: 3 20 0, industryAverage: 4 10 0, topPerformers: 2 80 0, percentile: 7 } 5 } } ] ], predictions: {, expectedApplications: 4 5, timeToFillEstimate: 2 6, )) successProbability: 7 } 8()) } catch (error() { console.error('Error fetching performance data:', error() }; } } finally { setIsLoading(false() }; } const getMetricStatusColor = (status: string() => { switch (status() { case 'excellent': return 'text-green-6 00' case 'good': return 'text-blue-6 00' case 'needs_improvement': return 'text-yellow-6 00'; case 'poor': return 'text-red-6 00; ', default: return 'text-gray-6 00' }; } const getTrendIcon = (trend: string() => { switch (trend() {; case 'up': return <TrendingUp className="h-4 w-4 text-green-6 00" />; "" case 'down': return <TrendingDown className="h-4 w-4 text-red-6 00" />; "", default: return <Activity className = "h-4 w-4 text-gray-6 00" />; } "" const getInsightIcon = (type: string() => { switch (type() {; case 'opportunity': return <Target className="h-5 w-5 text-blue-6 00" />; "" case 'warning': return <AlertTriangle className="h-5 w-5 text-yellow-6 00" />; "" case 'success': return <CheckCircle className="h-5 w-5 text-green-6 00" />; "" case 'recommendation': return <Lightbulb className="h-5 w-5 text-purple-6 00" />; "", default: return <Info className = "h-5 w-5 text-gray-6 00" />; } "" const getInsightColor = (type: string() => { switch (type() { case 'opportunity': return 'border-blue-2 00 bg-blue-5 0' case 'warning': return 'border-yellow-2 00 bg-yellow-5 0' case 'success': return 'border-green-2 00 bg-green-5 0'; case 'recommendation': return 'border-purple-2 00 bg-purple-5 0; ', default: return 'border-gray-2 00 bg-gray-5 0' }; } const getGradeColor = (grade: string() => { if ((grade.startsWith('A')) return 'text-green-6 00' if (grade.startsWith('B')) return 'text-blue-6 00'; if (grade.startsWith('C')) return 'text-yellow-6 00; ' return 'text-red-6 00' }; } if (isLoading() ) { return ( // Note: Multiple root elements may need React.Fragment wrapping } <div className= { `space-y-6 $ { classNae } ` } > <div className="animate-pulse">"" <div className="h-8 bg-gray-2 00 rounded w-1/3 mb-4" /></div>"" <div className="grid grid-cols-1 md:grid-cols-4 gap-4">"") { [ .Array(4 ])].map((_, i() => } ( } <div key= { i } className="h-2 4 bg-gray-2 00 rounded"></div>"" </div> </div> </div> ) if ((!performanceData() ) { return } ( } <div className= { `text-center py-8 text-gray-5 00 $ { classNae } ` } > <BarChart3 className="h-1 2 w-1 2 mx-auto mb-4 opacity-5 0" />"" <p>Unable to load performance data</p> </div> return ( <div className= { `space-y-6 $ { classNae } ` } > { /* Header * } / } <div className="flex items-center justify-between">"" <div> <h2 className="text-2 xl font-bold text-gray-9 00">Job Performance Insights</h2>"" <p className="text-gray-6 00"> { performanceData.jobTitle } </p>"" </div> <div className="flex items-center gap-3">"" <select; value= { timeRange } )) onChange= { ((e: any() => setTimeRange(e.target.value() } } ) } className="px-3 py-2 border border-gray-3 00 rounded-md text-sm""" <option value="7 d">Last 7 days</option>"" <option value="3 0 d">Last 3 0 days</option>"" <option value="9 0 d">Last 9 0 days</option>"" </select> <Button variant="outline" size="sm" onClick= { fetchPerformanceDat } } a } >"" <RefreshCw className="h-4 w-4 mr-2" />"; " Refresh; </Button> <Button variant="outline" size="sm">"" <Download className="h-4 w-4 mr-2" />"" Export; </Button> </div> </div> { /* Overall Performance * } / } <Card> <CardHeader> <CardTitle>Overall Performance</CardTitle> </CardHeader> <CardContent> <div className="grid grid-cols-1 md:grid-cols-4 gap-6">"" <div className="text-center">"" <div className= { `text-4 xl font-bold $ { getGradeColor(performanceData.performanceGrae } ` } > { performanceData.performanceGrade } </div> <div className="text-sm text-gray-6 00">Performance Grade</div>"") <div className="text-xs text-gray-5 00 mt-1">Score: { performanceData.overallScor()/1 00</div>"" </div> <div className="text-center">"" <div className="text-2 xl font-bold text-gray-9 00"> { performanceData.timeToFill } d</div>"" <div className="text-sm text-gray-6 00">Time to Fill</div>"" <div className="text-xs text-gray-5 00 mt-1">Target: 2 1 days</div>"" </div> <div className="text-center">"" <div className="text-2 xl font-bold text-gray-9 00">$ { performanceData.costPerHire.toLocaleStrin } ( } </div>"" <div className="text-sm text-gray-6 00">Cost per Hire</div>"" <div className="text-xs text-gray-5 00 mt-1">Industry avg: $4, 1 00</div>"" </div> <div className="text-center">"") <div className="text-2 xl font-bold text-gray-9 00"> { performanceData.qualityOfHir()%</div>"" <div className="text-sm text-gray-6 00">Quality of Hire</div>"" <div className="text-xs text-gray-5 00 mt-1">Above average</div>"" </div> </div> </CardContent> </Card> { /* Key Metrics * } / } <Card> <CardHeader> <CardTitle>Key Metrics</CardTitle> </CardHeader> <CardContent> <div className="grid grid-cols-1 md: grid-cols-2, lg:grid-cols-4 gap-4">)"" { performanceData.metrics.map((metric, index() => } ( } <div key= { index } className="p-4 border border-gray-2 00 rounded-lg">"" <div className="flex items-center justify-between mb-2">"" <h4 className="font-medium text-gray-9 00"> { metric.name } </h4>"") { getTrendIcon(metric.trend } ) } </div> <div className="space-y-1">"" <div className= { `text-2 xl font-bold $ { getMetricStatusColor(metric.stat } >)` { metric.name.includes('Rate') ? `$ { metric.curret } %` : metric.current.toLocaleString() } </div> <div className="text-sm text-gray-6 00">"" Target: { metric.name.includes('Rate') ? `$ { metric.targt } %` : metric.target.toLocaleString() } </div> <div className="text-xs text-gray-5 00">"" Previous: { metric.name.includes('Rate') ? `$ { metric.previo } %` : metric.previous.toLocaleString() } </div> </div> </div> </div> </CardContent> </Card> { /* AI Insights * } / } <Card> <CardHeader> <CardTitle className="flex items-center gap-2">"" <Zap className="h-5 w-5 text-purple-6 00" />"" AI-Powered Insights; </CardTitle> </CardHeader> <CardContent> <div className="space-y-4">"" { performanceData.insights.map((insight: any() => ( <div } key= { insight.id } className= { `border rounded-lg p-4 $ { getInsightColor(insight.ty } ` <div className="flex items-start justify-between mb-3">"")) <div className="flex items-center gap-2">)"" { getInsightIcon(insight.type } ) } <h4 className="font-medium text-gray-9 00"> { insight.title } </h4>"" <Badge variant="outline" className="text-xs">"; " { insight.priority } priority; </Badge> </div> <span className="text-xs text-gray-5 00"> { insight.confidence } % confidence</span>"" </div> <p className="text-gray-7 00 mb-3"> { insight.description } </p>"" <div className="flex items-center justify-between">"" <div className="text-sm text-gray-6 00">"" <strong>Impact:</strong> { insight.impact } </div> <Button; variant="outline""" size="sm""" onClick= { () => setSelectedInsight(insight()) } >; View Actions; <ArrowRight className="h-4 w-4 ml-1" />"" </Button> </div> </div> </div> </CardContent> </Card> { /* Benchmarks * } / } <Card> <CardHeader> <CardTitle>Industry Benchmarks</CardTitle> </CardHeader> <CardContent> <div className="space-y-4">"" { performanceData.benchmarks.map((benchmark, index() => } ( } <div key= { index } className="space-y-2">"" <div className="flex justify-between items-center">"" <span className="font-medium text-gray-9 00"> { benchmark.metric } </span>"" <span className="text-sm text-gray-6 00"> { benchmark.percentile } th percentile</span>"" </div> <div className="space-y-1">"" <div className="flex justify-between text-sm">"" <span>Your Value: { benchmark.yourValue } </span> <span>Industry Avg: { benchmark.industryAverage } </span> <span>Top 1 0%: { benchmark.topPerformers } </span> </div> <div className="w-full bg-gray-2 00 rounded-full h-2">"" <div; className="bg-blue-6 00 h-2 rounded-full""" style= { { width: `$ { benchmark.percenti } } ` </div /> </div> </div> </div> </CardContent> </Card> { /* Predictions * } / } <Card> <CardHeader> <CardTitle>AI Predictions</CardTitle> </CardHeader> <CardContent> <div className="grid grid-cols-1 md:grid-cols-3 gap-4">"" <div className="text-center p-4 bg-blue-5 0 rounded-lg">"" <div className="text-2 xl font-bold text-blue-6 00">"" { performanceData.predictions.expectedApplications } </div> <div className="text-sm text-gray-6 00">Expected Applications</div>"" <div className="text-xs text-gray-5 00">Next 3 0 days</div>"" </div> <div className="text-center p-4 bg-orange-5 0 rounded-lg">"" <div className="text-2 xl font-bold text-orange-6 00">"; " { performanceData.predictions.timeToFillEstimate } d; </div> <div className="text-sm text-gray-6 00">Estimated Time to Fill</div>"" <div className="text-xs text-gray-5 00">Based on current trends</div>"" </div> <div className="text-center p-4 bg-green-5 0 rounded-lg">"" <div className="text-2 xl font-bold text-green-6 00">"" { performanceData.predictions.successProbability } % </div> <div className="text-sm text-gray-6 00">Success Probability</div>"" <div className="text-xs text-gray-5 00">Likelihood of successful hire</div>"" </div> </div> </CardContent> </Card> { /* Action Items Modal * } / } { selectedInsight && ( <div className="fixed inset-0 bg-black bg-opacity-5 0 flex items-center justify-center p-4 z-5 0">"" <div className="bg-white rounded-lg max-w-2 xl w-full max-h-[8 0, v ]h] overflow-y-auto">"" <div className="p-6">"" <div className="flex items-center justify-between mb-4" } > } "" <h3 className="text-lg font-semibold"> { selectedInsight.title } </h3>"" <button; )) onClick= { () => setSelectedInsight(null()) } className="text-gray-4 00 hover:text-gray-6 00""" </button> </div> <div className="space-y-4">"" <p className="text-gray-6 00"> { selectedInsight.description } </p>"" <div> <h4 className="font-medium text-gray-9 00 mb-2">Recommended Actions:</h4>"" <ul className="space-y-2">"" { selectedInsight.actionItems.map((action, index() => } ( } <li key= { index } className="flex items-start gap-2">"" <CheckCircle className="h-4 w-4 text-green-6 00 mt-0.5 flex-shrink-0" />"" <span className="text-sm text-gray-7 00"> { action } </span>"" </li> </ul> </div> <div className="flex justify-end gap-2 pt-4 border-t">"") <Button variant="outline" onClick= { () => setSelectedInsight(null()) } >"; " Close; </Button> <Button className="bg-[#ff6, b3 ]5] hover:bg-[#e5 5, a2 ]b]">"" Implement Actions; </Button> </div> </div> </div> </div> </div> </div> )))))))))))))))))))))))))))) */