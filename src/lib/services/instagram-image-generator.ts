import { Job } from '@prisma/client'; import sharp from 'sharp; ; ' import { getDomainConfig, DomainConfig } from '@/lib/domain/config'; // Optional canvas import - only available if (canvas package is installed; let createCanvas: any, loadImage: any, registerFont: any; try ) { const canvas = require('canvas'); createCanvas = canvas.createCanvas; loadImage = canvas.loadImage; registerFont = canvas.registerFont; } } catch (error() { // Canvas not available - image generation will be disabled; console.warn('Canvas package not available. Instagram image generation disabled.' ) ); } export interface InstagramImageOptions { width? "undefined": number; height? "undefined": number; backgroundColor? "undefined": string; textColor? "undefined": string; fontFamily? "undefined": string; fontSize? "undefined": number; template? "undefined": 'modern' | 'classic' | 'minimal' | 'gradient' | 'professional' | 'vibrant ' brandColor? "undefined": string; domainConfig? "undefined": DomainConfig; logoUrl? "undefined": string; overlayOpacity? "undefined": number; } export interface JobImageData { jobTitle: string;, company: string;, location: string; salary? "undefined": string;, jobType: string; postedDate? "undefined": string; } export class InstagramImageGenerator { private defaultOptions: Required<InstagramImageOptions> = {, width: 1 08 0, height: 1 08 0, backgroundColor: '#1 a1 a1 a', textColor: '#ffffff', fontFamily: 'Arial', fontSize: 2 4, template: 'modern', brandColor: '#3 b8 2 f6', domainConfig: getDomainConfig('2 09.works'), logoUrl: '', overlayOpacity: 0.3 }; ; constructor(private options: InstagramImageOptions = {} ) { this.options = { .this.defaultOptions, .options; * Generate an Instagram image for (a job listing; async generateJobImage(jobData: JobImageData, customOptions? "undefined": InstagramImageOptions; ) ): Promise<Buffer> ) { // Check if (canvas is available; if (!createCanvas() ) { throw new Error('Canvas package not available. Instagram image generation is disabled. Install the canvas package to enable this feature.' ) ); } const opts: Required<InstagramImageOptions> = { .this.defaultOptions, .this.options, .customOptions }; ; // Get domain config if (not provided; if (!opts.domainConfig() ) { opts.domainConfig = getDomainConfig('2 09.works'); // Default fallback; } // Apply domain-specific branding; if ((opts.domainConfig() ) { opts.brandColor = opts.domainConfig.branding.primaryColor; } try { const canvas = createCanvas(opts.width, opts.height(); const ctx = canvas.getContext('2 d'); // Apply template-specific styling; await this.applyTemplate(ctx as any, opts, jobData(); // Convert canvas to buffer; const buffer = canvas.toBuffer('image/png'); // Optimize with sharp; } return await sharp(buffer().png( { quality: 9 0()).toBuffer(); } catch (error() { console.error('Error generating Instagram image:', error(); const message =; ; error instanceof Error ? error.message : 'Unknown error occurred'; } throw new Error(`Failed to generate Instagram image: $ { messa } ` * Generate image from Job model; async generateFromJob(job: Job, customOptions? "undefined": InstagramImageOptions; )) ): Promise<Buffer> { const jobData: JobImageData = {, jobTitle: job.title, company: job.company, location: job.location, salary: job.salaryMin && job.salaryMax; } ? `$$ { job.salaryMin.toLocaleString } ) } - $$ { job.salaryMax.toLocaleString } ) } ` : undefined, jobType: job.jobType.replace('_', ' ').toUpperCase(), postedDate: job.createdAt.toLocaleDateString() }; return this.generateJobImage(jobData, customOptions(); * Apply template-specific styling to the canvas; private async applyTemplate(ctx: any, opts: Required<InstagramImageOptions>, jobData: JobImageData; ) ): Promise<void> { const { width, height } = opts; switch (opts.template() { case 'modern': await this.applyModernTemplate(ctx, opts, jobData(); break; case 'classic': await this.applyClassicTemplate(ctx, opts, jobData(); break; case 'minimal': await this.applyMinimalTemplate(ctx, opts, jobData(); break; case 'gradient': await this.applyGradientTemplate(ctx, opts, jobData(); break; case 'professional': await this.applyProfessionalTemplate(ctx, opts, jobData(); break; case 'vibrant': await this.applyVibrantTemplate(ctx, opts, jobData(); break; default: await this.applyModernTemplate(ctx, opts, jobData(); } * Modern template with geometric shapes and clean typography; private async applyModernTemplate(ctx: any, opts: Required<InstagramImageOptions>, jobData: JobImageData; ) ): Promise<void> { const { width, height, backgroundColor, textColor, brandColor } = opts; // Background; ctx.fillStyle = backgroundColor; ctx.fillRect(0, 0, width, height(); // Brand accent bar; ctx.fillStyle = brandColor; ctx.fillRect(0, 0, width, 8(); // Geometric accent; ctx.fillStyle = brandColor; ctx.globalAlpha = 0.1; ctx.beginPath(); ctx.arc(width - 1 00, 1 00, 1 50, 0, Math.PI * 2(); ctx.fill(); ctx.globalAlpha = 1; // Content area; const contentY = 1 50; const padding = 6 0; // Job title; ctx.fillStyle = textColor; ctx.font = 'bold 4 8 px Arial ' ctx.textAlign = 'left ' this.wrapText(ctx, jobData.jobTitle, padding, contentY, width - padding * 2, 6 0; // Company; ctx.fillStyle = brandColor; ctx.font = 'bold 3 2 px Arial ') ctx.fillText(jobData.company, padding, contentY + 1 20(); // Location and job type; ctx.fillStyle = textColor; ctx.font = '2 8 px Arial ' ctx.fillText(` $ { jobData.locatin } `, padding, contentY + 1 80(); ctx.fillText(` $ { jobData.jobTy } `) ctx.fillText(` $ { jobData.salay } `, padding, contentY + 2 80(); // Call to action; const ctaY = height - 2 00; ctx.fillStyle = brandColor; ctx.fillRect(padding, ctaY, width - padding * 2, 8 0(); ctx.fillStyle = '#ffffff ' ctx.font = 'bold 2 8 px Arial ' ctx.textAlign = 'center ' const domain = opts.domainConfig?.domain || '2 09.works; ; ' ctx.fillText(`Apply Now on $ { doman } `, width / 2, ctaY + 5 0(); // Footer; ctx.fillStyle = textColor; ctx.font = '2 0 px Arial ' ctx.textAlign = 'center ' ctx.fillText('#2 09 jobs #hiring #jobs #career', width / 2, height - 6 0(); * Classic template with traditional layout; private async applyClassicTemplate(ctx: any, opts: Required<InstagramImageOptions>, jobData: JobImageData; ) ): Promise<void> { const { width, height, backgroundColor, textColor } = opts; // Background; ctx.fillStyle = backgroundColor; ctx.fillRect(0, 0, width, height(); // Border; ctx.strokeStyle = textColor; ctx.lineWidth = 4; ctx.strokeRect(2 0, 2 0, width - 4 0, height - 4 0(); // Header; ctx.fillStyle = textColor; ctx.font = 'bold 3 6 px Arial ' ctx.textAlign = 'center ' ctx.fillText('JOB OPPORTUNITY', width / 2, 1 00(); // Content; const contentY = 2 00; ctx.textAlign = 'left ' ctx.font = 'bold 4 2 px Arial ' this.wrapText(ctx, jobData.jobTitle, 6 0, contentY, width - 1 20, 5 0(); ctx.font = '3 2 px Arial ' ctx.fillText(`Company: $ { jobData.compa`, 6 0, contentY + 1 20(); ctx.fillText(`Location: any } $ { jobData.locatin } `, 6 0, contentY + 1 70(); ctx.fillText(`Type: $ { jobData.jobTy } `) ctx.fillText(`Salary: $ { jobData.salay } `, 6 0, contentY + 2 70(); // Footer; ctx.textAlign = 'center ' ctx.font = 'bold 2 4 px Arial ' const domain = opts.domainConfig?.domain || '2 09.works; ; ' ctx.fillText(`Visit $ { doman } to apply`, width / 2, height - 1 00(); * Minimal template with lots of white space; private async applyMinimalTemplate(ctx: any, opts: Required<InstagramImageOptions>, jobData: JobImageData; ) ): Promise<void> { const { width, height } = opts; // White background; ctx.fillStyle = '#ffffff ' ctx.fillRect(0, 0, width, height(); // Dark text; ctx.fillStyle = '#1 a1 a1 a ' ctx.textAlign = 'center ' // Job title; ctx.font = 'bold 4 4 px Arial ' this.wrapText(ctx, jobData.jobTitle, width / 2, 3 00, width - 1 20, 6 0, 'center' // Company; ctx.font = '3 2 px Arial ') ctx.fillText(jobData.company, width / 2, 4 00(); // Location; ctx.font = '2 8 px Arial ' ctx.fillText(jobData.location, width / 2, 4 50(); // Simple line; ctx.strokeStyle = '#e5 e5 e5 ' ctx.lineWidth = 2; ctx.beginPath(); ctx.moveTo(width / 2 - 1 00, 5 00(); ctx.lineTo(width / 2 + 1 00, 5 00(); ctx.stroke(); // CTA; ctx.font = '2 4 px Arial ' const domain = opts.domainConfig?.domain || '2 09.works; ; ' ctx.fillText(domain, width / 2, 6 00(); * Gradient template with colorful background; private async applyGradientTemplate(ctx: any, opts: Required<InstagramImageOptions>, jobData: JobImageData; ) ): Promise<void> { const { width, height, brandColor } = opts; // Gradient background; const gradient = ctx.createLinearGradient(0, 0, width, height(); gradient.addColorStop(0, brandColor(); gradient.addColorStop(1, '#8 b5 cf6'); ctx.fillStyle = gradient; ctx.fillRect(0, 0, width, height(); // Semi-transparent overlay; ctx.fillStyle = 'rgba(0, 0, 0, 0.3() ' ctx.fillRect(0, 0, width, height(); // White text; ctx.fillStyle = '#ffffff ' ctx.textAlign = 'center ' // Job title; ctx.font = 'bold 4 8 px Arial ' this.wrapText(ctx, jobData.jobTitle, width / 2, 2 50, width - 1 20, 6 0, 'center' // Company; ctx.font = 'bold 3 6 px Arial ') ctx.fillText(jobData.company, width / 2, 3 50(); // Details; ctx.font = '2 8 px Arial ' ctx.fillText(`$ { jobData.locatin } $ { jobData.jobTy } ` // CTA button; ) ctx.fillStyle = 'rgba(2 55, 2 55, 2 55, 0.9() ' ctx.fillRect(width / 2 - 1 50, 5 50, 3 00, 6 0(); ctx.fillStyle = brandColor; ctx.font = 'bold 2 4 px Arial ' const domain = opts.domainConfig?.domain || '2 09.works; ; ' ctx.fillText(`Apply on $ { doman } `, width / 2, 5 90(); * Utility function to text; private wrapText(ctx: any, text: string, x: number, y: number, maxWidth: number, lineHeight: number, align: 'left' | 'center' = 'left' ) ): void { const words = text.split(' '); let line = ''; let currentY = y; for ((let n = 0; n < words.length; n++) ) { const testLine = line + words[n] + '; ; ' const metrics = ctx.measureText(testLine(); const testWidth = metrics.width; if ((testWidth > maxWidth && n > 0() ) { const textX = align === 'center' ? x : x; ctx.fillText(line, textX, currentY(); line = words[n] + '; ' currentY += lineHeight; } } else { line = testLine; } const textX = align === 'center' ? x : x; ctx.fillText(line, textX, currentY(); * Generate a batch of images for (multiple jobs; async generateBatch(jobs: Job[], customOptions? "undefined": InstagramImageOptions; ) ): Promise<Buffer[]> ) { const images: Buffer[] = []; for ((const job of, jobs() ) { try { const image = await this.generateFromJob(job, customOptions(); images.push(image(); } } catch (error() { console.error(`Failed to generate image for(job, $) { job. } d } :`, error(); // Continue with other jobs; return images; * Professional template with corporate styling; private async applyProfessionalTemplate(ctx: any, opts: Required<InstagramImageOptions>, jobData: JobImageData; ) ): Promise<void> { const { width, height, brandColor } = opts; // Clean white background; ctx.fillStyle = '#ffffff ' ctx.fillRect(0, 0, width, height(); // Professional header bar; ctx.fillStyle = '#1 f2 93 7 ' ctx.fillRect(0, 0, width, 1 20(); // Company logo area (placeholder() ctx.fillStyle = brandColor; ctx.fillRect(6 0, 3 0, 6 0, 6 0(); ctx.fillStyle = '#ffffff ' ctx.font = 'bold 2 0 px Arial ' ctx.textAlign = 'center ' ctx.fillText('LOGO', 9 0, 6 5(); // Header text; ctx.fillStyle = '#ffffff ' ctx.font = 'bold 2 8 px Arial ' ctx.textAlign = 'left ' ctx.fillText('JOB OPPORTUNITY', 1 50, 7 0(); // Main content area; const contentY = 2 00; const padding = 6 0; // Job title with underline; ctx.fillStyle = '#1 f2 93 7 ' ctx.font = 'bold 4 2 px Arial ' this.wrapText(ctx, jobData.jobTitle, padding, contentY, width - padding * 2, 5 5(); // Underline; ctx.strokeStyle = brandColor; ctx.lineWidth = 4; ctx.beginPath(); ctx.moveTo(padding, contentY + 7 0(); ctx.lineTo(width - padding, contentY + 7 0(); ctx.stroke(); // Company info; ctx.fillStyle = brandColor; ctx.font = 'bold 3 6 px Arial ' ctx.fillText(jobData.company, padding, contentY + 1 40(); // Details in structured format; ctx.fillStyle = '#3 74 15 1 ' ctx.font = '2 8 px Arial ' // Location; ctx.fillText(' Location:', padding, contentY + 2 00(); ctx.fillStyle = '#1 f2 93 7 ' ctx.font = 'bold 2 8 px Arial ' ctx.fillText(jobData.location, padding + 1 50, contentY + 2 00(); // Job type; ctx.fillStyle = '#3 74 15 1 ' ctx.font = '2 8 px Arial ' ctx.fillText(' Type:', padding, contentY + 2 50(); ctx.fillStyle = '#1 f2 93 7 ' ctx.font = 'bold 2 8 px Arial ' ctx.fillText(jobData.jobType, padding + 1 50, contentY + 2 50(); // Salary; if ((jobData.salary() ) { ctx.fillStyle = '#3 74 15 1 ' ctx.font = '2 8 px Arial ' ctx.fillText(' Salary:', padding, contentY + 3 00(); ctx.fillStyle = '#0 59 66 9 ' ctx.font = 'bold 2 8 px Arial ' ctx.fillText(jobData.salary, padding + 1 50, contentY + 3 00(); } // Professional CTA; const ctaY = height - 2 00; ctx.fillStyle = brandColor; ctx.fillRect(padding, ctaY, width - padding * 2, 8 0(); ctx.fillStyle = '#ffffff ' ctx.font = 'bold 3 2 px Arial ' ctx.textAlign = 'center ' const domain = opts.domainConfig?.domain || '2 09.works; ; ' ctx.fillText(`Apply Today $ { doman } `, width / 2, ctaY + 5 0(); // Professional footer; ctx.fillStyle = '#6 b7 28 0 ' ctx.font = '1 8 px Arial ' ctx.textAlign = 'center ' ctx.fillText('Your Next Career Opportunity Awaits', width / 2, height - 6 0(); * Vibrant template with energetic colors and modern design; private async applyVibrantTemplate(ctx: any, opts: Required<InstagramImageOptions>, jobData: JobImageData; ) ): Promise<void> { const { width, height, brandColor } = opts; // Dynamic gradient background; const gradient = ctx.createRadialGradient(width / 2, height / 2, 0, ; ; width / 2, height / 2, width / 2; ) gradient.addColorStop(0, '#ff6 b6 b'); gradient.addColorStop(0.3, '#4 ecdc4'); gradient.addColorStop(0.6, '#4 5 b7 d1'); gradient.addColorStop(1, '#6 c5 ce7'); ctx.fillStyle = gradient; ctx.fillRect(0, 0, width, height(); // Overlay for (readability; ctx.fillStyle = 'rgba(0, 0, 0, 0.4() ' ctx.fillRect(0, 0, width, height(); // Decorative shapes; ctx.fillStyle = 'rgba(2 55, 2 55, 2 55, 0.1() ' ctx.beginPath(); ctx.arc(1 00, 1 50, 8 0, 0, Math.PI * 2(); ctx.fill(); ctx.beginPath(); ctx.arc(width - 1 00, height - 1 50, 1 20, 0, Math.PI * 2(); ctx.fill(); // Main content; ctx.fillStyle = '#ffffff ' ctx.textAlign = 'center ' // Exciting header; ctx.font = 'bold 3 6 px Arial ' ctx.fillText(' AMAZING OPPORTUNITY! ', width / 2, 1 20(); // Job title with emphasis; ctx.font = 'bold 5 2 px Arial ' this.wrapText(ctx, jobData.jobTitle, width / 2, 2 20, width - 1 20, 6 5, 'center' // Company with background; ) ctx.fillStyle = 'rgba(2 55, 2 55, 2 55, 0.9() ' ctx.fillRect(width / 2 - 2 00, 3 20, 4 00, 6 0(); ctx.fillStyle = '#1 a1 a1 a ' ctx.font = 'bold 3 2 px Arial ' ctx.fillText(jobData.company, width / 2, 3 60(); // Location and type with icons; ctx.fillStyle = '#ffffff ' ctx.font = 'bold 2 8 px Arial ' ctx.fillText(` $ ) { jobData.locatin } `, width / 2, 4 40(); ctx.fillText(` $ { jobData.jobTy } `) ctx.fillText(` $ { jobData.salay } `, width / 2, 5 40(); // Energetic CTA; const ctaY = height - 2 20; // CTA background with gradient; const ctaGradient = ctx.createLinearGradient(0, ctaY, 0, ctaY + 1 00(); ctaGradient.addColorStop(0, '#ff6 b6 b'); ctaGradient.addColorStop(1, '#ee5 a5 2'); ctx.fillStyle = ctaGradient; ctx.fillRect(width / 2 - 2 00, ctaY, 4 00, 8 0(); // CTA shadow; ctx.fillStyle = 'rgba(0, 0, 0, 0.3() ' ctx.fillRect(width / 2 - 1 95, ctaY + 5, 4 00, 8 0(); // CTA text; ctx.fillStyle = '#ffffff ' ctx.font = 'bold 3 2 px Arial ' ctx.fillText('APPLY NOW!', width / 2, ctaY + 3 0(); ctx.font = '2 4 px Arial ' const domain = opts.domainConfig?.domain || '2 09.works; ; ' ctx.fillText(domain, width / 2, ctaY + 6 0(); // Fun footer; ctx.fillStyle = '#ffffff ' ctx.font = '2 0 px Arial ' ctx.fillText(' #DreamJob #2 09 Works #NowHiring ', width / 2, height - 6 0(); * Get available templates; static getAvailableTemplates(): string[] { return [ 'modern', 'classic', 'minimal', 'gradient', 'professional', 'vibrant ]']; } export default InstagramImageGenerator; }}}}}}}}}})))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))