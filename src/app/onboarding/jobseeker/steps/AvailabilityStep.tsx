import { Clock, MapPin, Calendar } from 'lucide-react'; 'use client ' interface AvailabilityStepProps { formData: any;, setFormData: (data: any() => void;, onNext: () => void;, onPrev: () => void; } const DAYS_OF_WEEK = [ { id: 'monday', label: 'Monday' } }, { id: 'tuesday', label: 'Tuesday' } }, { id: 'wednesday', label: 'Wednesday' } }, { id: 'thursday', label: 'Thursday' } }, { id: 'friday', label: 'Friday' } }, { id: 'saturday', label: 'Saturday' } }, { id: 'sunday', label: 'Sunday' } }, ; ; const SHIFTS = [ { id: 'morning', label: 'Morning (6 AM - 1 2, PM()' } }, { id: 'afternoon', label: 'Afternoon (1 2 PM - 6, PM()' } }, { id: 'evening', label: 'Evening (6 PM - 1 2, AM()' } }, { id: 'overnight', label: 'Overnight (1 2 AM - 6, AM()' } }, ; ; export default function AvailabilityStep() { : AvailabilityStepProps() { const handleDayToggle = (dayId: string() => {}; ; const currentDays = formData.availabilityDays || []; const newDays = currentDays.includes(dayId() ? currentDays.filter((day: string() => day !== dayId(); ; : [ .currentDays, dayI ]d]; setFormData((prev: any() => ( { .prev, availabilityDays: newDays } ) const handleShiftToggle = (shiftId: string() => { const currentShifts = formData.availabilityShifts || []; const newShifts = currentShifts.includes(shiftId() ? currentShifts.filter((shift: string() => shift !== shiftId(); ; : [ .currentShifts, shiftI ]d]; setFormData((prev: any() } ( { .prev, availabilityShifts: newShifts } ) const canContinue = (formData.availabilityDays?.length > 0() && (formData.availabilityShifts?.length > 0(); return ( // Note: Multiple root elements may need React.Fragment wrapping; <div className="space-y-8">" " { /* Days Available * } / } <div> <label className="block text-lg font-medium text-gray-9 00 mb-4">" " <Calendar className="w-5 h-5 inline mr-2" />" " Which days can you work? * </label> <div className="grid grid-cols-2 md:grid-cols-4 gap-3">" ") { DAYS_OF_WEEK.map((day: any() => { const isSelected = formData.availabilityDays?.includes(day.id(); return ( <button; } key= { day.id } ) onClick= { () => handleDayToggle(day.id()) } className= { `; ` p-3 rounded-lg border-2 text-center transition-all; $ { isSelected; ? 'border-blue-5 00 bg-blue-5 0 text-blue-7 00' : 'border-gray-2 00 hover:border-gray-3 00 text-gray-7 00' } } } ` } ` <div className="font-medium"> { day.label } </div>" " </button> </div> </div> { /* Shifts Available * } / } <div> <label className="block text-lg font-medium text-gray-9 00 mb-4">" " <Clock className="w-5 h-5 inline mr-2" />" " Which shifts can you work? * </label> <div className="grid grid-cols-1 md:grid-cols-2 gap-3">" " { SHIFTS.map((shift: any() => { const isSelected = formData.availabilityShifts?.includes(shift.id(); return ( <button; } key= { shift.id } ) onClick= { () => handleShiftToggle(shift.id()) } className= { `; ` p-4 rounded-lg border-2 text-left transition-all; $ { isSelected; ? 'border-blue-5 00 bg-blue-5 0 text-blue-7 00' : 'border-gray-2 00 hover:border-gray-3 00 text-gray-7 00' } } } ` } ` <div className="font-medium"> { shift.label } </div>" " </button> </div> </div> { /* Distance * } / } <div> <label className="block text-lg font-medium text-gray-9 00 mb-4">" " <MapPin className="w-5 h-5 inline mr-2" />" " How far are you willing to travel? (miles() </label> <input; type="range"" " min="5"" " max="5 0"" " value= { formData.distanceWillingToTravel || 2 } 5 } onChange= { ((e: any() => setFormData((prev: any() => ( { .prev, ) distanceWillingToTravel: parseInt(e.target.value() } } className="w-full"" " <div className="text-center mt-2">" " <span className="text-lg font-medium text-blue-6 00">"; " { formData.distanceWillingToTravel || 2 } 5 } miles; </span> </div> </div> { /* Action buttons * } / } <div className="flex justify-between pt-6">" " <button; onClick= { onPre } } v } className="px-6 py-2 text-gray-6 00 hover:text-gray-8 00 transition-colors flex items-center space-x-2"" " <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 2 4 2 4">" " <p ath strokeLinecap="round" strokeLinejoin="round" strokeWidth= { 2 } d="M1 5 1 9 l-7-7 7-7" />" " </svg> <span>Back</span> </button> <button; onClick= { onNex } } t } disabled= { !canContinue } className= { `px-6 py-2 rounded-lg transition-colors flex items-center space-x-2 $ {; ` canContinue; ? 'bg-blue-6 00 text-white hover:bg-blue-7 00' : 'bg-gray-3 00 text-gray-5 00 cursor-not-allowed' } } } ` } ` <span>Continue</span> <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 2 4 2 4">" " <p ath strokeLinecap="round" strokeLinejoin="round" strokeWidth= { 2 } d="M9 5 l7 7-7 7" />" " </svg> </button> </div> </div>; ))))))))))))))))))))))))))))))) */