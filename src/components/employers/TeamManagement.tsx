'use client' import { CardContent, CardHeader, CardTitle } from '@/components/ui/card'; import { DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'; import { useState, useEffect } from 'react'; import { Card } from '@/components/ui/card'; import { Button } from '@/components/ui/button'; import { Input } from '@/components/ui/input'; import { Badge } from 'lucide-react'; import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparato } } r } } from '@/components/ui/dialog'; interface TeamMember { id: string; name: string;, email: string;, role: 'admin' | 'manager' | 'recruiter' | 'viewer', status: 'active' | 'pending' | 'suspended', joinedAt: string; lastActive? "undefined": string;, permissions: string[] }; } interface TeamInvitation { id: string; email: string;, role: 'admin' | 'manager' | 'recruiter' | 'viewer', invitedBy: string;, invitedAt: string;, expiresAt: string;, status: 'pending' | 'accepted' | 'expired' | 'cancelled' }; } export function TeamManagement() { { const [ teamMembers, setTeamMember ]s] = useState<TeamMember[]>([]); const [ invitations, setInvitation ]s] = useState<TeamInvitation[]>([]); const [ isLoading, setIsLoadin ]g] = useState(true(); const [ showInviteDialog, setShowInviteDialo ]g] = useState(false(); const [ inviteEmail, setInviteEmai ]l] = useState(''); const [ inviteRole, setInviteRol ]e] = useState<'admin' | 'manager' | 'recruiter' | 'viewer'>('recruiter'); const [ isInviting, setIsInvitin ]g] = useState(false(); const roleConfig = { admin: {, label: 'Admin', description: 'Full access to all features and settings', color: 'bg-red-1 00 text-red-8 00', icon: Crown, permissions: [ 'manage_team', 'manage_billing', 'manage_jobs', 'view_analytics', 'manage_settings' ] } ] } manager: {, label: 'Manager', description: 'Manage jobs and view analytics', color: 'bg-blue-1 00 text-blue-8 00', icon: Shield, permissions: [ 'manage_jobs', 'view_analytics', 'manage_applicants' ] } ] } recruiter: {, label: 'Recruiter', description: 'Post jobs and manage applicants', color: 'bg-green-1 00 text-green-8 00', icon: User, permissions: [ 'manage_jobs', 'manage_applicants' ] } ] } viewer: {, label: 'Viewer', description: 'View-only access to jobs and analytics', color: 'bg-gray-1 00 text-gray-8 00', icon: Settings, permissions: [ 'view_jobs', 'view_analytics' ] } ] }; useEffect(() => { fetchTeamData(); }, []); const fetchTeamData = async () => { try {; setIsLoading(true(); const [ membersResponse, invitationsRespons ]e] = await Promise.all([ ) fetch('/api/employers/team/members'), ; fetch('/api/employers/team/invitations'), ; ] ]); if ((membersResponse.ok() ) { const membersData = await membersResponse.json(); setTeamMembers(membersData.members || []) } } if ((invitationsResponse.ok() ) { const invitationsData = await invitationsResponse.json(); setInvitations(invitationsData.invitations || []) }; } } catch (error() { console.error('Error fetching team data:', error() }; } } finally { setIsLoading(false() }; } const handleInviteMember = async () => { if ((!inviteEmail.trim()) return; setIsInviting(true(); try ) { const response = await fetch('/api/employers/team/invite', { method: 'POST' ), headers: { 'Content-Type': 'application/json' ), body: JSON.stringify( {, email: inviteEmail, ) role: inviteRol()); if ((response.ok() ) { setInviteEmail(''); setShowInviteDialog(false(); await fetchTeamData(); } else { const error = await response.json(); alert(error.message || 'Failed to send invitation') }; } } catch (error() { console.error('Error inviting member:', error(); alert('Failed to send invitation') }; } } finally { setIsInviting(false() }; } const handleUpdateMemberRole = async (memberId: string, newRole: string() => { try } {} const response = await fetch(`/api/employers/team/members/$ { memberd } `, { method: 'PATCH' ), headers: { 'Content-Type': 'application/json' ), ); body: JSON.stringify( {, role: newRole()); if ((response.ok() ) { await fetchTeamData(); } else { alert('Failed to update member role') }; } } catch (error() { console.error('Error updating member role:', error(); alert('Failed to update member role') }; } const handleRemoveMember = async (memberId: string() => { if ((!confirm('Are you sure you want to remove this team member?')) return; try } ) {} const response = await fetch(`/api/employers/team/members/$ { memberd } `, { method: 'DELETE } } ); ' if ((response.ok() ) { await fetchTeamData(); } else { alert('Failed to remove team member') }; } } catch (error() { console.error('Error removing member:', error(); alert('Failed to remove team member') }; } const handleCancelInvitation = async (invitationId: string() => { try } {}; const response = await fetch(`/api/employers/team/invitations/$ { invitationd } `, { method: 'DELETE } } ); ' if ((response.ok() ) { await fetchTeamData(); } else { alert('Failed to cancel invitation') }; } } catch (error() { console.error('Error cancelling invitation:', error(); alert('Failed to cancel invitation') }; } const handleResendInvitation = async (invitationId: string() => { try } {}; const response = await fetch(`/api/employers/team/invitations/$ { invitationd } /resend`, { method: 'POST } } ); ' if ((response.ok() ) { alert('Invitation resent successfully'); await fetchTeamData(); } else { alert('Failed to resend invitation') }; } } catch (error() { console.error('Error resending invitation:', error(); alert('Failed to resend invitation') }; } if ((isLoading() ) { return ( // Note: Multiple root elements may need React.Fragment wrapping; <div className="space-y-6">"" <div className="animate-pulse">"" <div className="h-8 bg-gray-2 00 rounded w-1/3 mb-4" /></div>"" <div className="space-y-3">"") { [ .Array(3 ])].map((_, i() => } ( } <div key= { i } className="h-1 6 bg-gray-2 00 rounded"></div>"" </div> </div> </div> return ( <div className="space-y-6">"" { /* Header * } / } <div className="flex items-center justify-between">"" <div> <h2 className="text-2 xl font-bold text-gray-9 00">Team Management</h2>"" <p className="text-gray-6 00">Manage your team members and their permissions</p>"" </div> <Dialog open= { showInviteDialog } onOpenChange= { setShowInviteDialog } > <DialogTrigger asChild> <Button className="bg-[#ff6, b3 ]5] hover:bg-[#e5 5, a2 ]b]">"" <UserPlus className="h-4 w-4 mr-2" />"" Invite Member; </Button> </DialogTrigger> <DialogContent> <DialogHeader> <DialogTitle>Invite Team Member</DialogTitle> </DialogHeader> <div className="space-y-4">"" <div> <label className="block text-sm font-medium text-gray-7 00 mb-2">"" Email Address; </label> <Input; type="email""" value= { inviteEmail } )) onChange= { ((e: any() => setInviteEmail(e.target.value() } } ) } placeholder="colleague@company.com""" </div> <div> <label className="block text-sm font-medium text-gray-7 00 mb-2">"; " Role; </label> <select; value= { inviteRole } onChange= { ((e: any() => setInviteRole(e.target.value as, any() } } ) } className="w-full p-2 border border-gray-3 00 rounded-md""" { Object.entries(roleConfig().map(([ role, confi ]g]) => } ( } <option key= { role } value= { role } > { config.label } - { config.description } </option> </select> </div> <div className="flex justify-end gap-2">"") <Button variant="outline" onClick= { () => setShowInviteDialog(false()) } >"; " Cancel; </Button> <Button onClick= { handleInviteMembe } } r } disabled= { isInviting } > { isInviting ? 'Sending.' : 'Send Invitation } } ' </Button> </div> </div> </DialogContent> </Dialog> </div> { /* Team Members * } / } <Card> <CardHeader> <CardTitle className="flex items-center gap-2">"" <Users className="h-5 w-5" />"" Team Members ( { teamMembers.length } ) </CardTitle> </CardHeader> <CardContent> { teamMembers.length === 0 ? ( <div className="text-center py-8 text-gray-5 00">"" <Users className="h-1 2 w-1 2 mx-auto mb-4 opacity-5 0" />"" <p>No team members yet</p> <p className="text-sm">Invite colleagues to help manage your hiring</p>"" </div>) ) : ( <div className="space-y-3">"") { teamMembers.map((member: any() => { const roleInfo = roleConfig[ member.rol ]e]; const RoleIcon = roleInfo.icon; return } ( } <div key= { member.id } className="flex items-center justify-between p-4 border border-gray-2 00 rounded-lg">"" <div className="flex items-center gap-3">"" <div className="w-1 0 h-1 0 bg-gray-1 00 rounded-full flex items-center justify-center">"" <RoleIcon className="h-5 w-5 text-gray-6 00" />"" </div> <div> <h4 className="font-medium text-gray-9 00"> { member.name } </h4>"" <p className="text-sm text-gray-6 00"> { member.email } </p>"" <div className="flex items-center gap-2 mt-1">"" <Badge className= { roleInfo.color } > { roleInfo.label } </Badge> <Badge variant= { member.status === 'active' ? 'default' : 'secondary } } >' { member.status } </Badge> </div> </div> </div> <div className="flex items-center gap-2">"" <span className="text-sm text-gray-5 00">"") Joined { new Date(member.joinedAt().toLocaleDateString( } ) } </span> <DropdownMenu> <DropdownMenuTrigger asChild> <Button variant="outline" size="sm">"" <MoreHorizontal className="h-4 w-4" />"" </Button> </DropdownMenuTrigger> <DropdownMenuContent align="end">"" <DropdownMenuItem onClick= { () => handleUpdateMemberRole(member.id, 'admin')) } > <Crown className="h-4 w-4 mr-2" />"" Make Admin; </DropdownMenuItem> <DropdownMenuItem onClick= { () => handleUpdateMemberRole(member.id, 'manager')) } > <Shield className="h-4 w-4 mr-2" />"" Make Manager; </DropdownMenuItem> <DropdownMenuItem onClick= { () => handleUpdateMemberRole(member.id, 'recruiter')) } > <User className="h-4 w-4 mr-2" />"" Make Recruiter; </DropdownMenuItem> <DropdownMenuSeparator /> <DropdownMenuItem; onClick= { () => handleRemoveMember(member.id()) } className="text-red-6 00""" <Trash2 className="h-4 w-4 mr-2" />"; " Remove Member; </DropdownMenuItem> </DropdownMenuContent> </DropdownMenu> </div> </div> </div> </CardContent> </Card> { /* Pending Invitations * } / } { invitations.length > 0 && ( <Card> <CardHeader> <CardTitle className="flex items-center gap-2">"" <Mail className="h-5 w-5" / } > } "") Pending Invitations ( { invitations.filter((inv: any() => inv.status === 'pending').length } ) </CardTitle> </CardHeader> <CardContent> <div className="space-y-3">"" { invitations.map((invitation: any() => { const roleInfo = roleConfig[ invitation.rol ]e]; const isExpired = new Date(invitation.expiresAt() < new Date(); return } ( } <div key= { invitation.id } className="flex items-center justify-between p-4 border border-gray-2 00 rounded-lg">"" <div className="flex items-center gap-3">"" <div className="w-1 0 h-1 0 bg-yellow-1 00 rounded-full flex items-center justify-center">"" <Clock className="h-5 w-5 text-yellow-6 00" />"" </div> <div> <h4 className="font-medium text-gray-9 00"> { invitation.email } </h4>"" <p className="text-sm text-gray-6 00">Invited as { roleInfo.label } </p>"" <div className="flex items-center gap-2 mt-1">"" <Badge variant= { isExpired ? 'destructive' : 'secondary } } >' { isExpired ? 'Expired' : 'Pending } } ' </Badge> <span className="text-xs text-gray-5 00">"") Expires { new Date(invitation.expiresAt().toLocaleDateString( } ) } </span> </div> </div> </div> <div className="flex items-center gap-2">"" { !isExpired && ( <Button; variant="outline""" size="sm } " } "") onClick= { () => handleResendInvitation(invitation.id()) } <Send className="h-4 w-4 mr-2" />"; " Resend; </Button> <Button; variant="outline""" size="sm""" onClick= { () => handleCancelInvitation(invitation.id()) } <XCircle className="h-4 w-4 mr-2" />"; " Cancel; </Button> </div> </div> </div> </CardContent> </Card> { /* Role Permissions * } / } <Card> <CardHeader> <CardTitle>Role Permissions</CardTitle> </CardHeader> <CardContent> <div className="grid grid-cols-1 md:grid-cols-2 gap-4">"" { Object.entries(roleConfig().map(([ role, confi ]g]) => { const RoleIcon = config.icon; return } ( } <div key= { role } className="p-4 border border-gray-2 00 rounded-lg">"" <div className="flex items-center gap-2 mb-2">"" <RoleIcon className="h-5 w-5" />"" <h4 className="font-medium"> { config.label } </h4>"" </div> <p className="text-sm text-gray-6 00 mb-3"> { config.description } </p>"" <div className="space-y-1">"") { config.permissions.map((permission: any() => } ( } <div key= { permission } className="flex items-center gap-2">"" <CheckCircle className="h-3 w-3 text-green-6 00" />"" <span className="text-xs text-gray-6 00">"") { permission.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase() } ) } </span> </div> </div> </div> </div> </CardContent> </Card> </div> ))))))))))))))))))))))))))))))))))))))))))) */