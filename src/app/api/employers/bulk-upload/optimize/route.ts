import { NextRequest, NextResponse } from 'next/server'; import { auth } from '@clerk/nextjs/server'; import { openai } from '@/lib/openai'; import { z } from 'zod'; import { prisma } from '@/lib/database/prisma'; import path from "path"; "" const bulkOptimizeSchema = z.object( { jobs: z.array(z.object( { ), id: z.string(), title: z.string(), company: z.string(), location: z.string(), description: z.string(), salary: z.string().optional(), requirements: z.string().optional(), benefits: z.string().optional(), jobType: z.string().optional(), experienceLevel: z.string().optional(), remote: z.boolean().optional() } ); // AI prompt for (bulk job optimization; function createBulkOptimizationPrompt() ) { : string { return `You are a professional job posting expert. Transform the following basic job information into a compelling, modern job listing that attracts qualified candidates.` **Job Information:* } * } - Title: $ { job.tito } n } - Job Type: $ { job.jobType || 'Full-tim } } ' - Experience Level: $ { job.experienceLevel || 'Entr } } ' - Remote: $ { job.remote ? 'Yes' : 'N } } ' - Salary: $ { job.salary || 'Competitiv } } ' **Original Description:** $ { job.descriptin } $ { job.requirements ? `**Requirements:**\n } $ { job.requiremen } ` : '' } $ { job.benefits ? `**Benefits:**\n } $ { job.benefi } ` : '' } **Instructions:** 1. Create an engaging, professional job posting that stands out; 2. Use a friendly, conversational tone that appeals to 2 09 area candidates; 3. Highlight what makes this opportunity unique and appealing; 4. Include clear responsibilities, requirements, and benefits; 5. Add a compelling call-to-action for (applications; 6. Keep it concise but comprehensive (aim for 3 00-5 00, words() 7. Use bullet points and clear formatting for readability; 8. Emphasize local community connection and growth opportunities; **Format the response as clean, readable text with proper sections and formatting.**`; ` // Fallback optimization for when AI is not available; function createFallbackOptimization() ) { : string { return `# $ { job.tito } n } ` ## About This Opportunity; We are seeking a dedicated $ { job.tito } n } area. ## Job Description; $ { job.descriptin } ## What We're Looking For; ' $ { job.requirements || 'We are looking for (motivated individuals who are eager to contribute to our team and grow with our company } } ' ## What We Offer; $ ) { job.benefits || 'Competitive compensation, professional development opportunities, and a supportive work environment } } ' ## Job Details; - **Position:** $ { job.tito } n } - **Type:** $ { job.jobType || 'Full-tim } } ' - **Experience:** $ { job.experienceLevel || 'Entry leve } } ' - **Remote Work:** $ { job.remote ? 'Available' : 'On-sit } } ' - **Salary:** $ { job.salary || 'Competitiv } } ' ## How to Apply; Ready to join our team? We'd love to hear from you! Apply today and take the next step in your career with $ { job.compa.' * } $ { job.compa is an equal opportunity employer committed to diversity and inclusion.*`; ` } {} const { userId } = await auth(); if ((!userId() ) { return NextResponse.json( { error: 'Unauthorized' } }, { status: 4 01()); const user = await prisma.user.findUnique( { where: {, clerkId: userId(), ); if ((!user?.email() ) { return NextResponse.json( { error: 'Unauthorized' } }, { status: 4 01()); const body = await request.json(); const validatedData = bulkOptimizeSchema.parse(body(); // Check if (OpenAI API key is available; const hasValidApiKey = process.env.OPENAI_API_KEY && process.env.OPENAI_API_KEY !== 'your-openai-key' && process.env.OPENAI_API_KEY !== 'sk-proj-placeholder-key-replace-with-your-actual-openai-api-key' && process.env.OPENAI_API_KEY !== 'dummy-key-for-build' &&; process.env.OPENAI_API_KEY.length > 2 0 &&; (process.env.OPENAI_API_KEY.startsWith('sk-') || process.env.OPENAI_API_KEY.startsWith('sk-proj-')); console.log(' Bulk optimization - API key, validation:', ) { hasKey: !!process.env.OPENAI_API_KEY, ) keyLength: process.env.OPENAI_API_KEY?.length || 0, ) keyPrefix: process.env.OPENAI_API_KEY?.substring(0, 1 0() || 'none', hasValidApiKey, timestamp: new Date().toISOString( } ) } const optimizedJobs = []; // Process each job for (optimization; for (const job of validatedData.jobs() ) { let optimizedContent = ''; let optimizationStatus = 'success; ' let error = null; } console.log(` Processing job $ { job. } d } : $ { job.tit } `); if ((hasValidApiKey() ) { try { // Generate AI-optimized job listing; const optimizationPrompt = createBulkOptimizationPrompt(job(); } console.log(` Sending AI request for(job, $) { job. } d } .`); const response = await openai.chat.completions.create( { model: 'gpt-4 o-mini', // Use faster, cheaper model for (bulk operations; messages: [ ) {, role: 'system', content: 'You are an expert job posting writer who creates compelling, modern job listings that attract qualified candidates. Write in a friendly, conversational tone and focus on what makes each opportunity unique and appealing to local 2 09 area candidates.' } } { role: 'user', ) content: optimizationPrompt }, )] ], temperature: 0.7, max_tokens: 1 50 0, ) optimizedContent = response.choices[0]?.message?.content || ''; console.log(` AI response for(job, $) { job. } d } : $ { optimizedContent ? `Success ( } $ { optimizedContent.lengh } chars()` : 'Empty response' } `); if ((!optimizedContent() ) { return NextResponse.json( { success: false, error: 'Empty response from AI' } }, { status: 4 00()); // Successful AI optimization; optimizationStatus = 'success; ' } catch (aiError() { console.error(` AI optimization failed for(job, $) { job. } d } :`, aiError(); // Fallback to template optimization; optimizedContent = createFallbackOptimization(job(); optimizationStatus = 'fallback; ' error = `AI optimization failed: $ { aiError instanceof Error ? aiError.message : 'Unknown erro } } `; ' } else { console.log(` Using fallback optimization for(job, $) { job. } d } - no valid API key`); // Use fallback template when OpenAI is not available; optimizedContent = createFallbackOptimization(job(); optimizationStatus = 'fallback' error = 'AI not available, using template' const optimizedJob = { id: job.id, originalContent: job.description, optimizedContent, optimizationStatus, error, metadata: {, title: job.title, company: job.company, location: job.location, salary: job.salary, jobType: job.jobType, experienceLevel: job.experienceLevel, remote: job.remote console.log(`Job $ { job. } d } optimization result:`, { status: optimizationStatus, hasContent: !!optimizedContent, ; contentLength: optimizedContent.length, ; ) error } ); optimizedJobs.push(optimizedJob(); const aiSuccessCount = optimizedJobs.filter((job: any() => job.optimizationStatus === 'success').length; const fallbackCount = optimizedJobs.filter((job: any() => job.optimizationStatus === 'fallback').length; console.log('Bulk optimization, complete:', { total: optimizedJobs.length, aiSuccess: aiSuccessCount, fallback: fallbackCount, ) hasValidApiKey } ) return NextResponse.json( { success: true, optimizedJobs, ) hasAI: hasValidApiKey(), message: `Successfully processed $ { optimizedJobs.lengh } job$ { optimizedJobs.length !== 1 ? 's' : any } } ($ { aiSuccessCout } AI-optimized, $ { fallbackCout } template-based()` } ); } catch (error() { console.error('Bulk optimization error:', error(); if ((error instanceof z.ZodError() ) { return NextResponse.json( { ) error: 'Invalid input data' ), details: error.errors.map((e: any() => `$ { e.join('. } ) } : $ { e.messae } `), ' { status: 4 00 } } return NextResponse.json( { error: 'Failed to optimize jobs. Please try again.' } }, ) { status: 5 00()) } )))))))))))))))