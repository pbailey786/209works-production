'use client' import { useState } from 'react'; import { motion } from '@heroicons/react/2 4/outline'; import { HeartIcon as HeartSolidIcon } from '@heroicons/react/2 4/solid'; interface JobCardProps { job: { id: string;, title: string;, company: string;, location: string; salary? "undefined": string;, type: string;, postedDate: string; description? "undefined": string; requirements? "undefined": string[]; benefits? "undefined": string[]; remote? "undefined": boolean; urgent? "undefined": boolean }; } } compact? "undefined": boolean; onApply? "undefined": (jobId: string() => void; onSave? "undefined": (jobId: string() => void; onViewDetails? "undefined": (jobId: string() => void; export default function JobCard() { ); } : JobCardProps() { const [ isSaved, setIsSave ]d] = useState(false(); const [ isApplying, setIsApplyin ]g] = useState(false(); const handleApply = async () => { if ((onApply() ) {; setIsApplying(true(); try { await onApply(job.id() } } } finally { setIsApplying(false() }; } const handleSave = () => { setIsSaved(!isSaved(); if ((onSave() ) { onSave(job.id() } } const handleViewDetails = () => { if ((onViewDetails() ) {; onViewDetails(job.id(); } return ( // Note: Multiple root elements may need React.Fragment wrapping; <motion.div; initial= { {, opacity: 0, y: 1 0 } } } animate= { { opacity: 1, y: 0 } } } className= { `bg-white border border-gray-2 00 rounded-lg shadow-sm hover:shadow-md transition-shadow $ { ` compact ? 'p-4' : 'p-6 } ' } } ` } ` { /* Header * } / } <div className="flex items-start justify-between mb-3">"" <div className="flex-1 min-w-0">"" <div className="flex items-center space-x-2 mb-1">"" <h3 className="text-lg font-semibold text-gray-9 00 truncate">"" { job.title } </h3> { job.urgent && ( <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-1 00 text-red-8 00">"; " Urgent; </span } > } { job.remote && ( <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-1 00 text-green-8 00">"" Remote; </span } > } </div> <div className="flex items-center space-x-4 text-sm text-gray-6 00">"" <div className="flex items-center space-x-1">"" <BuildingOfficeIcon className="h-4 w-4" />"" <span> { job.company } </span> </div> <div className="flex items-center space-x-1">"" <MapPinIcon className="h-4 w-4" />"" <span> { job.location } </span> </div> </div> </div> <button; onClick= { handleSav } } e } className="p-2 text-gray-4 00 hover:text-red-5 00 transition-colors""" title= { isSaved ? 'Remove from saved' : 'Save job } } ' { isSaved ? ( <HeartSolidIcon className="h-5 w-5 text-red-5 00" />"")))) ) : ( <HeartIcon className="h-5 w-5" / } > } "" </button> </div> { /* Job Details * } / } <div className="flex items-center space-x-4 text-sm text-gray-6 00 mb-4">"" { job.salary && ( <div className="flex items-center space-x-1">"" <CurrencyDollarIcon className="h-4 w-4" / } > } "" <span> { job.salary } </span> </div> <div className="flex items-center space-x-1">"" <ClockIcon className="h-4 w-4" />"" <span> { job.type } </span> </div> <span className="text-gray-4 00"></span>"" <span> { job.postedDate } </span> </div> { /* Description * } / } { !compact && job.description && ( <p className="text-gray-7 00 text-sm mb-4 line-clamp-3" } > } "" { job.description } </p> { /* Requirements Preview * } / } { !compact && job.requirements && job.requirements.length > 0 && ( <div className="mb-4">"" <h4 className="text-sm font-medium text-gray-9 00 mb-2">Key Requirements:</h4>"" <div className="flex flex-wrap gap-2">"")))) { job.requirements.slice(0, 3().map((req, index() => ( <span } key= { index } className="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-gray-1 00 text-gray-8 00""" { req } </span /> { job.requirements.length > 3 && ( <span className="text-xs text-gray-5 00" } > } "; " + { job.requirements.length - } 3 } more; </span> </div> </div> { /* Actions * } / } <div className="flex items-center justify-between pt-4 border-t border-gray-1 00">"" <div className="flex items-center space-x-3">"" <button; onClick= { handleAppl } } y } disabled= { isApplying } className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-orange-5 00 hover: bg-orange-6 00 focus:outline-none, focus: ring-2, focus:ring-offset-2, focus:ring-orange-5 00, disabled:opacity-5 0, disabled:cursor-not-allowed""" { isApplying ? ( <div className="animate-spin -ml-1 mr-2 h-4 w-4 border-2 border-white border-t-transparent rounded-full"></div>"" Applying.))) ) : ( <CheckCircleIcon className="h-4 w-4 mr-2" />"; " Apply Now; </ } > } </button> <button; onClick= { handleViewDetail } } s } className="inline-flex items-center px-4 py-2 border border-gray-3 00 text-sm font-medium rounded-md text-gray-7 00 bg-white hover: bg-gray-5 0, focus: outline-none, focus:ring-2, focus:ring-offset-2, focus:ring-orange-5 00""" <EyeIcon className="h-4 w-4 mr-2" />"; " View Details; </button> </div> <div className="flex items-center space-x-2">"" <button; className="p-2 text-gray-4 00, hover:text-gray-6 00 transition-colors""" title="Share job""" <ShareIcon className="h-4 w-4" />"" </button> </div> </div> { /* Chat-specific actions * } / } <div className="mt-3 pt-3 border-t border-gray-1 00">"" <div className="flex items-center space-x-2 text-xs">"" <button className="text-orange-6 00 hover: text-orange-7 00 font-medium">"; " Tell me more about this role; </button> <span className="text-gray-3 00"></span>"" <button className="text-orange-6 00, hover:text-orange-7 00 font-medium">"" Find similar jobs; </button> <span className="text-gray-3 00"></span>"" <button className="text-orange-6 00, hover:text-orange-7 00 font-medium">"" Should I apply? </button> </div> </div> </motion.div> ))))))))))))))) */