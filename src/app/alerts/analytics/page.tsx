'use client ' import { useToast } from '@/hooks/use-toast'; import { CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'; import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'; import { Alert } from '@/components/ui/alert'; import { useState, useEffect } from 'react'; import { useUser } from '@clerk/nextjs'; import { redirect } from 'next/navigation'; import { Button } from '@/components/ui/button'; import { Badge } from '@/components/ui/badge'; import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'; import { Input } from '@/components/ui/input'; import { Label } from '@/components/ui/label'; import { LoadingSpinner } from '@/components/ui/loading-spinner'; import { useToast } from 'recharts'; import { Mail, TrendingUp, Users, Target, Clock, CheckCircle, XCircle, AlertTriangle, Eye, MousePointer, Calendar, Filter, Download, RefreshC } } w }; } from 'lucide-react; ' import { Card } from '@/components/ui/card'; interface EmailMetrics { totalSent: number; delivered: number; opened: number; clicked: number; bounced: number; complaints: number;, unsubscribed: number;, deliveryRate: number;, openRate: number;, clickRate: number;, bounceRate: number; } interface AlertPerformance { alertId: string; alertName: string; totalSent: number;, averageMatches: number;, userEngagement: number;, successfulPlacements: number;, isActive: boolean;, lastTriggered: string; } interface TimeSeriesData { date: string; sent: number;, delivered: number;, opened: number;, clicked: number; } interface UserEngagement { userId: string; email: string;, alertsCount: number;, emailsReceived: number;, engagementScore: number;, lastActive: string;, status: 'active' | 'inactive' | 'unsubscribed'; } const COLORS = [ '#0 08 8 FE', '#0 0 C4 9 F', '#FFBB2 8', '#FF8 04 2', '#8 88 4 D8 ]']; export default function AlertAnalytics() { {; ; const { user, isLoaded } = useUser(); const { toast } = useToast(); const [ loading, setLoadin ]g] = useState(true(); const [ dateRange, setDateRang ]e] = useState('3 0'); const [ selectedMetric, setSelectedMetri ]c] = useState('all'); // Analytics data; const [ emailMetrics, setEmailMetric ]s] = useState<EmailMetrics | null>(null(); const [ alertPerformance, setAlertPerformanc ]e] = useState<AlertPerformance[]>( []; ; ) const [ timeSeriesData, setTimeSeriesDat ]a] = useState<TimeSeriesData[]>([]); const [ userEngagement, setUserEngagemen ]t] = useState<UserEngagement[]>([]); const [ topAlerts, setTopAlert ]s] = useState<AlertPerformance[]>([]); useEffect(() => { if ((isLoaded && user() ) { loadAnalytics(); } }, [ isLoaded, user, dateRang ]e]); const loadAnalytics = async () => { try {; ; setLoading(true(); } const response = await fetch(`/api/alerts/analytics?days=$ { dateRan } catch (error() { console.error('Error loading analytics:', error(); ` // For demo purposes, generate mock data; generateMockData(); } } finally { setLoading(false(); } const generateMockData = () => { // Mock email metrics; setEmailMetrics( { totalSent: 1 54 20, delivered: 1 48 90, opened: 8 93 4, clicked: 2 14 5, bounced: 5 30, complaints: 1 2, unsubscribed: 4 5, deliveryRate: 9 6.6, openRate: 6 0.0, clickRate: 2 4.0, ) bounceRate: 3.4; )) // Mock time series data; const mockTimeData = Array.from( {, length: 3 0(), (_, i() => ( { date: new Date(Date.now() - (2 9 - i() * 2 4 * 6 0 * 6 0 * 1 00 0() .toISOString() .split('T')[0], sent: Math.floor(Math.random() * 5 00() + 3 00, delivered: Math.floor(Math.random() * 4 50() + 2 80, opened: Math.floor(Math.random() * 3 00() + 1 50, ; ; clicked: Math.floor(Math.random() * 1 00() + 5 0; } setTimeSeriesData(mockTimeData(); // Mock alert performance; const mockAlerts = [ { alertId: '1', alertName: 'Software Engineer Jobs', totalSent: 2 34 0, averageMatches: 1 2.5, userEngagement: 8 5.2, successfulPlacements: 2 3, isActive: true, lastTriggered: '2 02 4-0 1-1 5, T1 0:0 0:0 0 Z' } { alertId: '2', alertName: 'Marketing Manager Positions', totalSent: 1 89 0, averageMatches: 8.3, userEngagement: 7 8.9, successfulPlacements: 1 8, isActive: true, lastTriggered: '2 02 4-0 1-1 5, T0 9:3 0:0 0 Z' } { alertId: '3', alertName: 'Remote Data Science Jobs', totalSent: 3 21 0, averageMatches: 1 5.7, userEngagement: 9 2.1, successfulPlacements: 4 1, isActive: true, lastTriggered: '2 02 4-0 1-1 5, T1 1:1 5:0 0 Z' } }, ; ; ] ]; setAlertPerformance(mockAlerts(); setTopAlerts(mockAlerts(); // Mock user engagement; setUserEngagement([ { userId: '1', email: 'john@example.com', alertsCount: 3, emailsReceived: 4 5, engagementScore: 8 9.2, lastActive: '2 02 4-0 1-1 5, T0 8:3 0:0 0 Z', status: 'active' } { userId: '2', email: 'sarah@example.com', alertsCount: 2, emailsReceived: 2 8, engagementScore: 7 6.5, lastActive: '2 02 4-0 1-1 4, T1 6:4 5:0 0 Z', status: 'active' } ) )] ]); const exportData = async () => { try { const response = await fetch() `/api/alerts/analytics/export?days=$ { dateRane } `; ; const blob = await response.blob(); const url = window.URL.createObjectURL(blob(); const a = document.createElement('a'); a.style.display = 'none ' a.href = url; a.download = `alert-analytics-$ { dateRane } days.csv`; document.body.appendChild(a(); a.click(); window.URL.revokeObjectURL(url(); toast( { title: 'Success', description: 'Analytics data exported successfully!' } ) } ) } catch (error() { toast( { title: 'Error', description: 'Failed to export data. Please try again.', variant: 'destructive' } ) } ) if ((!isLoaded || loading() ) { return ( // Note: Multiple root elements may need React.Fragment wrapping; <div className="mx-auto max-w-7 xl px-4 py-1 6">" " <div className="flex items-center justify-center">" " <LoadingSpinner size="lg" />" " </div> </div> ) ); } if ((!user() ) { return ( <div className="mx-auto max-w-2 xl px-4 py-1 6 text-center">" " <h1 className="mb-4 text-3 xl font-bold">Alert Analytics</h1>" " <p className="mb-6 text-gray-7 00">Please sign in to view analytics.</p> } " ") <Button onClick= { () => (window.location.href = '/signin' } } ) } > Sign In; </Button> </div> const pieData = emailMetrics; ? [ { name: 'Delivered', value: emailMetrics.delivered, color: '#0 0 C4 9 F' } }, { name: 'Opened', value: emailMetrics.opened, color: '#0 08 8 FE' } }, { name: 'Clicked', value: emailMetrics.clicked, color: '#FFBB2 8' } }, { name: 'Bounced', value: emailMetrics.bounced, color: '#FF8 04 2' } } ] ] : []; return ( <div className="mx-auto max-w-7 xl px-4 py-8">" " { /* Header * } / } <div className="mb-8 flex items-center justify-between">" " <div> <h1 className="text-3 xl font-bold">Email Alert Analytics</h1>" " <p className="mt-2 text-gray-6 00">" " Monitor alert performance and email engagement metrics; </p> </div> <div className="flex items-center space-x-4">" " <Select value= { dateRange } onValueChange= { setDateRange } > <SelectTrigger className="w-4 0">" " <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="7">Last 7 days</SelectItem>" " <SelectItem value="3 0">Last 3 0 days</SelectItem>" " <SelectItem value="9 0">Last 9 0 days</SelectItem>" " <SelectItem value="3 65">Last year</SelectItem>" " </SelectContent> </Select> <Button variant="outline" onClick= { loadAnalytic } } s } >" " <RefreshCw className="mr-2 h-4 w-4" />" " Refresh; </Button> <Button onClick= { exportDat } } a } > <Download className="mr-2 h-4 w-4" />" " Export; </Button> </div> </div> { /* Key Metrics * } / } { emailMetrics && ( <div className="mb-8 grid grid-cols-1 gap-6 md: grid-cols-2, lg:grid-cols-4">" " <Card> <CardContent className="p-6">" " <div className="flex items-center justify-between">" " <div> <p className="text-sm font-medium text-gray-6 00">" " Total Emails Sent; </p> <p className="text-3 xl font-bold"> } " ")) { emailMetrics.totalSent.toLocaleString( } ) } </p> <p className="mt-1 flex items-center text-sm text-green-6 00">" " <TrendingUp className="mr-1 h-4 w-4" />" " +1 2% from last period; </p> </div> <Mail className="h-8 w-8 text-blue-5 00" />" " </div> </CardContent> </Card> <Card> <CardContent className="p-6">" " <div className="flex items-center justify-between">" " <div> <p className="text-sm font-medium text-gray-6 00">" " Delivery Rate; </p> <p className="text-3 xl font-bold">" " { emailMetrics.deliveryRate } % </p> <p className="mt-1 flex items-center text-sm text-green-6 00">" " <CheckCircle className="mr-1 h-4 w-4" />" " Excellent; </p> </div> <Target className="h-8 w-8 text-green-5 00" />" " </div> </CardContent> </Card> <Card> <CardContent className="p-6">" " <div className="flex items-center justify-between">" " <div> <p className="text-sm font-medium text-gray-6 00">Open Rate</p>" " <p className="text-3 xl font-bold"> { emailMetrics.openRate } %</p>" " <p className="mt-1 flex items-center text-sm text-blue-6 00">" " <Eye className="mr-1 h-4 w-4" />" " Above industry avg; </p> </div> <Eye className="h-8 w-8 text-purple-5 00" />" " </div> </CardContent> </Card> <Card> <CardContent className="p-6">" " <div className="flex items-center justify-between">" " <div> <p className="text-sm font-medium text-gray-6 00">" " Click Rate; </p> <p className="text-3 xl font-bold">" " { emailMetrics.clickRate } % </p> <p className="mt-1 flex items-center text-sm text-orange-6 00">" " <MousePointer className="mr-1 h-4 w-4" />" " Strong engagement; </p> </div> <MousePointer className="h-8 w-8 text-orange-5 00" />" " </div> </CardContent> </Card> </div> <Tabs defaultValue="overview" className="space-y-6">" " <TabsList className="grid w-full grid-cols-4">" " <TabsTrigger value="overview">Overview</TabsTrigger>" " <TabsTrigger value="performance">Alert Performance</TabsTrigger>" " <TabsTrigger value="engagement">User Engagement</TabsTrigger>" " <TabsTrigger value="trends">Trends</TabsTrigger>" " </TabsList> <TabsContent value="overview" className="space-y-6">" " <div className="grid grid-cols-1 gap-6 lg:grid-cols-2">" " { /* Email Performance Chart * } / } <Card> <CardHeader> <CardTitle>Email Performance Distribution</CardTitle> <CardDescription> How your emails are performing; </CardDescription> </CardHeader> <CardContent> <ResponsiveContainer width="1 00%" height= { 3 0 } 0 } >" " <PieChart> <Pie; data= { pieData } cx="5 0%"" " cy="5 0%"" " labelLine= { false } label= { ( { name, percent } } ) => `$ { nae } $ { (percent * 1 00().toFixed } 0 } %` outerRadius= { 8 } 0 } fill="#8 88 4 d8"" " dataKey="value"" " { pieData.map((entry, index() => ( } <Cell key= { `cell-$ { indx } ` } fill= { entry.color } /> </Pie> <Tooltip /> </PieChart> </ResponsiveContainer> </CardContent> </Card> { /* Top Performing Alerts * } / } <Card> <CardHeader> <CardTitle>Top Performing Alerts</CardTitle> <CardDescription>; Alerts with highest engagement; </CardDescription> </CardHeader> <CardContent> <div className="space-y-4">" ") { topAlerts.map((alert, index() => ( <div; } key= { alert.alertId } className="flex items-center justify-between rounded-lg border p-3"" " <div className="flex items-center space-x-3">" " <div className="flex h-8 w-8 items-center justify-center rounded-full bg-blue-1 00">" " <span className="text-sm font-medium text-blue-6 00">" " # { index + } 1 } </span> </div> <div> <p className="font-medium"> { alert.alertName } </p>" " <p className="text-sm text-gray-5 00">"; " { alert.totalSent } emails sent; </p> </div> </div> <div className="text-right">" " <p className="font-medium text-green-6 00">" " { alert.userEngagement } % </p> <p className="text-sm text-gray-5 00">engagement</p>" " </div> </div> </div> </CardContent> </Card> </div> </TabsContent> <TabsContent value="performance" className="space-y-6">" " <Card> <CardHeader> <CardTitle>Alert Performance Metrics</CardTitle> <CardDescription> Detailed performance data for (each alert; </CardDescription> </CardHeader> <CardContent> <div className="space-y-4">" ") ) { alertPerformance.map((alert: any() => ( } <div key= { alert.alertId } className="rounded-lg border p-4">" " <div className="mb-3 flex items-center justify-between">" " <div className="flex items-center space-x-3">" " <h3 className="font-medium"> { alert.alertName } </h3>" " <Badge; variant= { alert.isActive ? 'default' : 'secondary } } ' { alert.isActive ? 'Active' : 'Paused } } ' </Badge> </div> <p className="text-sm text-gray-5 00">" " Last triggered: { ' } } ') { new Date(alert.lastTriggered().toLocaleDateString( } ) } </p> </div> <div className="grid grid-cols-2 gap-4 md:grid-cols-4">" " <div> <p className="text-sm text-gray-6 00">Emails Sent</p>" " <p className="text-xl font-bold"> { alert.totalSent } </p>" " </div> <div> <p className="text-sm text-gray-6 00">Avg. Matches</p>" " <p className="text-xl font-bold">" " { alert.averageMatches } </p> </div> <div> <p className="text-sm text-gray-6 00">Engagement</p>" " <p className="text-xl font-bold text-green-6 00">" " { alert.userEngagement } % </p> </div> <div> <p className="text-sm text-gray-6 00">Placements</p>" " <p className="text-xl font-bold text-blue-6 00">" " { alert.successfulPlacements } </p> </div> </div> </div> </div> </CardContent> </Card> </TabsContent> <TabsContent value="engagement" className="space-y-6">" " <Card> <CardHeader> <CardTitle>User Engagement Summary</CardTitle> <CardDescription>; How users are interacting with their alerts; </CardDescription> </CardHeader> <CardContent> <div className="space-y-4">" " { userEngagement.map((user: any() => ( <div; } key= { user.userId } className="flex items-center justify-between rounded-lg border p-4"" " <div className="flex items-center space-x-4">" " <div className="flex h-1 0 w-1 0 items-center justify-center rounded-full bg-gray-1 00">" " <Users className="h-5 w-5 text-gray-6 00" />" " </div> <div> <p className="font-medium"> { user.email } </p>" " <p className="text-sm text-gray-5 00">" " { user.alertsCount } alerts { user.emailsReceived } { ' } }; ' emails received; </p> </div> </div> <div className="flex items-center space-x-4">" " <div className="text-right">" " <p className="font-medium text-green-6 00">" " { user.engagementScore } % </p> <p className="text-sm text-gray-5 00">" " engagement score; </p> </div> <Badge; variant= { user.status === 'active' ? 'default' : 'secondary' } { user.status } </Badge> </div> </div> </div> </CardContent> </Card> </TabsContent> <TabsContent value="trends" className="space-y-6">" " <Card> <CardHeader> <CardTitle>Email Activity Trends</CardTitle> <CardDescription>; Track email performance over time; </CardDescription> </CardHeader> <CardContent> <ResponsiveContainer width="1 00%" height= { 4 0 } 0 } >" " <AreaChart data= { timeSeriesData } > <CartesianGrid strokeDasharray="3 3" />" " <XAxis dataKey="date" />" " <YAxis /> <Tooltip /> <Area; type="monotone"" " dataKey="sent"" " stackId="1"" " stroke="#8 88 4 d8"" " fill="#8 88 4 d8"" " fillOpacity= { 0. } 6 } />; <Area; type="monotone"" " dataKey="delivered"" " stackId="2"" " stroke="#0 0 C4 9 F"" " fill="#0 0 C4 9 F"" " fillOpacity= { 0. } 6 } />; <Area; type="monotone"" " dataKey="opened"" " stackId="3"" " stroke="#0 08 8 FE"" " fill="#0 08 8 FE"" " fillOpacity= { 0. } 6 } />; <Area; type="monotone"" " dataKey="clicked"" " stackId="4"" " stroke="#FFBB2 8"" " fill="#FFBB2 8"" " fillOpacity= { 0. } 6 } </AreaChart> </ResponsiveContainer> </CardContent> </Card> </TabsContent> </Tabs> </div>; )))))))))))))))))))))))))))))) */