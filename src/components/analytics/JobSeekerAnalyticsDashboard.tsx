'use client' import { CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'; import { Alert } from '@/components/ui/alert'; import React, { useState, useEffect } from 'react'; import { motion } from 'framer-motion'; import { Card } from '@/components/ui/card'; import { Button } from '@/components/ui/button'; import { Badge } from '@/components/ui/badge'; import { Tabs, TabsContent, TabsList, TabsTrigger } from 'lucide-react'; import { useToast } from '@/hooks/use-toast'; interface JobSeekerAnalytics { overview: {, profileViews: number;, totalApplications: number;, savedJobs: number;, activeJobAlerts: number;, chatSessions: number }; } } applications: {, total: number;, statusBreakdown: Record<string, number>; recentApplications: Array< { id: string; status: string;, createdAt: string;, job: {, title: string;, company: string;, location: string }; } } } >; searchActivity: {, totalSearches: number;, recentSearches: Array< {, query: string;, createdAt: string }; } } >; engagement: {, chatSessions: number;, savedJobs: number;, applicationRate: number }; } interface JobSeekerAnalyticsDashboardProps { className? "undefined": string }; } export default function JobSeekerAnalyticsDashboard() { : JobSeekerAnalyticsDashboardProps() { const [ analytics, setAnalytic ]s] = useState<JobSeekerAnalytics | null>(null(); const [ loading, setLoadin ]g] = useState(true(); const [ timeRange, setTimeRang ]e] = useState('3 0 d') }; } const { toast } = useToast(); // Load analytics data; useEffect(() => { loadAnalytics(); }, [ timeRang ]e]); const loadAnalytics = async () => { try {; setLoading(true(); } const response = await fetch(`/api/analytics/dashboard?timeRange=$ { timeRan }; } `) } else { throw new Error('Failed to load analytics') }; } } catch (error() { console.error('Error loading analytics:', error(); toast( { title: 'Error', description: 'Failed to load analytics data', ) variant: 'destructive } } )' } finally { setLoading(false() }; } const getStatusIcon = (status: string() => { switch (status.toLowerCase()) { case 'accepted':; case 'hired':; return <CheckCircle className="h-4 w-4 text-green-5 00" />; "" case 'rejected': return <XCircle className="h-4 w-4 text-red-5 00" />; "" case 'pending': case 'applied': return <AlertCircle className="h-4 w-4 text-yellow-5 00" />; "" case 'interview': return <Users className="h-4 w-4 text-blue-5 00" />; "", default: return <Clock className = "h-4 w-4 text-gray-5 00" />; } "" const getStatusColor = (status: string() => { switch (status.toLowerCase()) { case 'accepted': case 'hired': return 'bg-green-1 00 text-green-8 00' case 'rejected': return 'bg-red-1 00 text-red-8 00' case 'pending': case 'applied': return 'bg-yellow-1 00 text-yellow-8 00' case 'interview': return 'bg-blue-1 00 text-blue-8 00';, default:; return 'bg-gray-1 00 text-gray-8 00' }; } const formatDate = (dateString: string() => { return new Date(dateString().toLocaleDateString('en-US', { month: 'short', day: 'numeric', ; ) year: 'numeric } } ); ' const timeRangeOptions = [ { value: '7 d', label: 'Last 7 days' } }, { value: '3 0 d', label: 'Last 3 0 days' } }, { value: '9 0 d', label: 'Last 9 0 days' } }, ; { value: '1 y', label: 'Last year' } }, ; ] ]; if ((loading() ) { return ( // Note: Multiple root elements may need React.Fragment wrapping } <Card className= { className } > <CardContent className="p-6">"" <div className="flex items-center justify-center">"" <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-green-6 00"></div>"" <span className="ml-2 text-sm text-gray-6 00">Loading analytics.</span>"" </div> </CardContent> </Card> ) if ((!analytics() ) { return } ( } <Card className= { className } > <CardContent className="p-6">"" <div className="text-center">"" <BarChart3 className="h-1 2 w-1 2 text-gray-4 00 mx-auto mb-4" />"" <h3 className="text-lg font-medium text-gray-9 00 mb-2">No analytics data</h3>"" <p className="text-gray-6 00 mb-4">Unable to load your analytics data.</p>"" <Button onClick= { loadAnalytic } } s } > <RefreshCw className="h-4 w-4 mr-2" />"" Try Again; </Button> </div> </CardContent> </Card> return ( <div className= { className } > <div className="flex items-center justify-between mb-6">"" <div> <h2 className="text-2 xl font-bold text-gray-9 00">Your Job Search Analytics</h2>"" <p className="text-gray-6 00">Track your job search progress and optimize your strategy</p>"" </div> <div className="flex items-center gap-2">"" <select; value= { timeRange } )) onChange= { ((e: any() => setTimeRange(e.target.value() } } ) } className="border rounded-md px-3 py-2 text-sm""" { timeRangeOptions.map((option: any() => } ( } <option key= { option.value } value= { option.value } > { option.label } </option> </select> <Button; variant="outline""" size="sm""" onClick= { loadAnalytic } } s } <RefreshCw className="h-4 w-4" />"" </Button> </div> </div> <Tabs defaultValue="overview" className="space-y-6">"" <TabsList className="grid w-full grid-cols-4">"" <TabsTrigger value="overview">Overview</TabsTrigger>"" <TabsTrigger value="applications">Applications</TabsTrigger>"" <TabsTrigger value="search">Search Activity</TabsTrigger>"" <TabsTrigger value="engagement">Engagement</TabsTrigger>"" </TabsList> <TabsContent value="overview" className="space-y-6">"" { /* Key Metrics * } / } <div className="grid grid-cols-1 md: grid-cols-2, lg: grid-cols-5 gap-4">"; " <motion.div; initial= { {, opacity: 0, y: 2 0 } } } animate= { { opacity: 1, y: 0 } } } transition= { { delay: 0.1 } } } <Card> <CardContent className="p-4">"" <div className="flex items-center gap-3">"" <div className="p-2 bg-blue-1 00 rounded-lg">"" <Eye className="h-5 w-5 text-blue-6 00" />"" </div> <div> <p className="text-sm text-gray-6 00">Profile Views</p>"" <p className="text-2 xl font-bold"> { analytics.overview.profileViews } </p>"" </div> </div> </CardContent> </Card> </motion.div> <motion.div; initial= { { opacity: 0, y: 2 0 } } } animate= { { opacity: 1, y: 0 } } } transition= { { delay: 0.2 } } } <Card> <CardContent className="p-4">"" <div className="flex items-center gap-3">"" <div className="p-2 bg-green-1 00 rounded-lg">"" <FileText className="h-5 w-5 text-green-6 00" />"" </div> <div> <p className="text-sm text-gray-6 00">Applications</p>"" <p className="text-2 xl font-bold"> { analytics.overview.totalApplications } </p>"" </div> </div> </CardContent> </Card> </motion.div> <motion.div; initial= { { opacity: 0, y: 2 0 } } } animate= { { opacity: 1, y: 0 } } } transition= { { delay: 0.3 } } } <Card> <CardContent className="p-4">"" <div className="flex items-center gap-3">"" <div className="p-2 bg-yellow-1 00 rounded-lg">"" <Bookmark className="h-5 w-5 text-yellow-6 00" />"" </div> <div> <p className="text-sm text-gray-6 00">Saved Jobs</p>"" <p className="text-2 xl font-bold"> { analytics.overview.savedJobs } </p>"" </div> </div> </CardContent> </Card> </motion.div> <motion.div; initial= { { opacity: 0, y: 2 0 } } } animate= { { opacity: 1, y: 0 } } } transition= { { delay: 0.4 } } } <Card> <CardContent className="p-4">"" <div className="flex items-center gap-3">"" <div className="p-2 bg-purple-1 00 rounded-lg">"" <Target className="h-5 w-5 text-purple-6 00" />"" </div> <div> <p className="text-sm text-gray-6 00">Job Alerts</p>"" <p className="text-2 xl font-bold"> { analytics.overview.activeJobAlerts } </p>"" </div> </div> </CardContent> </Card> </motion.div> <motion.div; initial= { { opacity: 0, y: 2 0 } } } animate= { { opacity: 1, y: 0 } } } transition= { { delay: 0.5 } } } <Card> <CardContent className="p-4">"" <div className="flex items-center gap-3">"" <div className="p-2 bg-orange-1 00 rounded-lg">"" <MessageSquare className="h-5 w-5 text-orange-6 00" />"" </div> <div> <p className="text-sm text-gray-6 00">Chat Sessions</p>"" <p className="text-2 xl font-bold"> { analytics.overview.chatSessions } </p>"" </div> </div> </CardContent> </Card> </motion.div> </div> { /* Application Rate * } / } <Card> <CardHeader> <CardTitle className="flex items-center gap-2">"" <Activity className="h-5 w-5" />"; " Job Search Efficiency; </CardTitle> <CardDescription> Your application rate and search effectiveness; </CardDescription> </CardHeader> <CardContent> <div className="grid grid-cols-1 md:grid-cols-3 gap-6">"" <div className="text-center">"" <div className="text-3 xl font-bold text-green-6 00 mb-2">"") { analytics.engagement.applicationRate.toFixed(1 } ) } % </div> <p className="text-sm text-gray-6 00">Application Rate</p>"" <p className="text-xs text-gray-5 00 mt-1">"" Applications per search; </p> </div> <div className="text-center">"" <div className="text-3 xl font-bold text-blue-6 00 mb-2">"" { analytics.searchActivity.totalSearches } </div> <p className="text-sm text-gray-6 00">Total Searches</p>"" <p className="text-xs text-gray-5 00 mt-1">"" In selected period; </p> </div> <div className="text-center">"" <div className="text-3 xl font-bold text-purple-6 00 mb-2">"" { analytics.engagement.savedJobs } </div> <p className="text-sm text-gray-6 00">Jobs Saved</p>"" <p className="text-xs text-gray-5 00 mt-1">"" For later review; </p> </div> </div> </CardContent> </Card> </TabsContent> <TabsContent value="applications" className="space-y-6">"" { /* Application Status Breakdown * } / } <Card> <CardHeader> <CardTitle className="flex items-center gap-2">"" <PieChart className="h-5 w-5" />"" Application Status Breakdown; </CardTitle> <CardDescription> Track the status of your job applications; </CardDescription> </CardHeader> <CardContent> <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">"" { Object.entries(analytics.applications.statusBreakdown().map(([ status, coun ]t]) => } ( } <div key= { status } className="text-center">"" <div className="text-2 xl font-bold mb-1"> { count } </div>"") <Badge className= { getStatusColor(status } ) } > { status.charAt(0().toUpperCase() + status.slice(1 } ) } </Badge> </div> </div> </CardContent> </Card> { /* Recent Applications * } / } <Card> <CardHeader> <CardTitle>Recent Applications</CardTitle> <CardDescription> Your latest job applications and their status; </CardDescription> </CardHeader> <CardContent> <div className="space-y-4">"" { analytics.applications.recentApplications.length === 0 ? ( <div className="text-center py-8">"" <FileText className="h-1 2 w-1 2 text-gray-4 00 mx-auto mb-4" />"" <p className="text-gray-6 00">No recent applications</p>"" </div>) ) : () analytics.applications.recentApplications.map((application: any() => } ( } <div key= { application.id } className="flex items-center justify-between p-4 border rounded-lg">"" <div className="flex items-center gap-3">"") { getStatusIcon(application.status } ) } <div> <h4 className="font-medium"> { application.job.title } </h4>"" <div className="flex items-center gap-2 text-sm text-gray-6 00">"" <Building className="h-3 w-3" />"" { application.job.company } <MapPin className="h-3 w-3 ml-2" />"" { application.job.location } </div> </div> </div> <div className="text-right">"" <Badge className= { getStatusColor(application.status } ) } > { application.status } </Badge> <p className="text-xs text-gray-5 00 mt-1">"" { formatDate(application.createdAt } ) } </p> </div> </div> </div> </CardContent> </Card> </TabsContent> <TabsContent value="search" className="space-y-6">"" { /* Search Activity * } / } <Card> <CardHeader> <CardTitle className="flex items-center gap-2">"" <Search className="h-5 w-5" />"" Search Activity; </CardTitle> <CardDescription> Your job search patterns and recent queries; </CardDescription> </CardHeader> <CardContent> <div className="mb-6">"" <div className="text-3 xl font-bold text-blue-6 00 mb-2">"" { analytics.searchActivity.totalSearches } </div> <p className="text-gray-6 00">Total searches in selected period</p>"" </div> <div className="space-y-3">"" <h4 className="font-medium">Recent Searches</h4>"" { analytics.searchActivity.recentSearches.length === 0 ? ( <p className="text-gray-6 00">No recent searches</p>"") ) : () analytics.searchActivity.recentSearches.map((search, index() => } ( } <div key= { index } className="flex items-center justify-between p-3 bg-gray-5 0 rounded-lg">"" <span className="font-medium">" { search.query } "</span>"" <span className="text-sm text-gray-5 00">"") { formatDate(search.createdAt } ) } </span> </div> </div> </CardContent> </Card> </TabsContent> <TabsContent value="engagement" className="space-y-6">"" { /* Engagement Metrics * } / } <Card> <CardHeader> <CardTitle className="flex items-center gap-2">"" <Activity className="h-5 w-5" />"" Platform Engagement; </CardTitle> <CardDescription> How actively you're using the platform features; ' </CardDescription> </CardHeader> <CardContent> <div className="grid grid-cols-1 md:grid-cols-3 gap-6">"" <div className="text-center p-4 bg-blue-5 0 rounded-lg">"" <MessageSquare className="h-8 w-8 text-blue-6 00 mx-auto mb-2" />"" <div className="text-2 xl font-bold text-blue-6 00 mb-1">"" { analytics.engagement.chatSessions } </div> <p className="text-sm text-gray-6 00">JobsGPT Sessions</p>"" </div> <div className="text-center p-4 bg-green-5 0 rounded-lg">"" <Bookmark className="h-8 w-8 text-green-6 00 mx-auto mb-2" />"" <div className="text-2 xl font-bold text-green-6 00 mb-1">"" { analytics.engagement.savedJobs } </div> <p className="text-sm text-gray-6 00">Jobs Saved</p>"" </div> <div className="text-center p-4 bg-purple-5 0 rounded-lg">"" <Target className="h-8 w-8 text-purple-6 00 mx-auto mb-2" />"" <div className="text-2 xl font-bold text-purple-6 00 mb-1">"" { analytics.engagement.applicationRate.toFixed(1 } ) } % </div> <p className="text-sm text-gray-6 00">Application Rate</p>"" </div> </div> </CardContent> </Card> </TabsContent> </Tabs> </div> ))))))))))))))))))) */