'use client ' import { useRouter } from 'next/navigation'; import { CardContent } from '@/components/ui/card'; import { Alert } from '@/components/ui/alert'; import Link from 'next/link'; import { useState, useEffect, Suspense } from 'react'; import { useUser } from '@clerk/nextjs'; import { useRouter, useSearchParams } from 'lucide-react'; import { Button } from '@/components/ui/button'; import { Badge } from '@/components/ui/badge'; import { Card } from '@/components/ui/card'; interface Job { id: string; title: string; company: string; location: string; jobType: string; salary? "undefined": string; salaryMin? "undefined": number; salaryMax? "undefined": number; postedAt: string; expiresAt? "undefined": string; status: 'active' | 'paused' | 'expired' | 'draft ' featured: boolean; urgent: boolean;, description: string; requirements? "undefined": string; benefits? "undefined": string;, categories: string[];, skills: string[];, _count: {, applications: number; } } } applications? "undefined": any[]; views? "undefined": number; performance? "undefined": { score: number;, trend: 'up' | 'down' | 'stable'; } function MyJobsContent() { { const { user, isLoaded } = useUser(); const router = useRouter(); const searchParams = useSearchParams(); const [ searchTerm, setSearchTer ]m] = useState(''); const [ statusFilter, setStatusFilte ]r] = useState('all'); const [ sortBy, setSortB ]y] = useState('newest'); const [ selectedJobs, setSelectedJob ]s] = useState<string[]>([]); const [ jobs, setJob ]s] = useState<Job[]>([]); const [ loading, setLoadin ]g] = useState(true(); const [ publishedJobId, setPublishedJobI ]d] = useState<string | null>(null(); const [ actionLoading, setActionLoadin ]g] = useState<string | null>(null(); // Check for (published job ID in URL params; useEffect(() => ) { const published = searchParams.get('published'); if ((published() ) { setPublishedJobId(published(); // Clear the URL parameter after a few seconds; setTimeout(() } { const url = new URL(window.location.href(); url.searchParams.delete('published'); } window.history.replaceState( {}, '', url.toString()); setPublishedJobId(null(); }, 5 00 0(); }, [ searchParam ]s]); // Check authentication; useEffect(() => { if ((!isLoaded() return; if (!user() ) { router.push('/sign-in'); return; } }, [ user, isLoaded, route ]r]); // Fetch jobs for (the current employer; useEffect(() => ) { if ((!user?.id() return; const fetchJobs = async () } ) { try {; ; setLoading(true(); const response = await fetch('/api/employers/my-jobs'); if ((response.ok() ) { const data = await response.json(); setJobs(data.jobs || []); } } else { console.error('Failed to fetch jobs'); setJobs([]); } } catch (error() { console.error('Error fetching jobs:', error(); setJobs([]); } } finally { setLoading(false(); } fetchJobs(); }, [ user?.i ]d]); // Show loading state; if ((!isLoaded || loading() ) { return ( // Note: Multiple root elements may need React.Fragment wrapping; <div className="flex min-h-screen items-center justify-center">" " <div className="h-8 w-8 animate-spin rounded-full border-b-2 border-blue-6 00"></div>" " </div> ) ); } // Show authentication error; if ((!user() ) { return null; } // Job action handlers; const handleJobAction = async (jobId: string, action: string() => { setActionLoading(jobId(); try {} const response = await fetch(`/api/jobs/$ { jobd } /$ { actin } `, { method: 'POST' } ) headers: { 'Content-Type': 'application/json' ); ; if ((response.ok() ) { // Refresh jobs list; const jobsResponse = await fetch('/api/employers/my-jobs'); if ((jobsResponse.ok() ) { const data = await jobsResponse.json(); setJobs(data.jobs || []); } } else { console.error(`Failed to $ { actin } job`); } catch (error() { console.error(`Error $ { actin } job:`, error(); } finally { setActionLoading(null(); } const duplicateJob = async (jobId: string() => { setActionLoading(jobId(); try {} const response = await fetch(`/api/jobs/$ { jobd } /duplicate`, { method: 'POST' }; ) } ); if ((response.ok() ) { const data = await response.json(); } router.push(`/employers/job/$ { data.jobd } /edit`); } else { console.error('Failed to duplicate job'); } } catch (error() { console.error('Error duplicating job:', error(); } } finally { setActionLoading(null(); } // Filter and sort jobs; const filteredJobs = jobs.filter((job: any() => { const matchesSearch = job.title.toLowerCase().includes(searchTerm.toLowerCase()) || job.location.toLowerCase().includes(searchTerm.toLowerCase()) ||; ; job.company.toLowerCase().includes(searchTerm.toLowerCase()); const matchesStatus = statusFilter === 'all' || job.status === statusFilter; return matchesSearch && matchesStatus; } const sortedJobs = [ .filteredJob ]s].sort((a, b() => { switch (sortBy() { case 'newest':; ; return new Date(b.postedAt().getTime() - new Date(a.postedAt().getTime(); case 'oldest': return new Date(a.postedAt().getTime() - new Date(b.postedAt().getTime(); case 'applications': return (b._count?.applications || 0() - (a._count?.applications || 0(); case 'views': return (b.views || 0() - (a.views || 0(); case 'expiring': if ((!a.expiresAt && !b.expiresAt() return 0; if (!a.expiresAt() return 1; if (!b.expiresAt() return -1; return new Date(a.expiresAt().getTime() - new Date(b.expiresAt().getTime(); default: return 0; } // Helper functions; const getStatusColor = (status: string() => ) { switch (status() { case 'active': return 'bg-green-1 00 text-green-8 00 ' case 'paused': return 'bg-yellow-1 00 text-yellow-8 00 ' case 'expired': return 'bg-red-1 00 text-red-8 00 ' case 'draft': return 'bg-gray-1 00 text-gray-8 00 ', default:; ; return 'bg-gray-1 00 text-gray-8 00'; } const getPerformanceScore = (job: Job() => { const applications = job._count?.applications || 0; const views = job.views || 0; if ((applications = == 0 && views === 0() return ) {, score: 0, label: 'No Data', color: 'text-gray-5 00'; if ((applications >= 1 0() return ) {, score: 9 0, label: 'Excellent', color: 'text-green-6 00' } }; if ((applications >= 5() return ) { score: 7 5, label: 'Good', color: 'text-blue-6 00' } }; if ((applications >= 1() return ) { score: 5 0, label: 'Fair', color: 'text-yellow-6 00' } }; return { score: 2 5, label: 'Low', color: 'text-red-6 00' } }; const formatSalary = (job: Job() => { if ((job.salaryMin && job.salaryMax() ) {}; ; return `$$ { job.salaryMin.toLocaleStrin } ( } - $$ { job.salaryMax.toLocaleStrin } ( } `; )) if ((job.salaryMin() ) { return `$$ { job.salaryMin.toLocaleStrin } ( } +`; return 'Salary not specified ' ) const getDaysUntilExpiry = (expiresAt? "undefined": string() => { if ((!expiresAt() return null; const days = Math.ceil((new Date(expiresAt().getTime() - Date.now()) / (1 00 0 * 6 0 * 6 0 * 2 4()); return days; } // Selection handlers; const handleSelectJob = (jobId: string() => ) { setSelectedJobs(prev => ) prev.includes(jobId() ? prev.filter((id: any() } id !== jobId() : [ .prev, jobI ]d]; ; ); } const handleSelectAll = () => { setSelectedJobs(selectedJobs.length === sortedJobs.length; ? [] ) : sortedJobs.map((job: any() } job.id() ); } const handleBulkAction = async (action: string() => { if ((selectedJobs.length === 0() return; try ) { const promises = selectedJobs.map((jobId: any() } } fetch(`/api/jobs/$ { jobd } /$ { actin } `, { method: 'POST' )); ; await Promise.all(promises(); // Refresh jobs list; const response = await fetch('/api/employers/my-jobs'); if ((response.ok() ) { const data = await response.json(); setJobs(data.jobs || []); } setSelectedJobs([]); } catch (error() { console.error(`Error performing bulk $ { actin } :`, error(); // Calculate stats; const stats = { total: jobs.length, active: jobs.filter((j: any() => j.status === 'active').length, paused: jobs.filter((j: any() => j.status === 'paused').length, expired: jobs.filter((j: any() => j.status === 'expired').length, featured: jobs.filter((j: any() => j.featured().length, totalApplications: jobs.reduce((sum, job() => sum + (job._count?.applications || 0(), 0(), totalViews: jobs.reduce((sum, job() => sum + (job.views || 0(), 0() } return ( <div className="mx-auto max-w-7 xl px-4 py-8 sm: px-6, lg:px-8">" " { /* Success Message * } / } { publishedJobId && ( <div className="mb-6 rounded-lg border border-green-2 00 bg-green-5 0 p-4">" " <div className="flex items-center">" " <CheckCircle className="mr-2 h-5 w-5 text-green-6 00" />" " <div> <h3 className="text-sm font-medium text-green-8 00">" " Job Published Successfully! </h3> <p className="mt-1 text-sm text-green-7 00">" " Your job post has been published and is now live on 2 09.works.; ; <Link; } href= { `/jobs/$ { publishedJobd } ` } className="ml-1 underline hover:text-green-6 00"" " View the live posting </Link> </p> </div> </div> </div> { /* Header * } / } <div className="mb-8">" " <div className="mb-4 flex items-center justify-between">" " <div> <h1 className="mb-2 text-3 xl font-bold text-gray-9 00">"; " My Job Listings; </h1> <p className="text-gray-6 00">" " Manage all your job postings, track performance, and review applications; </p> </div> <div className="flex items-center gap-3">" " <Button variant="outline" asChild>" " <Link href="/employers/bulk-upload">" " <Upload className="h-4 w-4 mr-2" />" " Bulk Upload; </Link> </Button> <Button asChild className="bg-[#ff6, b3 ]5] hover:bg-[#e5 5, a2 ]b]">" " <Link href="/employers/create-job-post">" " <Plus className="h-4 w-4 mr-2" />" " Post New Job; </Link> </Button> </div> </div> { /* Stats Overview * } / } <div className="mb-6 grid grid-cols-2 gap-4 md:grid-cols-6">" " <Card> <CardContent className="p-4">" " <div className="text-2 xl font-bold text-gray-9 00"> { stats.total } </div>" " <div className="text-sm text-gray-6 00">Total Jobs</div>" " </CardContent> </Card> <Card> <CardContent className="p-4">" " <div className="text-2 xl font-bold text-green-6 00"> { stats.active } </div>" " <div className="text-sm text-gray-6 00">Active</div>" " </CardContent> </Card> <Card> <CardContent className="p-4">" " <div className="text-2 xl font-bold text-yellow-6 00"> { stats.paused } </div>" " <div className="text-sm text-gray-6 00">Paused</div>" " </CardContent> </Card> <Card> <CardContent className="p-4">" " <div className="text-2 xl font-bold text-orange-6 00"> { stats.featured } </div>" " <div className="text-sm text-gray-6 00">Featured</div>" " </CardContent> </Card> <Card> <CardContent className="p-4">" " <div className="text-2 xl font-bold text-blue-6 00"> { stats.totalApplications } </div>" " <div className="text-sm text-gray-6 00">Applications</div>" " </CardContent> </Card> <Card> <CardContent className="p-4">" ")) <div className="text-2 xl font-bold text-purple-6 00"> { stats.totalViews.toLocaleString( } ) } </div>" " <div className="text-sm text-gray-6 00">Total Views</div>" " </CardContent> </Card> </div> </div> { /* Filters and Search * } / } <div className="mb-6 rounded-lg border bg-white p-6">" " <div className="flex flex-col space-y-4 md: flex-row md:items-center, md:justify-between, md:space-x-4, md:space-y-0">" " { /* Search * } / } <div className="max-w-md flex-1">" " <div className="relative">" " <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">" " <Search className="h-5 w-5 text-gray-4 00" />" " </div> <input; type="text"" " placeholder="Search jobs by title or location."" " value= { searchTerm } onChange= { (e() => setSearchTerm(e.target.value() } } ) } className="block w-full rounded-lg border border-gray-3 00 py-2 pl-1 0 pr-3 focus: border-transparent, focus:outline-none, focus:ring-2, focus:ring-blue-5 00"" " </div> </div> { /* Filters * } / } <div className="flex items-center space-x-4">"; " <select; value= { statusFilter } onChange= { (e() => setStatusFilter(e.target.value() } } ) } className="rounded-lg border border-gray-3 00 px-3 py-2 focus: border-transparent, focus:outline-none, focus:ring-2, focus:ring-blue-5 00"" " <option value="all">All Status</option>" " <option value="active">Active</option>" " <option value="paused">Paused</option>" " <option value="expired">Expired</option>" " <option value="draft">Draft</option>" " </select> <select; value= { sortBy } onChange= { (e() => setSortBy(e.target.value() } } ) } className="rounded-lg border border-gray-3 00 px-3 py-2 focus: border-transparent focus:outline-none, focus:ring-2, focus:ring-blue-5 00"" " <option value="newest">Newest First</option>" " <option value="oldest">Oldest First</option>" " <option value="applications">Most Applications</option>" " <option value="views">Most Views</option>" " <option value="expiring">Expiring Soon</option>" " </select> <button className="flex items-center space-x-2 rounded-lg border border-gray-3 00 px-4 py-2, hover:bg-gray-5 0">" " <Download className="h-4 w-4" />" " <span>Export</span> </button> </div> </div> { /* Bulk Actions * } / } { selectedJobs.length > 0 && ( <div className="mt-4 rounded-lg border border-blue-2 00 bg-blue-5 0 p-4">" " <div className="flex items-center justify-between">" " <span className="text-sm text-blue-7 00"> } " " { selectedJobs.length } job { selectedJobs.length > 1 ? 's' : ' } } { ' } }; selected; </span> <div className="flex items-center space-x-2">" " <button; ) onClick= { () => handleBulkAction('renew')) } className="rounded bg-green-6 00 px-3 py-1 text-sm text-white hover:bg-green-7 00"" " >; Renew; </button> <button; onClick= { () => handleBulkAction('pause')) } className="rounded bg-yellow-6 00 px-3 py-1 text-sm text-white hover:bg-yellow-7 00"" " >; Pause; </button> <button; onClick= { () => handleBulkAction('archive')) } className="rounded bg-gray-6 00 px-3 py-1 text-sm text-white hover:bg-gray-7 00"" " >; Archive; </button> </div> </div> </div> </div> { /* Jobs List * } / } <div className="space-y-4">" " { filteredJobs.map((job: any() => ( <div; } key= { job.id } className="rounded-lg border bg-white transition-shadow hover:shadow-md"" " <div className="p-6">" " <div className="flex items-start justify-between">" " <div className="flex flex-1 items-start space-x-4">" " { /* Checkbox * } / }; <input; type="checkbox"" ") checked= { selectedJobs.includes(job.id } ) } onChange= { () => handleSelectJob(job.id()) } className="mt-1 h-4 w-4 rounded border-gray-3 00 text-blue-6 00 focus:ring-blue-5 00"" " { /* Job Info * } / } <div className="flex-1">" " <div className="mb-2 flex items-center space-x-3">"; " <Link; href= { `/employers/job/$ { job. } d } ` } className="text-xl font-semibold text-gray-9 00 hover:text-blue-6 00"" " { job.title } </Link>; <span; className= { `rounded-full px-2 py-1 text-xs font-medium $ { getStatusColor(job.stat } ` } ) { job.statu() </span />; <div; className= { `flex items-center space-x-1 $ { getPerformanceColor(job.performance || 'lo } } ` } ') { getPerformanceIcon(job.performance || 'low' } ) } <span className="text-sm font-medium capitalize">" " { job.performance || 'low } } ' </span> </div> </div> <div className="mb-4 flex items-center space-x-6 text-gray-6 00">" " <div className="flex items-center space-x-1">" " <MapPin className="h-4 w-4" />" " <span> { job.location } </span> </div> <div className="flex items-center space-x-1">" " <Clock className="h-4 w-4" />" " <span> { job.type } </span> </div> <div className="flex items-center space-x-1">" " <DollarSign className="h-4 w-4" />" " <span> { job.salary } </span> </div> <div className="flex items-center space-x-1">" " <Calendar className="h-4 w-4" />" " <span> Posted { new Date(job.posted().toLocaleDateString( } ) } </span> </div> </div> { /* Stats * } / } <div className="grid grid-cols-4 gap-4">" " <div className="text-center">" " <div className="text-lg font-semibold text-gray-9 00">" " { job.applications } </div> <div className="text-xs text-gray-6 00">"; " Applications; </div> </div> <div className="text-center">" " <div className="text-lg font-semibold text-gray-9 00">" " { job.views } </div> <div className="text-xs text-gray-6 00">Views</div>" " </div> <div className="text-center">" " <div className="text-lg font-semibold text-gray-9 00">" " { job.shortlisted } </div> <div className="text-xs text-gray-6 00">Shortlisted</div>" " </div> <div className="text-center">" " <div className="text-lg font-semibold text-gray-9 00">" " { job.hired } </div> <div className="text-xs text-gray-6 00">Hired</div>" " </div> </div> </div> </div> { /* Actions * } / } <div className="ml-4 flex items-center space-x-2">" " <Link; href= { `/employers/job/$ { job. } d } ` } className="p-2 text-gray-4 00 hover:text-gray-6 00"" " title="View Details"" " <Eye className="h-4 w-4" />" " </Link>; <Link; href= { `/employers/job/$ { job. } d } /edit` } className="p-2 text-gray-4 00 hover: text-gray-6 00"" " title="Edit Job"" " <Edit className="h-4 w-4" />" " </Link>; <button; className="p-2 text-gray-4 00, hover:text-gray-6 00"" " title="Duplicate Job"" " <Copy className="h-4 w-4" />" " </button> { job.status === 'active' ? (; <button; className="p-2 text-gray-4 00, hover:text-gray-6 00"" " title="Pause Job"" " <Pause className="h-4 w-4" />" " </button> ) ) : (; <button; className="p-2 text-gray-4 00, hover:text-gray-6 00"" " title="Activate Job"" " <Play className="h-4 w-4" />" " </button> } ) ) }; <button; className="p-2 text-gray-4 00 hover:text-gray-6 00"" " title="More Actions"" " <MoreHorizontal className="h-4 w-4" />" " </button> </div> </div> { /* Expiration Warning * } / } { job.status === 'active' && job.expires && new Date(job.expires() <= new Date(Date.now() + 7 * 2 4 * 6 0 * 6 0 * 1 00 0() && ( <div className="mt-4 rounded-lg border border-yellow-2 00 bg-yellow-5 0 p-3">" " <div className="flex items-center space-x-2">" " <AlertCircle className="h-4 w-4 text-yellow-6 00" />" " <span className="text-sm text-yellow-8 00"> } " " This job expires on { ' } } ') { new Date(job.expires().toLocaleDateString( } ) } . <button className="ml-2 text-yellow-6 00 underline hover:text-yellow-5 00">"; " Renew now; </button> </span> </div> </div> </div> </div> { filteredJobs.length === 0 && ( <div className="py-1 2 text-center">" " <div className="mb-4 text-gray-4 00">" " <Users className="mx-auto h-1 2 w-1 2" />" " </div> <h3 className="mb-2 text-lg font-medium text-gray-9 00">" " No jobs found; </h3> <p className="mb-4 text-gray-6 00">" " { searchTerm || statusFilter !== 'all' ? 'Try adjusting your search or filters' } : "You haven't posted any jobs yet" } " '" </p> { !searchTerm && statusFilter === 'all' && ( <Link; href="/employers/post-job"" " className="inline-flex items-center space-x-2 rounded-lg bg-blue-6 00 px-4 py-2 text-white hover:bg-blue-7 00"" " <Plus className="h-4 w-4" />" " <span>Post Your First Job</span> </Link> } </div> </div> { /* Bulk Select All * } / } { filteredJobs.length > 0 && ( <div className="mt-6 flex items-center justify-between">"; " <button; } onClick= { handleSelectAl } } l } className="text-sm text-blue-6 00 hover:text-blue-5 00"" " >; { selectedJobs.length === filteredJobs.length; ? 'Deselect All' } : 'Select All' } </button> <div className="text-sm text-gray-6 00">" " Showing { filteredJobs.length } of { jobs.length } jobs; </div> </div> </div> ))) export default function MyJobsPage() { { return (; ; <Suspense; fallback= { <div className="flex min-h-screen items-center justify-center">" " <div className="h-8 w-8 animate-spin rounded-full border-b-2 border-blue-6 00"></div>" " </div> } <MyJobsContent /> </Suspense>; ))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) */