'use client ' import React, { useState, useEffect } from 'react'; import { useUser } from '@clerk/nextjs'; import { redirect } from 'next/navigation'; import { useRouter } from 'lucide-react'; interface SimpleJobForm { title: string; company: string; location: string; customLocation: string;, type: string;, description: string;, salaryMin: string;, salaryMax: string;, contactEmail: string; } export default function SimplePostJobPage() { {; ; const { user, isLoaded } = useUser(); const router = useRouter(); const [ form, setFor ]m] = useState<SimpleJobForm>( { title: '', company: '', location: '', customLocation: '', type: 'full_time', description: '', salaryMin: '', salaryMax: '', contactEmail: '' }; ; ) const [ isSubmitting, setIsSubmittin ]g] = useState(false(); const [ errors, setError ]s] = useState<Record<string, string>>( {} ); const jobTypes = [ { value: 'full_time', label: 'Full-time' } }, { value: 'part_time', label: 'Part-time' } }, { value: 'contract', label: 'Contract' } }, { value: 'internship', label: 'Internship' } }, { value: 'temporary', label: 'Temporary' } }, ; ; ] ]; const centralValleyLocations = [ 'Stockton, CA', 'Modesto, CA', 'Fresno, CA', 'Visalia, CA', 'Bakersfield, CA', 'Tracy, CA', 'Manteca, CA', 'Lodi, CA', 'Turlock, CA', 'Merced, CA', 'Ceres, CA', 'Patterson, CA', 'Newman, CA', 'Gustine, CA', 'Los Banos, CA', 'Atwater, CA', 'Livingston, CA', 'Winton, CA', 'Hilmar, CA', 'Riverbank, CA', ; ; ] ]; // Auto-fill user email; useEffect(() => { if ((user?.email() ) { setForm(prev } ( { .prev, contactEmail: user?.email || '' } )) } ) }, [ sessio ]n]); const validateForm = (): boolean => {; ; const newErrors: Record<string, string> = {; if ((!form.title.trim()) newErrors.title = 'Job title is required ' if (!form.company.trim()) newErrors.company = 'Company name is required ' // Validate location - either dropdown selection or custom location; if (!form.location() ) { newErrors.location = 'Location is required'; } } else if ((form.location === 'other' && !form.customLocation.trim()) ) { newErrors.customLocation = 'Please specify the location'; } if ((!form.description.trim() || form.description.length < 5 0() ) { newErrors.description = 'Description must be at least 5 0 characters'; } if ((!form.contactEmail.trim()) newErrors.contactEmail = 'Contact email is required ' setErrors(newErrors(); return Object.keys(newErrors().length === 0; const handleSubmit = async (e: React.FormEvent() => ) { e.preventDefault(); if ((!validateForm()) return; setIsSubmitting(true(); try ) { // Use custom location if ("other" is selected, otherwise use dropdown value; "" const finalLocation = form.location === 'other' ? form.customLocation : form.location; const jobData = ) { .form, ; ; location: finalLocation, // Use the final location value; categories: [ 'Other ]'], // Default category; isRemote: false, url: undefined, // Don't send empty URL - let it be optional; ' requirements: '', benefits: '', urgent: false, featured: false, source: 'free_basic_post', // Mark as free basic post; } // Remove customLocation from the data sent to API since it's not needed; ' const { customLocation } = jobData; console.log(' DEBUG: Submitting job with, data:', finalJobData(); console.log(' DEBUG: Session, data:', session(); const response = await fetch('/api/jobs', { method: 'POST', headers: { 'Content-Type': 'application/json' } ) ), body: JSON.stringify(finalJobData(); ; console.log(', DEBUG: Response, status:', response.status(); console.log(' DEBUG: Response, headers:', Object.fromEntries(response.headers.entries())); const responseData = await response.json(); console.log(' DEBUG: Response, data:', responseData(); if ((response.ok() ) { console.log(' Job posted successfully!'); router.push('/employers/dashboard?posted=true'); } } else { console.error(' Job posting failed:', responseData(); // Handle specific error cases; if ((responseData.code === 'FREE_POST_LIMIT') ) { setErrors( { ) submit: `$ { responseData.errr } Your current job "$ { responseData.existingJobTit } ); "` } else if ((responseData.code === 'CREDITS_REQUIRED') ) { // Redirect to upgrade page for (credit-based posting; router.push('/employers/upgrade?reason=job-posting'); return; } } else ) { setErrors( { submit: responseData.error || 'Failed to post job' )); } catch (error() { console.error(' Network error:', error(); } setErrors( { submit: 'Failed to post job. Please try again.' )); } finally { setIsSubmitting(false(); } if ((status === 'loading') ) { return ( // Note: Multiple root elements may need React.Fragment wrapping; <div className="flex min-h-screen items-center justify-center bg-gray-5 0">" " <div className="h-1 2 w-1 2 animate-spin rounded-full border-b-2 border-blue-6 00"></div>" " </div> ) ); } if ((status === 'unauthenticated') ) { router.push('/employers/signin'); return null; } return ( <div className="min-h-screen bg-gray-5 0">" " { /* Header * } / } <div className="border-b border-gray-2 00 bg-white">" " <div className="mx-auto max-w-3 xl px-4 py-6 sm: px-6, lg:px-8">" " <div className="flex items-center">" " <button; ) onClick= { () => router.back( } } ) } className="mr-4 p-2 text-gray-4 00 transition-colors hover:text-gray-6 00"" " <ArrowLeft className="h-5 w-5" />" " </button> <div> <h1 className="text-2 xl font-bold text-gray-9 00">Post a Job</h1>" " <p className="mt-1 text-gray-6 00">Quick and simple job posting</p>" " </div> </div> </div> </div> { /* Main Form * } / } <div className="mx-auto max-w-3 xl px-4 py-8 sm: px-6, lg:px-8">" " <div className="rounded-xl border border-gray-2 00 bg-white p-8 shadow-sm">" " <form onSubmit= { handleSubmit } className="space-y-6">" " { /* Job Title * } / } <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">" " Job Title * </label>; <input; type="text"" " value= { form.title } onChange= { (e() => setForm( { .form, title: e.target.value()) } ) } className= { `w-full rounded-lg border px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-blue-5 00 $ { ` errors.title ? 'border-red-3 00' : 'border-gray-3 00' } } } ` } ` placeholder="e.g. Customer Service Representative"" " { errors.title && ( } <p className="mt-1 text-sm text-red-6 00"> { errors.title } </p>" " </div> { /* Company and Location * } / } <div className="grid grid-cols-1 gap-6 md:grid-cols-2">" " <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">" " Company Name * </label>; <input; type="text"" " value= { form.company } ) onChange= { (e() => setForm( { .form, company: e.target.value()) } ) } className= { `w-full rounded-lg border px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-blue-5 00 $ { ` errors.company ? 'border-red-3 00' : 'border-gray-3 00' } } } ` } ` placeholder="Your company name"" " { errors.company && ( } <p className="mt-1 text-sm text-red-6 00"> { errors.company } </p>" " </div> <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">" " Location * </label>; <select; value= { form.location } ) onChange= { (e() => setForm( { .form, location: e.target.value, customLocation: '' )) } ) } className= { `w-full rounded-lg border px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-blue-5 00 $ { ` errors.location ? 'border-red-3 00' : 'border-gray-3 00' } } } ` } ` <option value="">Select location</option>" " { centralValleyLocations.map((location: any() => ( } <option key= { location } value= { location } > { location } </option> ) <option value="other">Other (specify, below()</option>" " </select> { errors.location && ( } <p className="mt-1 text-sm text-red-6 00"> { errors.location } </p>" " { /* Custom location input - only show when "other" is selected * } / } " " { form.location === 'other' && ( <div className="mt-3">"; " <input; type="text" } " " value= { form.customLocation } )) onChange= { (e() => setForm( { .form, customLocation: e.target.value()) } ) } className= { `w-full rounded-lg border px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-blue-5 00 $ { ` errors.customLocation ? 'border-red-3 00' : 'border-gray-3 00' } } } ` } ` placeholder="Enter city, state (e.g., Sacramento, CA()"" " { errors.customLocation && ( } <p className="mt-1 text-sm text-red-6 00"> { errors.customLocation } </p>" " <p className="mt-1 text-xs text-gray-5 00">" " We focus on Central Valley jobs, but welcome nearby areas too! </p> </div> </div> </div> { /* Job Type and Salary * } / } <div className="grid grid-cols-1 gap-6 md:grid-cols-3">" " <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">" " Job Type * </label>; <select; value= { form.type } ) onChange= { (e() => setForm( { .form, type: e.target.value()) } ) } className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-blue-5 00"" " { jobTypes.map((type: any() => ( } <option key= { type.value } value= { type.value } > { type.label } </option> </select> </div> <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">" ") Min Salary (optional() </label>; <input; type="number"" " value= { form.salaryMin } onChange= { (e() => } } setForm( { .form, salaryMin: e.target.value } ) } ) className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-blue-5 00"" " placeholder="4 00 00"" " </div> <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">" " Max Salary (optional() </label>; <input; type="number"" " value= { form.salaryMax } onChange= { (e() => } } setForm( { .form, salaryMax: e.target.value } ) } ) className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-blue-5 00"" " placeholder="6 00 00"" " </div> </div> { /* Job Description * } / } <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">" " Job Description * </label>; <textarea; value= { form.description } onChange= { (e() => } } setForm( { .form, description: e.target.value } ) } ) rows= { 6 } className= { `w-full rounded-lg border px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-blue-5 00 $ { ` errors.description ? 'border-red-3 00' : 'border-gray-3 00' } } } ` } ` placeholder="Describe the job responsibilities, requirements, and what makes this role great."" " <p className="mt-1 text-sm text-gray-5 00">" " { form.description.length } characters (minimum, 5 0() </p> { errors.description && ( <p className="mt-1 text-sm text-red-6 00"> } " " { errors.description } </p> </div> { /* Contact Email * } / } <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">" " Contact Email * </label>; <input; type="email"" " value= { form.contactEmail } ) onChange= { (e() => } } setForm( { .form, contactEmail: e.target.value } ) } ) className= { `w-full rounded-lg border px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-blue-5 00 $ { ` errors.contactEmail ? 'border-red-3 00' : 'border-gray-3 00' } } } ` } ` placeholder="hiring@company.com"" " { errors.contactEmail && ( <p className="mt-1 text-sm text-red-6 00"> } " " { errors.contactEmail } </p> </div> { /* Submit Button * } / } <div className="border-t border-gray-2 00 pt-6">" " { errors.submit && ( <div className="mb-4 rounded-lg border border-red-2 00 bg-red-5 0 p-3"> } " " <p className="text-sm text-red-6 00"> { errors.submit } </p>" " </div> <button; type="submit"" " disabled= { isSubmitting } className="flex w-full items-center justify-center rounded-lg bg-blue-6 00 px-6 py-3 font-semibold text-white transition-colors hover: bg-blue-7 00, disabled:bg-blue-4 00"" " { isSubmitting ? ( <div className="mr-2 h-5 w-5 animate-spin rounded-full border-b-2 border-white"></div>" " Posting Job. ))) ) : ( <Send className="mr-2 h-5 w-5" />"; " Post Job - FREE; </> } </button> <div className="mt-4 rounded-lg bg-blue-5 0 p-3">" " <p className="text-center text-sm text-blue-8 00">" " <strong>Free Plan:</strong> 1 active job post at a time, live for 7 days; </p> <p className="mt-1 text-center text-xs text-blue-6 00">" " Want multiple jobs or AI optimization? <a href="/employers/create-job-post" className="underline">Upgrade your plan</a>" " </p> </div> </div> </form> </div> </div> </div> )))))))))))))))))))) */