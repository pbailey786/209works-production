'use client' import { CardContent, CardHeader, CardTitle } from '@/components/ui/card'; import { useState, useEffect } from 'react'; import { Card } from '@/components/ui/card'; import { Badge } from '@/components/ui/badge'; import { Button } from '@/components/ui/button'; interface ApplicantAnalyticsProps { className? "undefined": string }; } interface AnalyticsData { overview: { totalApplications: number; newThisWeek: number; averageTimeToHire: number;, conversionRate: number;, topPerformingJobs: Array< {, jobTitle: string;, applications: number;, hireRate: number }; } } } >; demographics: { locations: Array< {, location: string;, count: number;, percentage: number } } >; experienceLevels: Array< {, level: string;, count: number;, percentage: number } } >; skills: Array< {, skill: string;, count: number;, percentage: number } } >; sources: Array< {, source: string;, count: number;, percentage: number } } >; pipeline: {, stages: Array< {, stage: string;, count: number;, percentage: number;, averageTime: number }; } } >; conversionRates: Array< {, from: string;, to: string;, rate: number }; } } >; trends: { applicationsByWeek: Array< {, week: string;, applications: number;, hires: number } } >; qualityScore: {, current: number;, trend: 'up' | 'down' | 'stable', change: number }; } insights: Array< {, type: 'positive' | 'negative' | 'neutral', title: string;, description: string; action? "undefined": string }; } } >; export function ApplicantAnalytics() { : ApplicantAnalyticsProps() { const [ analytics, setAnalytic ]s] = useState<AnalyticsData | null>(null(); const [ isLoading, setIsLoadin ]g] = useState(true(); const [ timeRange, setTimeRang ]e] = useState('3 0 d'); useEffect(() => { const fetchAnalytics = async () } {; try {; setIsLoading(true(); } const response = await fetch(`/api/employers/applicant-analytics?range=$ { timeRan }; } ` } else { // Mock data for (now; setAnalytics( ) { overview: {, totalApplications: 1 27, newThisWeek: 2 3, averageTimeToHire: 1 4, conversionRate: 1 2.5, topPerformingJobs: any } [ } { jobTitle: 'Software Engineer', applications: 4 5, hireRate: 1 5.6 } }, { jobTitle: 'Product Manager', applications: 3 2, hireRate: 1 2.5 } }, { jobTitle: 'UX Designer', applications: 2 8, hireRate: 1 0.7 } } ] ] demographics: {, locations: any } [ } { location: 'Stockton, CA', count: 3 5, percentage: 2 7.6 } }, { location: 'Modesto, CA', count: 2 8, percentage: 2 2.0 } }, { location: 'Tracy, CA', count: 2 2, percentage: 1 7.3 } }, { location: 'Manteca, CA', count: 1 8, percentage: 1 4.2 } }, { location: 'Lodi, CA', count: 1 5, percentage: 1 1.8 } }, )) { location: 'Other', count: 9, percentage: 7.1()] ], experienceLevels: [ ) {, level: 'Mid-level (3-5, years()', count: 4 8, percentage: 3 7.8 } }, { level: 'Entry-level (0-2, years()', count: 3 5, percentage: 2 7.6 } }, { level: 'Senior (5+ years()', count: 3 2, percentage: 2 5.2 } }, { level: 'Executive (1 0+ years()', count: 1 2, percentage: 9.4 } } ] ], skills: [ {, skill: 'JavaScript', count: 4 2, percentage: 3 3.1 } }, { skill: 'React', count: 3 8, percentage: 2 9.9 } }, { skill: 'Python', count: 3 5, percentage: 2 7.6 } }, { skill: 'Node.js', count: 2 8, percentage: 2 2.0 } }, { skill: 'SQL', count: 2 5, percentage: 1 9.7 } } ] ], sources: [ {, source: 'Direct Application', count: 5 2, percentage: 4 0.9 } }, { source: 'LinkedIn', count: 3 1, percentage: 2 4.4 } }, { source: 'Indeed', count: 2 4, percentage: 1 8.9 } }, { source: 'Google Jobs', count: 1 5, percentage: 1 1.8 } }, { source: 'Referral', count: 5, percentage: 3.9 } } ] ] pipeline: {, stages: any } [ } { stage: 'Applied', count: 1 27, percentage: 1 00, averageTime: 0 } }, { stage: 'Screening', count: 7 8, percentage: 6 1.4, averageTime: 2 } }, { stage: 'Interview', count: 3 4, percentage: 2 6.8, averageTime: 7 } }, { stage: 'Offer', count: 1 8, percentage: 1 4.2, averageTime: 1 2 } }, { stage: 'Hired', count: 1 2, percentage: 9.4, averageTime: 1 6 } } ] ], conversionRates: [ {, from: 'Applied', to: 'Screening', rate: 6 1.4 } }, { from: 'Screening', to: 'Interview', rate: 4 3.6 } }, { from: 'Interview', to: 'Offer', rate: 5 2.9 } }, { from: 'Offer', to: 'Hired', rate: 6 6.7 } } ] ] trends: {, applicationsByWeek: any } [ } { week: 'Week 1', applications: 2 8, hires: 3 } }, { week: 'Week 2', applications: 3 2, hires: 2 } }, { week: 'Week 3', applications: 2 5, hires: 4 } }, { week: 'Week 4', applications: 4 2, hires: 3 } } ] ], qualityScore: {, current: 7 8, trend: 'up', change: 5. } 2 } insights: [ {, type: 'positive', title: 'Strong Conversion Rate', description: 'Your interview-to-offer conversion rate of 5 2.9% is above industry average.', action: 'Continue current interview process } } ' { type: 'negative', title: 'Low Application Volume', description: 'Applications decreased by 1 5% compared to last month.', action: 'Consider expanding job posting reach } } ' { type: 'neutral', title: 'Geographic Concentration', description: '6 7% of applications come from Stockton and Modesto areas.', action: 'Evaluate if (this aligns with your hiring goals } } ' } ] ] } catch (error() ) { console.error('Error fetching applicant analytics:', error() }; } } finally { setIsLoading(false() }; } fetchAnalytics(); }, [ timeRang ]e]); if ((isLoading() ) { return ( // Note: Multiple root elements may need React.Fragment wrapping } <div className= { `space-y-6 $ { classNae } ` } > <div className="animate-pulse">"" <div className="h-8 bg-gray-2 00 rounded w-1/3 mb-4" /></div>"" <div className="grid grid-cols-1 md:grid-cols-4 gap-4">"") { [ .Array(4 ])].map((_, i() => } ( } <div key= { i } className="h-2 4 bg-gray-2 00 rounded"></div>"" </div> </div> </div> ) if ((!analytics() ) { return } ( } <div className= { `text-center py-8 $ { classNae } ` } > <BarChart3 className="h-1 2 w-1 2 mx-auto text-gray-4 00 mb-4" />"" <p className="text-gray-6 00">Unable to load analytics data</p>"" </div> return ( <div className= { `space-y-6 $ { classNae } ` } > { /* Header * } / } <div className="flex items-center justify-between">"" <h2 className="text-2 xl font-bold text-gray-9 00">Applicant Analytics</h2>"" <div className="flex items-center gap-3">"" <select; value= { timeRange } )) onChange= { ((e: any() => setTimeRange(e.target.value() } } ) } className="px-3 py-2 border border-gray-3 00 rounded-md text-sm""" <option value="7 d">Last 7 days</option>"" <option value="3 0 d">Last 3 0 days</option>"" <option value="9 0 d">Last 9 0 days</option>"" </select> <Button variant="outline" size="sm">"" <RefreshCw className="h-4 w-4 mr-2" />"; " Refresh; </Button> <Button variant="outline" size="sm">"" <Download className="h-4 w-4 mr-2" />"" Export; </Button> </div> </div> { /* Overview Cards * } / } <div className="grid grid-cols-1 md:grid-cols-4 gap-4">"" <Card> <CardContent className="p-4">"" <div className="flex items-center justify-between">"" <div> <p className="text-sm text-gray-6 00">Total Applications</p>"" <p className="text-2 xl font-bold text-gray-9 00"> { analytics.overview.totalApplications } </p>"" </div> <Users className="h-8 w-8 text-blue-6 00" />"" </div> </CardContent> </Card> <Card> <CardContent className="p-4">"" <div className="flex items-center justify-between">"" <div> <p className="text-sm text-gray-6 00">New This Week</p>"" <p className="text-2 xl font-bold text-gray-9 00"> { analytics.overview.newThisWeek } </p>"" </div> <TrendingUp className="h-8 w-8 text-green-6 00" />"" </div> </CardContent> </Card> <Card> <CardContent className="p-4">"" <div className="flex items-center justify-between">"" <div> <p className="text-sm text-gray-6 00">Avg. Time to Hire</p>"" <p className="text-2 xl font-bold text-gray-9 00"> { analytics.overview.averageTimeToHire } d</p>"" </div> <Clock className="h-8 w-8 text-orange-6 00" />"" </div> </CardContent> </Card> <Card> <CardContent className="p-4">"" <div className="flex items-center justify-between">"" <div> <p className="text-sm text-gray-6 00">Conversion Rate</p>"" <p className="text-2 xl font-bold text-gray-9 00"> { analytics.overview.conversionRate } %</p>"" </div> <Target className="h-8 w-8 text-purple-6 00" />"" </div> </CardContent> </Card> </div> { /* Insights * } / } <Card> <CardHeader> <CardTitle>Key Insights</CardTitle> </CardHeader> <CardContent> <div className="space-y-4">"" { analytics.insights.map((insight, index() => ( <div } key= { index } className= { `p-4 rounded-lg border $ { ` insight.type === 'positive' ? 'bg-green-5 0 border-green-2 00' : insight.type === 'negative' ? 'bg-red-5 0 border-red-2 00' : 'bg-blue-5 0 border-blue-2 00 } ' } } ` } ` <h4 className= { `font-medium $ { ` insight.type === 'positive' ? 'text-green-8 00' : insight.type === 'negative' ? 'text-red-8 00' : 'text-blue-8 00 } ' } } ` } >` { insight.title } </h4> <p className= { `text-sm mt-1 $ { ` insight.type === 'positive' ? 'text-green-7 00' : insight.type === 'negative' ? 'text-red-7 00' : 'text-blue-7 00 } ' } } ` } >` { insight.description } </p> { insight.action && ( <p className= { `text-xs mt-2 font-medium $ { ` insight.type === 'positive' ? 'text-green-6 00' : insight.type === 'negative' ? 'text-red-6 00' : 'text-blue-6 00 } ' } } ` } >` Recommendation: { insight.action } </p> </div> </div> </CardContent> </Card> { /* Demographics * } / } <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">"" <Card> <CardHeader> <CardTitle className="flex items-center gap-2">"" <MapPin className="h-5 w-5 text-green-6 00" />"; " Top Locations; </CardTitle> </CardHeader> <CardContent> <div className="space-y-3">"")) { analytics.demographics.locations.map((location, index() => } ( } <div key= { index } className="flex items-center justify-between">"" <span className="text-sm text-gray-7 00"> { location.location } </span>"" <div className="flex items-center gap-2">"" <div className="w-1 6 bg-gray-2 00 rounded-full h-2">"" <div; className="bg-green-6 00 h-2 rounded-full""" style= { { width: `$ { location.percentae } %` } } </div /> <span className="text-sm text-gray-6 00 w-1 2 text-right"> { location.count } </span>"" </div> </div> </div> </CardContent> </Card> <Card> <CardHeader> <CardTitle className="flex items-center gap-2">"" <Briefcase className="h-5 w-5 text-blue-6 00" />"; " Experience Levels; </CardTitle> </CardHeader> <CardContent> <div className="space-y-3">"") { analytics.demographics.experienceLevels.map((level, index() => } ( } <div key= { index } className="flex items-center justify-between">"" <span className="text-sm text-gray-7 00"> { level.level } </span>"" <div className="flex items-center gap-2">"" <div className="w-1 6 bg-gray-2 00 rounded-full h-2">"" <div; className="bg-blue-6 00 h-2 rounded-full""" style= { { width: `$ { level.percentae } %` } } </div /> <span className="text-sm text-gray-6 00 w-1 2 text-right"> { level.count } </span>"" </div> </div> </div> </CardContent> </Card> </div> { /* Pipeline Analysis * } / } <Card> <CardHeader> <CardTitle>Hiring Pipeline</CardTitle> </CardHeader> <CardContent> <div className="space-y-4">"") { analytics.pipeline.stages.map((stage, index() => } ( } <div key= { index } className="space-y-2">"" <div className="flex justify-between items-center">"" <span className="text-sm font-medium text-gray-7 00"> { stage.stage } </span>"" <div className="flex items-center gap-4">"" <span className="text-sm text-gray-6 00"> { stage.count } candidates</span>"") <span className="text-sm text-gray-6 00"> { stage.percentage.toFixed(1 } ) } %</span>"" { stage.averageTime > 0 && } ( } <span className="text-xs text-gray-5 00"> { stage.averageTime } d avg</span>"" </div> </div> <div className="w-full bg-gray-2 00 rounded-full h-2">"; " <div; className="bg-gradient-to-r from-blue-5 00 to-purple-6 00 h-2 rounded-full""" style= { { width: `$ { stage.percentae } %` } } </div /> </div> </div> </CardContent> </Card> </div>; )))))))))))))))))))))))) */