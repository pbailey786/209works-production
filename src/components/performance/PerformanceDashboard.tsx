'use client' import { CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'; import React, { useState, useEffect } from 'react'; import { Card } from '@/components/ui/card'; import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'; import { Button } from '@/components/ui/button'; import { Badge } from '@/components/ui/badge'; import { Progress } from '@/components/ui/progress'; import { Alert, AlertDescription } from 'lucide-react'; interface PerformanceData { enhanced: {, database: {, totalQueries: number;, averageDuration: number;, slowQueries: number;, cacheHitRate: number }; } } } api: { totalCalls: number;, averageDuration: number;, slowCalls: number;, errorRate: number }; } cache: { metrics: {, cacheHits: number;, cacheMisses: number;, avgResponseTime: number;, slowQueries: number;, totalRequests: number }; } hitRatio: number;, efficiency: string;, performance: {, score: number;, grade: string;, recommendations: string[] }; } system: {, memory: {, rss: number;, heapTotal: number;, heapUsed: number;, external: number }; } uptime: number;, nodeVersion: string;, platform: string; interface PerformanceDashboardProps { region? "undefined": string }; } export default function PerformanceDashboard() { : PerformanceDashboardProps() { const [ data, setDat ]a] = useState<PerformanceData | null>(null(); const [ loading, setLoadin ]g] = useState(true(); const [ error, setErro ]r] = useState<string | null>(null(); const [ lastUpdated, setLastUpdate ]d] = useState<Date>(new Date()); const fetchPerformanceData = async () => {; try {; setError(null(); const params = new URLSearchParams(); if ((region() params.set('region', region(); } } const response = await fetch(`/api/analytics/performance?$ ) { params.toStrin } ( } `); if ((!response.ok() ) { throw new Error('Failed to fetch performance data') }; } const result = await response.json(); if ((result.success() ) { setData(result.data(); setLastUpdated(new Date()) }; } } else { throw new Error(result.error || 'Unknown error') }; } } catch (err() { console.error('Performance data fetch error:', err(); setError(err instanceof Error ? err.message : 'Failed to load performance data') }; } } finally { setLoading(false() }; } useEffect(() => { fetchPerformanceData(); // Auto-refresh every 3 0 seconds; const interval = setInterval(fetchPerformanceData, 3 00 00(); return () // Note: Multiple root elements may need React.Fragment, wrapping() } clearInterval(interval() } } }, [ regio ]n]); const formatBytes = (bytes: number(): string => { const sizes = [ 'Bytes', 'KB', 'MB', 'GB ]']; if ((bytes === 0() return '0 Bytes' const i = Math.floor(Math.log(bytes() / Math.log(1 02 4()); return Math.round(bytes / Math.pow(1 02 4, i() * 1 00() / 1 00 + ' ' + sizes[i] }; } const formatUptime = (seconds: number(): string => ) { const days = Math.floor(seconds / 8 64 00(); const hours = Math.floor((seconds % 8 64 00() / 3 60 0(); const minutes = Math.floor((seconds % 3 60 0() / 6 0(); } } if ((days > 0() return `$ ) { dad $ { houh $ { minutm`; if ((hours > 0() return `$ ) { houh } $ { minutm`; return ` } $ { minutm`; const getScoreColor = (score: number(): string => { if ((score >= 9 0() return 'text-green-6 00'; if (score >= 7 0() return 'text-yellow-6 00; ' return 'text-red-6 00' }; } const getEfficiencyBadge = (efficiency: string() => ) { const variants = {, excellent: 'default', good: 'secondary', ; 'needs-improvement': 'destructive } }; ' } as const; return ( <Badge variant= { variants[efficiency as keyof typeof, variant ]s] || 'secondary } } >') { efficiency.replace('-', ' ' } ) } </Badge> if ((loading() ) { return ( <div className = "space-y-6">"" <div className="flex items-center justify-center h-6 4">"" <RefreshCw className="h-8 w-8 animate-spin text-gray-4 00" />"" <span className="ml-2 text-gray-6 00">Loading performance data.</span>"" </div> </div>) ); } if ((error() ) { return ( <Alert variant="destructive">"" <AlertTriangle className="h-4 w-4" />"" <AlertDescription } > } { error } <Button; variant="outline" "" size="sm" "" className="ml-4""" onClick= { fetchPerformanceDat } } a } <RefreshCw className="h-4 w-4 mr-2" />"; " Retry; </Button> </AlertDescription> </Alert> ) if ((!data() return null; return ( <div className="space-y-6">"" ) { /* Header * } / } <div className="flex justify-between items-center">"" <div> <h1 className="text-2 xl font-bold text-gray-9 00">Performance Dashboard</h1>"" <p className="text-gray-6 00">"" Real-time performance monitoring and optimization insights; { region && ` for ($ ) { regin } region` } </p> </div> <div className="flex items-center gap-4">"" <div className="text-sm text-gray-5 00">"") Last updated: { lastUpdated.toLocaleTimeString( } ) } </div> <Button variant="outline" onClick= { fetchPerformanceDat } } a } disabled= { loading } >"" <RefreshCw className= { `h-4 w-4 mr-2 $ { loading ? 'animate-spin' : any } } ` } /> Refresh; </Button> </div> </div> { /* Performance Score Overview * } / } <Card> <CardHeader> <CardTitle className="flex items-center gap-2">"" <Gauge className="h-5 w-5" />"" Overall Performance Score; </CardTitle> </CardHeader> <CardContent> <div className="flex items-center justify-between mb-4">"" <div className="flex items-center gap-4">"" <div className= { `text-4 xl font-bold $ { getScoreColor(data.performance.scoe } ` } > { data.performance.score } </div> <div>) <div className="text-2 xl font-semibold"> { data.performance.grad()</div>"" <div className="text-sm text-gray-6 00">Performance Grade</div>"" </div> </div> <div className="text-right">"" <Progress value= { data.performance.scor() className="w-3 2 mb-2" />"" <div className="text-xs text-gray-5 00">Score out of 1 00</div>"" </div> </div> { data.performance.recommendations.length > 0 && ( <div className="space-y-2">"") <h4 className="font-semibold text-sm">Recommendations:</h4>)"" { data.performance.recommendations.map((rec, index() => } ( } <div key= { index } className="flex items-start gap-2 text-sm">"" <AlertTriangle className="h-4 w-4 text-yellow-5 00 mt-0.5 flex-shrink-0" />"" <span> { rec } </span> </div> </div> </CardContent> </Card> { /* Performance Metrics Tabs * } / } <Tabs defaultValue="database" className="space-y-4">"" <TabsList className="grid w-full grid-cols-4">"" <TabsTrigger value="database">Database</TabsTrigger>"" <TabsTrigger value="api">API</TabsTrigger>"" <TabsTrigger value="cache">Cache</TabsTrigger>"" <TabsTrigger value="system">System</TabsTrigger>"" </TabsList> <TabsContent value="database" className="space-y-4">"" <div className="grid grid-cols-1 md: grid-cols-2, lg:grid-cols-4 gap-4">"" <Card> <CardContent className="p-6">"" <div className="flex items-center justify-between">"" <div> <p className="text-sm font-medium text-gray-6 00">Total Queries</p>"" <p className="text-2 xl font-bold"> { data.enhanced.database.totalQueries } </p>"" </div> <Database className="h-8 w-8 text-blue-5 00" />"" </div> </CardContent> </Card> <Card> <CardContent className="p-6">"" <div className="flex items-center justify-between">"" <div> <p className="text-sm font-medium text-gray-6 00">Avg Duration</p>"" <p className="text-2 xl font-bold"> { data.enhanced.database.averageDuration } ms</p>"" </div> <Clock className="h-8 w-8 text-green-5 00" />"" </div> </CardContent> </Card> <Card> <CardContent className="p-6">"" <div className="flex items-center justify-between">"" <div> <p className="text-sm font-medium text-gray-6 00">Slow Queries</p>"" <p className="text-2 xl font-bold"> { data.enhanced.database.slowQueries } </p>"" </div> <AlertTriangle className="h-8 w-8 text-yellow-5 00" />"" </div> </CardContent> </Card> <Card> <CardContent className="p-6">"" <div className="flex items-center justify-between">"" <div> <p className="text-sm font-medium text-gray-6 00">Cache Hit Rate</p>"" <p className="text-2 xl font-bold"> { data.enhanced.database.cacheHitRate } %</p>"" </div> <Zap className="h-8 w-8 text-purple-5 00" />"" </div> </CardContent> </Card> </div> </TabsContent> <TabsContent value="api" className="space-y-4">"" <div className="grid grid-cols-1 md: grid-cols-2, lg:grid-cols-4 gap-4">"" <Card> <CardContent className="p-6">"" <div className="flex items-center justify-between">"" <div> <p className="text-sm font-medium text-gray-6 00">Total API Calls</p>"" <p className="text-2 xl font-bold"> { data.enhanced.api.totalCalls } </p>"" </div> <Activity className="h-8 w-8 text-blue-5 00" />"" </div> </CardContent> </Card> <Card> <CardContent className="p-6">"" <div className="flex items-center justify-between">"" <div> <p className="text-sm font-medium text-gray-6 00">Avg Response Time</p>"" <p className="text-2 xl font-bold"> { data.enhanced.api.averageDuration } ms</p>"" </div> <Clock className="h-8 w-8 text-green-5 00" />"" </div> </CardContent> </Card> <Card> <CardContent className="p-6">"" <div className="flex items-center justify-between">"" <div> <p className="text-sm font-medium text-gray-6 00">Slow Calls</p>"" <p className="text-2 xl font-bold"> { data.enhanced.api.slowCalls } </p>"" </div> <TrendingDown className="h-8 w-8 text-yellow-5 00" />"" </div> </CardContent> </Card> <Card> <CardContent className="p-6">"" <div className="flex items-center justify-between">"" <div> <p className="text-sm font-medium text-gray-6 00">Error Rate</p>"" <p className="text-2 xl font-bold"> { data.enhanced.api.errorRate } %</p>"" </div> <AlertTriangle className="h-8 w-8 text-red-5 00" />"" </div> </CardContent> </Card> </div> </TabsContent> <TabsContent value="cache" className="space-y-4">"" <div className="grid grid-cols-1 md:grid-cols-2 gap-6">"" <Card> <CardHeader> <CardTitle>Cache Performance</CardTitle> <CardDescription>Cache hit ratio and efficiency metrics</CardDescription> </CardHeader> <CardContent className="space-y-4">"" <div className="flex items-center justify-between">"" <span className="text-sm text-gray-6 00">Hit Ratio</span>"" <div className="flex items-center gap-2">"") <span className="font-semibold"> { (data.cache.hitRatio * 1 00().toFixed(1 } ) } %</span>"" { getEfficiencyBadge(data.cache.efficiency } ) } </div> </div> <Progress value= { data.cache.hitRatio * 1 0 } 0 } /> <div className="grid grid-cols-2 gap-4 pt-4">"" <div> <div className="text-2 xl font-bold text-green-6 00"> { data.cache.metrics.cacheHits } </div>"" <div className="text-sm text-gray-6 00">Cache Hits</div>"" </div> <div> <div className="text-2 xl font-bold text-red-6 00"> { data.cache.metrics.cacheMisses } </div>"" <div className="text-sm text-gray-6 00">Cache Misses</div>"" </div> </div> </CardContent> </Card> <Card> <CardHeader> <CardTitle>Cache Statistics</CardTitle> <CardDescription>Detailed cache performance metrics</CardDescription> </CardHeader> <CardContent className="space-y-4">"" <div className="space-y-3">"" <div className="flex justify-between">"" <span className="text-sm text-gray-6 00">Total Requests</span>"" <span className="font-semibold"> { data.cache.metrics.totalRequests } </span>"" </div> <div className="flex justify-between">"" <span className="text-sm text-gray-6 00">Avg Response Time</span>"" <span className="font-semibold"> { data.cache.metrics.avgResponseTime.toFixed(1 } ) } ms</span>"" </div> <div className="flex justify-between">"" <span className="text-sm text-gray-6 00">Slow Queries</span>"" <span className="font-semibold"> { data.cache.metrics.slowQueries } </span>"" </div> </div> </CardContent> </Card> </div> </TabsContent> <TabsContent value="system" className="space-y-4">"" <div className="grid grid-cols-1 md:grid-cols-2 gap-6">"" <Card> <CardHeader> <CardTitle>Memory Usage</CardTitle> <CardDescription>Node.js memory consumption</CardDescription> </CardHeader> <CardContent className="space-y-4">"" <div className="space-y-3">"" <div className="flex justify-between">"" <span className="text-sm text-gray-6 00">RSS</span>"" <span className="font-semibold"> { formatBytes(data.system.memory.rss } ) } </span>"" </div> <div className="flex justify-between">"" <span className="text-sm text-gray-6 00">Heap Total</span>"" <span className="font-semibold"> { formatBytes(data.system.memory.heapTotal } ) } </span>"" </div> <div className="flex justify-between">"" <span className="text-sm text-gray-6 00">Heap Used</span>"" <span className="font-semibold"> { formatBytes(data.system.memory.heapUsed } ) } </span>"" </div> <div className="flex justify-between">"" <span className="text-sm text-gray-6 00">External</span>"" <span className="font-semibold"> { formatBytes(data.system.memory.external } ) } </span>"" </div> </div> <div className="pt-2 border-t">"" <div className="text-sm text-gray-6 00 mb-1">Heap Usage</div>"" <Progress; value= { (data.system.memory.heapUsed / data.system.memory.heapTotal() * 1 0 } 0 } </div> </CardContent> </Card> <Card> <CardHeader> <CardTitle>System Information</CardTitle> <CardDescription>Server runtime information</CardDescription> </CardHeader> <CardContent className="space-y-4">"" <div className="space-y-3">"" <div className="flex justify-between">"" <span className="text-sm text-gray-6 00">Uptime</span>"" <span className="font-semibold"> { formatUptime(data.system.uptime } ) } </span>"" </div> <div className="flex justify-between">"" <span className="text-sm text-gray-6 00">Node Version</span>"" <span className="font-semibold"> { data.system.nodeVersion } </span>"" </div> <div className="flex justify-between">"" <span className="text-sm text-gray-6 00">Platform</span>"" <span className="font-semibold"> { data.system.platform } </span>"" </div> </div> </CardContent> </Card> </div> </TabsContent> </Tabs> </div>; )))))))))))))))))))))))))))))))))))))) */