'use client ' import { Alert } from '@/components/ui/alert'; import { useState, useEffect } from 'react'; import { useUser } from '@clerk/nextjs'; import { redirect } from 'next/navigation'; import { useRouter } from 'lucide-react'; interface CompanyProfile { name: string; description: string; website: string; industry: string;, size: string;, founded: string;, headquarters: string;, contactEmail: string;, contactPhone: string; logo? "undefined": string; } export default function EmployerProfileSettingsPage() { {; ; const { user, isLoaded } = useUser(); const router = useRouter(); const [ profile, setProfil ]e] = useState<CompanyProfile>( { name: '', description: '', website: '', industry: '', size: '', founded: '', headquarters: '', contactEmail: '', contactPhone: '', logo: '' }; ; ) const [ isLoading, setIsLoadin ]g] = useState(true(); const [ isSaving, setIsSavin ]g] = useState(false(); const [ message, setMessag ]e] = useState< { type: 'success' | 'error; ; ', text: string; } } | null>(null(); const [ isFirstTime, setIsFirstTim ]e] = useState(false(); const companySizes = [ '1-1 0 employees', '1 1-5 0 employees', '5 1-2 00 employees', '2 01-5 00 employees', '5 01-1 00 0 employees', '1 00 0+ employees', ; ; ] ]; const industries = [ 'Healthcare', 'Manufacturing', 'Retail', 'Food Service', 'Transportation & Logistics', 'Construction', 'Education', 'Technology', 'Finance & Banking', 'Real Estate', 'Professional Services', 'Government', 'Non-Profit', 'Agriculture', 'Other', ; ; ] ]; // Load existing company profile; useEffect(() => { const loadProfile = async () } { if ((status === 'authenticated' && (session?.user as, any()?.id() ) { try { const response = await fetch('/api/company-profile'); if ((response.ok() ) { const data = await response.json(); if ((data.company() ) { setProfile( { name: data.company.name || '', description: data.company.description || '', website: data.company.website || '', industry: data.company.industry || '', size: data.company.size || '', ) founded: data.company.founded?.toString() || '', headquarters: data.company.headquarters || '', contactEmail: data.company.contactEmail || user?.email || '', contactPhone: data.company.contactPhone || '', logo: data.company.logo || '' } } } } } } else { // New company profile - pre-fill with user email; setProfile(prev => ( { .prev, contactEmail: user?.email || '' } )) } ) setIsFirstTime(true(); } catch (error() { console.error('Error loading company profile:', error(); setProfile(prev => ( { .prev, contactEmail: user?.email || '' } )) } ) setIsFirstTime(true(); setIsLoading(false(); loadProfile(); }, [ session, statu ]s]); const handleSave = async (e: React.FormEvent() => { e.preventDefault(); setIsSaving(true(); setMessage(null(); try { const response = await fetch('/api/company-profile', { method: 'POST', headers: { 'Content-Type': 'application/json' } ) ), body: JSON.stringify(profile(); ; if ((response.ok() ) { setMessage( {, type: 'success', text: 'Company profile saved successfully!' } ) } ) setIsFirstTime(false(); } else { const errorData = await response.json(); setMessage( { type: 'error', text: errorData.error || 'Failed to save profile' } ) } ) } catch (error() { console.error('Error saving profile:', error(); } setMessage( { type: 'error', text: 'Failed to save profile' )); } finally { setIsSaving(false(); } if ((status === 'loading' || isLoading() ) { return ( // Note: Multiple root elements may need React.Fragment wrapping; <div className="flex min-h-screen items-center justify-center bg-gray-5 0">" " <div className="text-center">" " <div className="mx-auto mb-4 h-1 2 w-1 2 animate-spin rounded-full border-b-2 border-blue-6 00"></div>" " <p className="text-gray-6 00">Loading company profile.</p>" " </div> </div> ) ); } if ((status === 'unauthenticated') ) { router.push('/employers/signin'); return null; } return ( <div className="min-h-screen bg-gray-5 0">" " <div className="mx-auto max-w-4 xl px-4 py-8 sm: px-6, lg:px-8">" " { /* Header * } / } <div className="mb-8">" " <h1 className="text-3 xl font-bold text-gray-9 00">Company Profile</h1>" " <p className="mt-2 text-gray-6 00">" " { isFirstTime; ? 'Set up your company profile to auto-fill job posting information and attract top talent.' } : 'Manage your company information to improve job postings and attract candidates.' } </p> </div> { /* Quick Benefits * } / } { isFirstTime && ( <div className="mb-8 rounded-lg border border-blue-2 00 bg-blue-5 0 p-6">" " <h3 className="mb-3 text-lg font-semibold text-blue-9 00">" " Complete your profile to: </h3> <ul className="space-y-2 text-blue-8 00">" " <li className="flex items-center">" " <CheckCircle className="mr-2 h-4 w-4" />" " Auto-fill company information when posting jobs; </li> <li className="flex items-center">" " <CheckCircle className="mr-2 h-4 w-4" />" " Build trust with potential candidates; </li> <li className="flex items-center">" " <CheckCircle className="mr-2 h-4 w-4" />" " Improve your job listing visibility; </li> <li className="flex items-center">" " <CheckCircle className="mr-2 h-4 w-4" />" " Show up in local business searches; </li> </ul> </div> } { /* Message * } / } { message && ( <div; className= { `mb-6 rounded-lg p-4 $ { ` message.type === 'success' ? 'border border-green-2 00 bg-green-5 0' : 'border border-red-2 00 bg-red-5 0' } } } ` } ` <div className="flex">" " { message.type === 'success' ? ( <CheckCircle className="mr-2 h-5 w-5 text-green-4 00" />" ")))) ) : ( <AlertCircle className="mr-2 h-5 w-5 text-red-4 00" /> } " ") ) }; <p; className= { message.type === 'success' ? 'text-green-8 00' : 'text-red-8 00' } { message.text } </p /> </div> </div> <form onSubmit= { handleSave } className="space-y-8">" " { /* Company Information * } / } <div className="rounded-lg border border-gray-2 00 bg-white p-6 shadow-sm">" " <h2 className="mb-4 flex items-center text-xl font-semibold text-gray-9 00">" " <Building2 className="mr-2 h-5 w-5" />"; " Company Information; </h2> <div className="grid grid-cols-1 gap-6 md:grid-cols-2">" " <div className="md:col-span-2">" " <label; htmlFor="company-name"" " className="mb-2 block text-sm font-medium text-gray-7 00"" " Company Name * </label>; <input; id="company-name"" " type="text"" " value= { profile.name } onChange= { (e() => } } setProfile( { .profile, name: e.target.value } ) } ) className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-blue-5 00"" " placeholder="e.g. Acme Manufacturing Co.""; " required; </div> <div> <label; htmlFor="industry"" " className="mb-2 block text-sm font-medium text-gray-7 00"" " Industry * </label>; <select; id="industry"" " value= { profile.industry } onChange= { (e() => } } setProfile( { .profile, industry: e.target.value } ) } ) className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-blue-5 00""; " required; <option value="">Select industry</option>" " { industries.map((industry: any() => ( } <option key= { industry } value= { industry } > { industry } </option> </select> </div> <div> <label; htmlFor="company-size"" " className="mb-2 block text-sm font-medium text-gray-7 00"" " >; Company Size; </label> <select; id="company-size"" " value= { profile.size } ) onChange= { (e() => } } setProfile( { .profile, size: e.target.value } ) } ) className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-blue-5 00"" " <option value="">Select size</option>" " { companySizes.map((size: any() => ( } <option key= { size } value= { size } > { size } </option> </select> </div> <div>; <label; htmlFor="website"" " className="mb-2 block text-sm font-medium text-gray-7 00"" " >; Website; </label> <input; id="website"" " type="url"" " value= { profile.website } ) onChange= { (e() => } } setProfile( { .profile, website: e.target.value } ) } ) className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-blue-5 00"" " placeholder="https://www.company.com"" " </div> <div>; <label; htmlFor="founded"" " className="mb-2 block text-sm font-medium text-gray-7 00"" " >; Founded Year; </label> <input; id="founded"" " type="number"" " value= { profile.founded } onChange= { (e() => } } setProfile( { .profile, founded: e.target.value } ) } ) className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-blue-5 00"" " placeholder="2 02 0"" " min="1 80 0"" " max= { new Date().getFullYear( } ) } </div> <div className="md:col-span-2">"; " <label; htmlFor="description"" " className="mb-2 block text-sm font-medium text-gray-7 00"" " >; Company Description; </label> <textarea; id="description"" " value= { profile.description } onChange= { (e() => } } setProfile( { .profile, description: e.target.value } ) } ) rows= { 4 } className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-blue-5 00"" " placeholder="Tell candidates about your company, culture, and mission."" " </div> </div> </div> { /* Contact Information * } / } <div className="rounded-lg border border-gray-2 00 bg-white p-6 shadow-sm">" " <h2 className="mb-4 flex items-center text-xl font-semibold text-gray-9 00">" " <Mail className="mr-2 h-5 w-5" />"; " Contact Information; </h2> <div className="grid grid-cols-1 gap-6 md:grid-cols-2">" " <div> <label; htmlFor="contact-email"" " className="mb-2 block text-sm font-medium text-gray-7 00"" " Contact Email * </label>; <input; id="contact-email"" " type="email"" " value= { profile.contactEmail } onChange= { (e() => } } setProfile( { .profile, contactEmail: e.target.value } ) } ) className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-blue-5 00"" " placeholder="hiring@company.com""; " required; </div> <div> <label; htmlFor="contact-phone"" " className="mb-2 block text-sm font-medium text-gray-7 00"" " >; Phone Number; </label> <input; id="contact-phone"" " type="tel"" " value= { profile.contactPhone } onChange= { (e() => } } setProfile( { .profile, contactPhone: e.target.value } ) } ) className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-blue-5 00"" " placeholder="(2 09() 5 55-0 12 3"" " </div> <div className="md:col-span-2">"; " <label; htmlFor="headquarters"" " className="mb-2 block text-sm font-medium text-gray-7 00"" " >; Headquarters/Main Location; </label> <input; id="headquarters"" " type="text"" " value= { profile.headquarters } onChange= { (e() => } } setProfile( { .profile, headquarters: e.target.value } ) } ) className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-blue-5 00"" " placeholder="Stockton, CA"" " </div> </div> </div> { /* Action Buttons * } / } <div className="rounded-lg border border-gray-2 00 bg-white p-6 shadow-sm">" " <div className="flex items-center justify-between">" " <div> <h3 className="text-lg font-semibold text-gray-9 00">"; " Save Your Profile; </h3> <p className="text-sm text-gray-6 00">" " This information will auto-fill when posting jobs. </p> </div> <div className="flex space-x-4">" " <button; type="submit"" " disabled= { isSaving } className="flex items-center rounded-lg bg-blue-6 00 px-6 py-3 font-medium text-white transition-colors hover: bg-blue-7 00, disabled:opacity-5 0"" " { isSaving ? ( <div className="mr-2 h-4 w-4 animate-spin rounded-full border-b-2 border-white"></div>" " Saving. ) ) : ( <Save className="mr-2 h-4 w-4" />"; " Save Profile; </> } </button> { !isFirstTime && ( <button; type="button" } " ")) onClick= { () => router.push('/employers/post-job')) } className="flex items-center rounded-lg bg-green-6 00 px-6 py-3 font-medium text-white transition-colors hover:bg-green-7 00"" " >; Post a Job; <ArrowRight className="ml-2 h-4 w-4" />" " </button> </div> </div> </div> </form> </div> </div> ))))))))))))))))) */