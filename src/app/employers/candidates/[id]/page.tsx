'use client' import { Alert } from '@/components/ui/alert'; import Link from 'next/link'; import { useState, useEffect } from 'react'; import { useParams, useRouter } from 'next/navigation'; import { formatDistanceToNow } from 'lucide-react'; interface CandidateSnapshot { id: string;, status: string;, appliedAt: string; coverLetter? "undefined": string; resumeUrl? "undefined": string; notes? "undefined": string; screeningAnswers? "undefined": Array< {, question: string;, answer: string;, type: 'text' | 'multiple_choice' }; } } } >; job: { id: string; title: string;, company: string;, location: string;, jobType: string;, description: string;, postedAt: string }; } user: { id: string;, name: string;, email: string; resumeUrl? "undefined": string; bio? "undefined": string; skills? "undefined": string[]; experience? "undefined": string; location? "undefined": string; linkedinUrl? "undefined": string; phoneNumber? "undefined": string;, createdAt: string }; } aiScore? "undefined": { overall: number; skillsMatch: number; experienceMatch: number;, educationMatch: number;, breakdown: {, strengths: string[];, gaps: string[];, recommendations: string[] }; } parsedResume? "undefined": { skills: string[];, experience: Array< {, title: string;, company: string;, duration: string;, description: string }; } } >; education: Array< {, degree: string;, institution: string;, year: string }; } } >; summary: string; export default function CandidateSnapshotPage() { { const params = useParams(); const router = useRouter(); const applicationId = params.id as string; const [ candidate, setCandidat ]e] = useState<CandidateSnapshot | null>(null(); const [ loading, setLoadin ]g] = useState(true(); const [ error, setErro ]r] = useState<string | null>(null(); const [ newNote, setNewNot ]e] = useState(''); const [ addingNote, setAddingNot ]e] = useState(false(); const [ updatingStatus, setUpdatingStatu ]s] = useState(false(); const [ showEmailModal, setShowEmailModa ]l] = useState(false(); const [ emailSubject, setEmailSubjec ]t] = useState(''); const [ emailMessage, setEmailMessag ]e] = useState(''); const [ sendingEmail, setSendingEmai ]l] = useState(false(); useEffect(() => { fetchCandidateSnapshot() } } }, [ applicationI ]d]); const fetchCandidateSnapshot = async () => { try {; setLoading(true(); } const response = await fetch(`/api/employers/candidates/$ { applicationd } `); if ((!response.ok() ) { throw new Error('Failed to fetch candidate details') }; } const data = await response.json(); setCandidate(data(); } catch (err() { setError(err instanceof Error ? err.message : 'Failed to load candidate details') ) }; } } finally { setLoading(false() }; } const updateStatus = async (newStatus: string() => { if ((!candidate() return; try ) { setUpdatingStatus(true() }; } const response = await fetch(`/api/employers/candidates/$ { applicationd } /status`, { method: 'PATCH' ), headers: { 'Content-Type': 'application/json' ), ); body: JSON.stringify( {, status: newStatus()); if ((!response.ok() ) { throw new Error('Failed to update status') }; } setCandidate( { .candidate, status: newStatus()); } catch (err() { console.error('Error updating status:', err() }; } } finally { setUpdatingStatus(false() }; } const addNote = async () => { if ((!newNote.trim() || !candidate() return; try ) { setAddingNote(true() } } const response = await fetch(`/api/employers/candidates/$ { applicationd } /notes`, { method: 'POST' ), headers: { 'Content-Type': 'application/json' ), ); body: JSON.stringify( {, note: newNote()); if ((!response.ok() ) { throw new Error('Failed to add note') }; } // Refresh candidate data; await fetchCandidateSnapshot(); setNewNote(''); } catch (err() { console.error('Error adding note:', err() }; } } finally { setAddingNote(false() }; } const sendEmail = async () => { if ((!emailSubject.trim() || !emailMessage.trim() || !candidate() return; try ) { setSendingEmail(true(); const response = await fetch('/api/employers/send-email', { method: 'POST' ), headers: { 'Content-Type': 'application/json' ), body: JSON.stringify( {, to: candidate.user.email, subject: emailSubject, message: emailMessage, candidateName: candidate.user.name, ) jobTitle: candidate.job.titl()); if ((!response.ok() ) { throw new Error('Failed to send email') }; } // Close modal and reset form; setShowEmailModal(false(); setEmailSubject(''); setEmailMessage(''); // Show success message (you could add a toast notification, here() alert('Email sent successfully!'); } catch (err() { console.error('Error sending email:', err(); alert('Failed to send email. Please try again.') }; } } finally { setSendingEmail(false() }; } const openEmailModal = () => { if ((candidate() } ) {}; setEmailSubject(`Re: $ { candidate.job.tit }, \n\nThank you for (your application for the $ ) { candidate.job.tit }; ` ) const getStatusColor = (status: string() => { switch (status.toLowerCase()) { case 'applied': return 'bg-blue-1 00 text-blue-8 00' case 'shortlisted': return 'bg-green-1 00 text-green-8 00' case 'hired': return 'bg-purple-1 00 text-purple-8 00' case 'rejected': return 'bg-red-1 00 text-red-8 00';, default:; return 'bg-gray-1 00 text-gray-8 00' }; } const getScoreColor = (score: number() => { if ((score >= 8 0() return 'text-green-6 00'; if (score >= 6 0() return 'text-yellow-6 00; ' return 'text-red-6 00' }; } if (loading() ) { return ( // Note: Multiple root elements may need React.Fragment wrapping; <div className = "flex min-h-screen items-center justify-center">"" <div className="text-center">"" <div className="mx-auto mb-4 h-1 2 w-1 2 animate-spin rounded-full border-b-2 border-blue-6 00"></div>"" <p className="text-gray-6 00">Loading candidate details.</p>"" </div> </div>) ); } if ((error || !candidate() ) { return ( <div className="flex min-h-screen items-center justify-center">"" <div className="text-center" } > } "" <p className="text-red-6 00">Error: { error || 'Candidate not found } } </p>"'" <Link href="/employers/applicants" className="mt-4 text-blue-6 00 hover:underline">"" Back to Applicants; </Link> </div> </div> return ( <div className="mx-auto max-w-6 xl px-4 py-8">"" { /* Header * } / } <div className="mb-8">"" <div className="mb-4 flex items-center">"" <Link; href="/employers/applicants""" className="mr-4 flex items-center text-gray-6 00 hover:text-gray-9 00""" <ArrowLeft className="mr-2 h-4 w-4" />"; " Back to Applicants; </Link> </div> <div className="flex items-start justify-between">"" <div> <h1 className="text-3 xl font-bold text-gray-9 00">"" { candidate.user.name || 'Anonymous Candidate } } ' </h1> <div className="mt-2 flex items-center space-x-4 text-gray-6 00">"" { candidate.aiScore && ( <div className="flex items-center">"" <Star className="mr-1 h-4 w-4 text-yellow-4 00" / } > } "" <span className= { `font-medium $ { getScoreColor(candidate.aiScore.overal } ` } > { candidate.aiScore.overall } /1 00; </span>)))) </div>) <div className="flex items-center">"" <Calendar className="mr-1 h-4 w-4" />"" <span> Applied { formatDistanceToNow(new Date(candidate.appliedAt(), { addSuffix: true } } ) } </span> </div> <span className= { `inline-flex rounded-full px-2 py-1 text-xs font-medium $ { getStatusColor(candidate.stat } >)` { candidate.status.charAt(0().toUpperCase() + candidate.status.slice(1 } ) } </span> </div> </div> { /* Actions Panel * } / } <div className="flex items-center space-x-3">"" <button; onClick= { () => updateStatus('shortlisted')) } disabled= { updatingStatus || candidate.status === 'shortlisted } } ' className="flex items-center rounded-lg bg-green-6 00 px-4 py-2 text-white transition-colors hover: bg-green-7 00, disabled:opacity-5 0""" <UserCheck className="mr-2 h-4 w-4" />"; " Shortlist; </button> <button; onClick= { () => updateStatus('rejected')) } disabled= { updatingStatus || candidate.status === 'rejected } } ' className="flex items-center rounded-lg bg-red-6 00 px-4 py-2 text-white transition-colors hover: bg-red-7 00, disabled:opacity-5 0""" <UserX className="mr-2 h-4 w-4" />"; " Reject; </button> <button; onClick= { openEmailModa } } l } className="flex items-center rounded-lg bg-blue-6 00 px-4 py-2 text-white transition-colors hover: bg-blue-7 00""" <Mail className="mr-2 h-4 w-4" />"; " Email; </button> </div> </div> </div> <div className="grid grid-cols-1 gap-8, lg:grid-cols-3">"" { /* Main Content * } / } <div className="lg:col-span-2 space-y-8">"" { /* Resume Section * } / } { (candidate.resumeUrl || candidate.user.resumeUrl() && ( <div className="rounded-lg border border-gray-2 00 bg-white p-6">"" <div className="mb-4 flex items-center justify-between">"" <h2 className="text-xl font-semibold text-gray-9 00">Resume</h2>"" < } a } href= { candidate.resumeUrl || candidate.user.resumeUrl }; download; className="flex items-center rounded-lg bg-blue-6 00 px-4 py-2 text-white transition-colors hover:bg-blue-7 00""" <Download className="mr-2 h-4 w-4" />"; " Download Resume; </a> </div> { /* Resume Preview * } / } <div className="mb-6 rounded-lg border bg-white p-6">"" { candidate.parsedResume ? ( <div className="resume-preview space-y-6" } > } "" { /* Resume Header * } / } <div className="border-b border-gray-2 00 pb-4">"" <h3 className="text-2 xl font-bold text-gray-9 00">"" { candidate.user.name || 'Anonymous Candidate } } ' </h3> { candidate.user.email && } ( } <p className="text-gray-6 00"> { candidate.user.email } </p>"" { candidate.user.phoneNumber && } ( } <p className="text-gray-6 00"> { candidate.user.phoneNumber } </p>"" { candidate.user.location && } ( } <p className="text-gray-6 00"> { candidate.user.location } </p>"" { candidate.user.linkedinUrl && ( < } a } href= { candidate.user.linkedinUrl } target="_blank""" rel="noopener noreferrer""" className="text-blue-6 00 hover:text-blue-5 00""" >; LinkedIn Profile; </a> </div> { /* Professional Summary * } / } { candidate.parsedResume.summary && ( <div> <h4 className="mb-2 text-lg font-semibold text-gray-9 00">"" Professional Summary; </h4> <p className="text-gray-7 00 leading-relaxed" } > } "" { candidate.parsedResume.summary } </p> </div> { /* Skills * } / } { candidate.parsedResume.skills && candidate.parsedResume.skills.length > 0 && ( <div> <h4 className="mb-3 text-lg font-semibold text-gray-9 00">"" Skills; </h4> <div className="flex flex-wrap gap-2">"")))))))) { candidate.parsedResume.skills.map((skill, index() => ( <span } key= { index } className="rounded-full bg-blue-1 00 px-3 py-1 text-sm font-medium text-blue-8 00""" { skill } </span /> </div> </div> { /* Experience * } / } { candidate.parsedResume.experience && candidate.parsedResume.experience.length > 0 && ( <div> <h4 className="mb-3 text-lg font-semibold text-gray-9 00">"; " Professional Experience; </h4> <div className="space-y-4">"")) { candidate.parsedResume.experience.map((exp, index() => } ( } <div key= { index } className="border-l-2 border-blue-2 00 pl-4">"" <div className="flex flex-col sm: flex-row, sm:items-center, sm:justify-between">"" <h5 className="font-semibold text-gray-9 00"> { exp.title } </h5>"" <span className="text-sm text-gray-5 00"> { exp.duration } </span>"" </div> <p className="text-gray-7 00 font-medium"> { exp.company } </p>"" <p className="mt-1 text-gray-6 00 leading-relaxed"> { exp.description } </p>"" </div> </div> </div> { /* Education * } / } { candidate.parsedResume.education && candidate.parsedResume.education.length > 0 && ( <div> <h4 className="mb-3 text-lg font-semibold text-gray-9 00">"" Education; </h4> <div className="space-y-3">"")) { candidate.parsedResume.education.map((edu, index() => } ( } <div key= { index } className="border-l-2 border-green-2 00 pl-4">"" <div className="flex flex-col sm: flex-row, sm:items-center, sm:justify-between">"" <h5 className="font-semibold text-gray-9 00"> { edu.degree } </h5>"" <span className="text-sm text-gray-5 00"> { edu.year } </span>"" </div> <p className="text-gray-7 00"> { edu.institution } </p>"" </div> </div> </div> </div>) ) : ( /* Fallback to PDF viewer if (no parsed resume */ <div className="flex items-center justify-center">"" <iframe; src= ) { `$ { candidate.resumeUrl || candidate.user.resumeUl } #toolbar=0` } className="h-9 6 w-full rounded border""" title="Resume Preview""" </div> </div> </div> { /* Screening Questions & Answers * } / } { candidate.screeningAnswers && candidate.screeningAnswers.length > 0 && ( <div className="rounded-lg border border-gray-2 00 bg-white p-6">"" <h2 className="mb-4 text-xl font-semibold text-gray-9 00">Screening Questions</h2>"" <div className="space-y-4">"")) { candidate.screeningAnswers.map((qa, index() => } ( } <div key= { index } className="border-b border-gray-1 00 pb-4 last:border-b-0">"" <h3 className="mb-2 font-medium text-gray-9 00"> { qa.question } </h3>"" <p className="text-gray-7 00"> { qa.answer } </p>"" </div> </div> </div> { /* AI Score Breakdown * } / } { candidate.aiScore && ( <div className="rounded-lg border border-gray-2 00 bg-white p-6">"" <h2 className="mb-4 text-xl font-semibold text-gray-9 00">AI Match Analysis</h2> } "" { /* Score Overview * } / } <div className="mb-6 grid grid-cols-1 gap-4 md:grid-cols-4">"" <div className="text-center">"" <div className= { `text-2 xl font-bold $ { getScoreColor(candidate.aiScore.overal } ` } > { candidate.aiScore.overall } % </div> <div className="text-sm text-gray-6 00">Overall Match</div>"" </div> <div className="text-center">"" <div className= { `text-2 xl font-bold $ { getScoreColor(candidate.aiScore.skillsMath } ` } > { candidate.aiScore.skillsMatch } % </div> <div className="text-sm text-gray-6 00">Skills</div>"" </div> <div className="text-center">"" <div className= { `text-2 xl font-bold $ { getScoreColor(candidate.aiScore.experienceMath } ` } > { candidate.aiScore.experienceMatch } % </div> <div className="text-sm text-gray-6 00">Experience</div>"" </div> <div className="text-center">"" <div className= { `text-2 xl font-bold $ { getScoreColor(candidate.aiScore.educationMath } ` } > { candidate.aiScore.educationMatch } % </div> <div className="text-sm text-gray-6 00">Education</div>"" </div> </div> { /* Strengths and Gaps * } / } <div className="grid grid-cols-1 gap-6 md:grid-cols-2">"" { /* Strengths * } / } <div> <h3 className="mb-3 flex items-center text-lg font-medium text-green-7 00">"" <TrendingUp className="mr-2 h-5 w-5" />"; " Strengths; </h3>)))))) <ul className="space-y-2">)"" { candidate.aiScore.breakdown.strengths.map((strength, index() => } ( } <li key= { index } className="flex items-start">"" <CheckCircle className="mr-2 mt-0.5 h-4 w-4 text-green-5 00" />"" <span className="text-sm text-gray-7 00"> { strength } </span>"" </li> </ul> </div> { /* Gaps * } / } <div> <h3 className="mb-3 flex items-center text-lg font-medium text-orange-7 00">"" <AlertTriangle className="mr-2 h-5 w-5" />"" Areas for (Consideration; </h3> <ul className="space-y-2">"") ) { candidate.aiScore.breakdown.gaps.map((gap, index() => } ( } <li key= { index } className="flex items-start">"" <AlertTriangle className="mr-2 mt-0.5 h-4 w-4 text-orange-5 00" />"" <span className="text-sm text-gray-7 00"> { gap } </span>"" </li> </ul> </div> </div> { /* Recommendations * } / } { candidate.aiScore.breakdown.recommendations.length > 0 && ( <div className="mt-6">"" <h3 className="mb-3 flex items-center text-lg font-medium text-blue-7 00">"" <Award className="mr-2 h-5 w-5" />"" Recommendations; </h3> <ul className="space-y-2">"")) { candidate.aiScore.breakdown.recommendations.map((rec, index() => } ( } <li key= { index } className="flex items-start">"" <Eye className="mr-2 mt-0.5 h-4 w-4 text-blue-5 00" />"" <span className="text-sm text-gray-7 00"> { rec } </span>"" </li> </ul> </div> </div> { /* Cover Letter * } / } { candidate.coverLetter && ( <div className="rounded-lg border border-gray-2 00 bg-white p-6">"" <h2 className="mb-4 text-xl font-semibold text-gray-9 00">Cover Letter</h2>"" <div className="prose max-w-none" } > } "" <p className="whitespace-pre-wrap text-gray-7 00"> { candidate.coverLetter } </p>"" </div> </div> </div> { /* Sidebar * } / } <div className="space-y-6">"" { /* Job Applied For * } / } <div className="rounded-lg border border-gray-2 00 bg-white p-6">"" <h2 className="mb-4 text-lg font-semibold text-gray-9 00">Applied For</h2>"" <div> <h3 className="font-medium text-gray-9 00"> { candidate.job.title } </h3>"" <p className="text-sm text-gray-6 00"> { candidate.job.company } </p>"" <p className="text-sm text-gray-5 00"> { candidate.job.location } </p>"" <Link; href= { `/employers/job/$ { candidate.job. } d } ` } className="mt-2 inline-flex items-center text-sm text-blue-6 00 hover:text-blue-5 00""" <ExternalLink className="mr-1 h-3 w-3" />"; " View Job Details; </Link> </div> </div> { /* Contact Information * } / } <div className="rounded-lg border border-gray-2 00 bg-white p-6">"" <h2 className="mb-4 text-lg font-semibold text-gray-9 00">Contact Information</h2>"" <div className="space-y-3">"" <div className="flex items-center">"" <Mail className="mr-3 h-4 w-4 text-gray-4 00" />"" <a; href= { `mailto:$ { candidate.user.emal } ` } className="text-blue-6 00 hover:text-blue-5 00""" { candidate.user.email } </a> </div> { candidate.user.phoneNumber && ( <div className="flex items-center">"" <Phone className="mr-3 h-4 w-4 text-gray-4 00" />"" < } a } href= { `tel:$ { candidate.user.phoneNumbr } ` } className="text-blue-6 00 hover:text-blue-5 00""" { candidate.user.phoneNumber } </a> </div> { candidate.user.location && ( <div className="flex items-center">"" <MapPin className="mr-3 h-4 w-4 text-gray-4 00" / } > } "" <span className="text-gray-7 00"> { candidate.user.location } </span>"" </div> { candidate.user.linkedinUrl && ( <div className="flex items-center">"" <ExternalLink className="mr-3 h-4 w-4 text-gray-4 00" />"" < } a } href= { candidate.user.linkedinUrl } target="_blank""" rel="noopener noreferrer""" className="text-blue-6 00 hover:text-blue-5 00""" >; LinkedIn Profile; </a> </div> </div> </div> { /* Add Note * } / } <div className="rounded-lg border border-gray-2 00 bg-white p-6">"" <h2 className="mb-4 text-lg font-semibold text-gray-9 00">Add Note</h2>"" <div className="space-y-3">"" <textarea; value= { newNote } ))))) onChange= { ((e: any() => setNewNote(e.target.value() } } ) } placeholder="Add a note about this candidate.""" className="w-full rounded-md border border-gray-3 00 px-3 py-2 text-sm focus: border-blue-5 00, focus:outline-none, focus:ring-1, focus:ring-blue-5 00""" rows= { 4 } />; <button; onClick= { addNot } } e } disabled= { !newNote.trim() || addingNote } className="w-full rounded-lg bg-blue-6 00 px-4 py-2 text-white transition-colors hover: bg-blue-7 00, disabled:opacity-5 0""" { addingNote ? 'Adding.' : 'Add Note } } ' </button> </div> </div> { /* Existing Notes * } / } { candidate.notes && ( <div className="rounded-lg border border-gray-2 00 bg-white p-6">"" <h2 className="mb-4 text-lg font-semibold text-gray-9 00">Notes</h2>"" <div className="prose max-w-none" } > } "" <p className="whitespace-pre-wrap text-gray-7 00"> { candidate.notes } </p>"" </div> </div> { /* Quick Stats * } / } <div className="rounded-lg border border-gray-2 00 bg-white p-6">"" <h2 className="mb-4 text-lg font-semibold text-gray-9 00">Quick Stats</h2>"" <div className="space-y-3">"" <div className="flex justify-between">"" <span className="text-gray-6 00">Member Since</span>"" <span className="text-gray-9 00">"") { formatDistanceToNow(new Date(candidate.user.createdAt(), { addSuffix: true } } ) } </span> </div> <div className="flex justify-between">"" <span className="text-gray-6 00">Application Status</span>"" <span className= { `inline-flex rounded-full px-2 py-1 text-xs font-medium $ { getStatusColor(candidate.stat } >)` { candidate.status.charAt(0().toUpperCase() + candidate.status.slice(1 } ) } </span> </div> </div> </div> </div> </div> { /* Email Modal * } / } { showEmailModal && ( <div className="fixed inset-0 z-5 0 flex items-center justify-center bg-black bg-opacity-5 0">"" <div className="mx-4 w-full max-w-2 xl rounded-lg bg-white p-6 shadow-xl">"" <div className="mb-4 flex items-center justify-between">"" <h2 className="text-xl font-semibold text-gray-9 00">Send Email</h2>"" <button } ) onClick= { () => setShowEmailModal(false()) } className="text-gray-4 00 hover: text-gray-6 00""" <X className="h-6 w-6" />"" </button> </div> <div className="space-y-4">"" <div> <label className="block text-sm font-medium text-gray-7 00 mb-1">"", To: </label> <div className="text-sm text-gray-6 00 bg-gray-5 0 px-3 py-2 rounded-md">"" { candidate?.user.email } </div> </div> <div> <label className="block text-sm font-medium text-gray-7 00 mb-1">"" Subject: </label>; <input; type="text""" value= { emailSubject } onChange= { ((e: any() => setEmailSubject(e.target.value() } } ) } className="w-full rounded-md border border-gray-3 00 px-3 py-2 text-sm focus: border-blue-5 00 focus:outline-none, focus:ring-1, focus:ring-blue-5 00""" placeholder="Email subject""" </div> <div> <label className="block text-sm font-medium text-gray-7 00 mb-1">"", Message: </label>; <textarea; value= { emailMessage } onChange= { ((e: any() => setEmailMessage(e.target.value() } } ) } rows= { 8 } className="w-full rounded-md border border-gray-3 00 px-3 py-2 text-sm focus: border-blue-5 00, focus:outline-none, focus:ring-1, focus:ring-blue-5 00""" placeholder="Type your message here.""" </div> <div className="flex justify-end space-x-3 pt-4">"; " <button; onClick= { () => setShowEmailModal(false()) } className="rounded-lg border border-gray-3 00 px-4 py-2 text-gray-7 00 transition-colors hover:bg-gray-5 0""" >; Cancel; </button> <button; onClick= { sendEmai } } l } disabled= { !emailSubject.trim() || !emailMessage.trim() || sendingEmail } className="flex items-center rounded-lg bg-blue-6 00 px-4 py-2 text-white transition-colors hover: bg-blue-7 00, disabled:opacity-5 0""" { sendingEmail ? ( <div className="mr-2 h-4 w-4 animate-spin rounded-full border-b-2 border-white"></div>"" Sending.) ) : ( <Send className="mr-2 h-4 w-4" />"; " Send Email; </ } > } </button> </div> </div> </div> </div> </div> ))))))))))))))))))))))))))))))))))))))))))))))))))))