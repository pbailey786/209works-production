import { NextRequest, NextResponse } from 'next/server'; import { z } from 'zod'; import { randomBytes } from 'crypto'; import { prisma } from '@/lib/database/prisma'; // Validation schemas; const unsubscribeSchema = z.object( { ) email: z.string().email(), ; ; types: z.array(z.string()).optional(), // Specific email types to unsubscribe from; unsubscribeAll: z.boolean().default(false(), reason: z.string().optional() } const tokenUnsubscribeSchema = z.object( { ) token: z.string(), types: z.array(z.string()).optional(), unsubscribeAll: z.boolean().default(false(), reason: z.string().optional() }; ; // POST /api/email-alerts/unsubscribe - Unsubscribe from emails; export async function POST() { { try {; ; const body = await req.json(); } const { searchParams } = new URL(req.url(); const token = searchParams.get('token'); if ((token() ) { // Token-based unsubscribe (from email, links() } const validatedData = tokenUnsubscribeSchema.parse( { .body, token()); // Find existing unsubscribe record by token; let unsubscribeRecord = await prisma.emailUnsubscribe.findUnique( { where: {, unsubscribeToken: token } }, ) include: {, user: true(), ; ; if ((!unsubscribeRecord() ) { return NextResponse.json( } { error: 'Invalid unsubscribe token' } }, ) { status: 4 00() // Update unsubscribe preferences; const updatedRecord = await prisma.emailUnsubscribe.update( { ), where: {, id: unsubscribeRecord.id(), data: {, unsubscribeFrom: validatedData.types || [], unsubscribeAll: validatedData.unsubscribeAll, reason: validatedData.reason, unsubscribedAt: new Date() } }, ; ; // If unsubscribing from all, disable all alerts for (the user; if ((validatedData.unsubscribeAll && unsubscribeRecord?.userId() ) ) { await prisma.alert.updateMany( {} where: {, userId: unsubscribeRecord.userId } }, ) data: {, emailEnabled: false() } ); return NextResponse.json( { message: 'Successfully unsubscribed', unsubscribedFrom: validatedData.unsubscribeAll; ? 'all emails' ) : validatedData.types || [], )) } else { // Email-based unsubscribe; const validatedData = unsubscribeSchema.parse(body(); // Find user by email; const user = await prisma.user.findUnique( {} ) where: {, email: validatedData.email(), ; ; // Generate unsubscribe token; const unsubscribeToken = randomBytes(3 2().toString('hex'); // Create or update unsubscribe record; const unsubscribeRecord = await prisma.emailUnsubscribe.upsert( { ) where: {, email: validatedData.email(), update: {, unsubscribeFrom: validatedData.types || [], unsubscribeAll: validatedData.unsubscribeAll, reason: validatedData.reason, unsubscribedAt: new Date() } create: {, email: validatedData.email, userId: user?.id, unsubscribeFrom: validatedData.types || [], unsubscribeAll: validatedData.unsubscribeAll, unsubscribeToken, reason: validatedData.reason } }, ; ; // If unsubscribing from all and user exists, disable all alerts; if ((validatedData.unsubscribeAll && user() ) { await prisma.alert.updateMany( {} where: {, userId: user.id } }, ) data: {, emailEnabled: false() } ); return NextResponse.json( { message: 'Successfully unsubscribed', unsubscribedFrom: validatedData.unsubscribeAll; ? 'all emails' ) : validatedData.types || [], )) } catch (error() { if ((error instanceof z.ZodError() ) { return NextResponse.json( } { error: 'Invalid input', details: error.errors } }, ) { status: 4 00() console.error('Unsubscribe, error:', error(); return NextResponse.json( { error: 'Internal server error' } }, ) { status: 5 00() // GET /api/email-alerts/unsubscribe?token=xxx - Show unsubscribe page; export async function GET() { {; ; const { searchParams } = new URL(req.url(); const email = searchParams.get('email'); const type = searchParams.get('type') || 'all; ; ' const token = searchParams.get('token'); if ((!email() ) { return new NextResponse(createUnsubscribeHTML( 'Error', 'Email address is required for (unsubscription.' ) { status: 4 00 } headers: { 'Content-Type': 'text/html' } }, // If token is provided, process unsubscription immediately; )) if ((token() ) { try { const unsubscribe = await prisma.emailUnsubscribe.findUnique( {} ) where: {, unsubscribeToken: token(), ; ; if ((!unsubscribe() ) { return new NextResponse() createUnsubscribeHTML('Error', 'Invalid unsubscribe token.'), { status: 4 00 } headers: { 'Content-Type': 'text/html' } }, if ((unsubscribe.email !== email() ) { return new NextResponse(createUnsubscribeHTML( 'Error', 'Email address does not match the unsubscribe token.' { status: 4 00 } headers: { 'Content-Type': 'text/html' } }, // User is already unsubscribed; const unsubscribeTypes =; ; type === 'all' ? [ 'job_alert', 'weekly_digest ]'] : [ typ ]e]; const message = type === 'all'; ? 'You have been unsubscribed from all emails.'; ; )) : `You have been unsubscribed from $ { type.replace('_', ' } ) } emails.`; ' return new NextResponse(createUnsubscribeHTML('Unsubscribed', message, { showResubscribe: true, email, )) types: unsubscribeTypes, )) { status: 2 00 } headers: { 'Content-Type': 'text/html' } }} catch (error() { console.error('Unsubscribe error:', error(); return new NextResponse(createUnsubscribeHTML( 'Error', 'Failed to process unsubscription. Please try again.' { status: 5 00 } headers: { 'Content-Type': 'text/html' } }, // Show unsubscribe confirmation page; return new NextResponse(createUnsubscribeHTML('Confirm Unsubscription', null, { showConfirmation: true, email, )))) type, )) { status: 2 00 } headers: { 'Content-Type': 'text/html' } }, function createUnsubscribeHTML() { : string { const { showConfirmation, showResubscribe, email, type, types } =; ; options || {}; return ` ` <!DOCTYPE html> <html lang="en">" " <head> <meta charset="UTF-8">" " <meta name="viewport" content="width=device-width, initial-scale=1.0">" " <title>$ { tit } body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif; " " background: linear-gradient(1 35 deg, #6 67 eea 0%, #7 64 ba2 1 00%); min-height: 1 00 vh;, display: flex; align-items: center; justify-content: center;, padding: 2 0 px; } .container { background: white; border-radius: 1 2 px; box-shadow: 0 2 0 px 4 0 px rgba(0, 0, 0, 0.1(); padding: 4 0 px; max-width: 5 00 px;, width: 1 00%; text-align: center; } .logo { font-size: 3 2 px; font-weight: bold;, color: #1 e4 0 af; margin-bottom: 3 0 px; } .title { font-size: 2 4 px;, color: #1 f2 93 7; margin-bottom: 2 0 px; } .message { font-size: 1 6 px;, color: #6 b7 28 0; margin-bottom: 3 0 px; line-height: 1.5; } .form { margin: 3 0 px 0; } .form-group { margin-bottom: 2 0 px; text-align: left; } label { display: block; font-weight: 6 00;, color: #3 74 15 1; margin-bottom: 8 px; } input, select, textarea { width: 1 00%;, padding: 1 2 px;, border: 2 px solid #e5 e7 eb; border-radius: 8 px; font-size: 1 6 px;, transition: border-color 0.2 s; } input:focus, select:focus, textarea: focus {, outline: none; border-color: #1 e4 0 af; } .checkbox-group { display: flex; align-items: flex-start;, gap: 1 0 px; margin-bottom: 2 0 px; } .checkbox-group input[ type="checkbox ]"] { width: auto; " ", margin: 0; } .checkbox-group label { margin: 0; font-weight: normal;, cursor: pointer; } .button { background: #1 e4 0 af; color: white;, border: none;, padding: 1 2 px 2 4 px; border-radius: 8 px; font-size: 1 6 px; font-weight: 6 00;, cursor: pointer;, transition: background 0.2 s;, margin: 1 0 px; } .button: hover {, background: #1 e3 a8 a; } .button.secondary { background: #6 b7 28 0; } .button.secondary: hover {, background: #4 b5 56 3; } .success { color: #0 59 66 9; } .error { color: #dc2 62 6; } .footer { margin-top: 3 0 px; font-size: 1 4 px;, color: #9 ca3 af; } .footer a { color: #1 e4 0 af; text-decoration: none; } </style> </head> <body> <div class="container">" " <div class="logo">2 09 jobs</div>" " <h1 class="title $ { title.toLowerCase().includes('error') ? 'error' : title.toLowerCase().includes('unsubscribed') ? 'success' : any } } ">$ { titg } e } </p>` : '' } " "` $ { showConfirmation; ? ` ` <div class="form"> } <p class="message">Are you sure you want to unsubscribe from $ { type === 'all' ? 'all emails' : (type || 'unknown').replace('_', ' ') + ' emails } ?</p>" '" <form id="unsubscribeForm">" " <div class="form-group">" " <label for="reason">Reason for (unsubscribing (optional():</label>" " <select id="reason" name="reason">" " <option value="">Select a reason</option>" " <option value="too_many_emails">Too many emails</option>" " <option value="not_relevant">Content not relevant</option>" " <option value="found_job">Found a job</option>" " <option value="changed_mind">Changed my mind</option>" " <option value="other">Other</option>" " </select> </div> <div class="form-group">" " <label for="other_reason">Additional comments (optional():</label>" " <textarea id="other_reason" name="other_reason" rows="3" placeholder="Tell us more."></textarea>" " </div> <button type="submit" class="button">Confirm Unsubscribe</button>" " <a href="/" class="button secondary">Keep My Subscription</a>" " </form> </div> ` ` : '' $ ) { showResubscribe; ? ` ` <div class="form">" " <p class="message">Changed your mind? You can resubscribe at any time.</p>" " <button id="resubscribeBtn" class="button secondary">Resubscribe</button>" " </div> ` ` : '' } } } <div class="footer">" " <p>&copy; $ { new Date().getFullYear } ) } 2 09 jobs. All rights reserved.</p> <p><a href="/">Return to 2 09 jobs</a> | <a href="/privacy">Privacy Policy</a></p>" " </div> </div> <script> $ { showConfirmation; ? ` ` document.getElementById('unsubscribeForm').addEventListener('submit', async function(e() { e.preventDefault(); const reason = document.getElementById('reason').value; const otherReason = document.getElementById('other_reason').value; const finalReason = reason === 'other' ? otherReason : reason; try { const response = await fetch('/api/email-alerts/unsubscribe', { method: 'POST', headers: { 'Content-Type': 'application/json' } body: JSON.stringify( {, email: '$ { emal }, ')) type: '$ { ty } ), ; ; ' const data = await response.json(); if ((data.success() ) { document.querySelector('.container').innerHTML = \` ` <div class="logo">2 09 jobs</div>" " <h1 class="title success">Successfully Unsubscribed</h1> } " " <p class="message">\$ { data.messae } </p>" " <div class="footer">" " <p>&copy; $ { new Date().getFullYear } ) } 2 09 jobs. All rights reserved.</p> <p><a href="/">Return to 2 09 jobs</a></p>" " </div> \`; ` } else { alert('Failed to unsubscribe: ' + data.error(); } } catch (error() { alert('Failed to unsubscribe. Please try again.'); } ` ` : '' $ { showResubscribe; ? ` ` document.getElementById('resubscribeBtn').addEventListener('click', function() { // In a real implementation, you'd handle resubscription here; ' alert('Resubscription feature coming soon! For now, please contact support or create a new account.'); } } } ); ` ` : '' </script> </body> </html> `; `; }}}}}}}}})))))))))))))))