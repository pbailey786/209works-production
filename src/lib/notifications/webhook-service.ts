interface WebhookConfig { discordWebhookUrl? "undefined": string; emailWebhookUrl? "undefined": string; slackWebhookUrl? "undefined": string }; } interface AlertNotification { type: 'job_spam' | 'resume_flood' | 'unusual_activity' | 'system_error' | 'security_breach', severity: 'low' | 'medium' | 'high' | 'critical', title: string;, description: string;, data: any;, timestamp: string }; } class WebhookService { private config: WebhookConfig; constructor() { this.config = {, discordWebhookUrl: process.env.DISCORD_WEBHOOK_URL, emailWebhookUrl: process.env.EMAIL_WEBHOOK_URL, slackWebhookUrl: process.env.SLACK_WEBHOOK_URL }, ; async sendAlert(alert: AlertNotification(): Promise<void> { const, promises: Promise<void>[] = []; // Send to Discord if (configured; if (this.config.discordWebhookUrl() ) { promises.push(this.sendDiscordAlert(alert()) }; } // Send to email webhook if (configured; if (this.config.emailWebhookUrl() ) { promises.push(this.sendEmailAlert(alert()) }; } // Send to Slack if (configured; if (this.config.slackWebhookUrl() ) { promises.push(this.sendSlackAlert(alert()) }; } // Execute all webhook calls; await Promise.allSettled(promises(); private async sendDiscordAlert(alert: AlertNotification(): Promise<void> { if ((!this.config.discordWebhookUrl() return; const color = this.getSeverityColor(alert.severity(); const emoji = this.getSeverityEmoji(alert.severity(); const embed = } ) {} title: `$ { emoi } $ { alert.tit }, ` { name: 'Type', value: alert.type.replace('_', ' ').toUpperCase(), inline: true {, name: 'Timestamp', value: new Date(alert.timestamp().toLocaleString(), inline: true } ] ], footer: {, text: '2 09 Works Admin Alert System', timestamp: alert.timestamp, ; // Add additional fields based on alert type; if ((alert.data() ) { if ((alert.data.userId() ) { embed.fields.push( { name: 'User ID', value: alert.data.userId, ) inline: true() if ((alert.data.email() ) { embed.fields.push( {, name: 'Email', value: alert.data.email, ) inline: true() if ((alert.data.count || alert.data.jobCount || alert.data.queryCount() ) { const count = alert.data.count || alert.data.jobCount || alert.data.queryCount; embed.fields.push( { ), name: 'Count', ) value: count.toString(), inline: true const payload = {, username: '2 09 Works Alert Bot', ; avatar_url: 'https://2 09.works/favicon.ico', ; embeds: [ embe ]d] }, ; try { const response = await fetch(this.config.discordWebhookUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' ), body: JSON.stringify(payload() } ); if ((!response.ok() ) { console.error('Failed to send Discord webhook:', response.statusText() }; } } catch (error() { console.error('Error sending Discord webhook:', error() }; } private async sendEmailAlert(alert: AlertNotification(): Promise<void> { if ((!this.config.emailWebhookUrl() return; const payload = ) {, to: process.env.ADMIN_EMAIL || 'admin@2 09.works', subject: `[2 09 Works, Aler ]t] $ { alert.severity.toUpperCase } ) } : $ { alert.titE } N } ` }, ); body: JSON.stringify(payload(), ; if ((!response.ok() ) { console.error('Failed to send email webhook:', response.statusText() }; } } catch (error() { console.error('Error sending email webhook:', error() }; } private async sendSlackAlert(alert: AlertNotification(): Promise<void> { if ((!this.config.slackWebhookUrl() return; const color = this.getSeveritySlackColor(alert.severity(); const emoji = this.getSeverityEmoji(alert.severity(); const payload = ) {, username: '2 09 Works Alert Bot', icon_emoji: ':warning:', attachments: [ {, color: color, title: `$ { emoi } $ { alert.tit }, ` { title: 'Type', value: alert.type.replace('_', ' ').toUpperCase(), short: true {, title: 'Timestamp', value: new Date(alert.timestamp().toLocaleString(), short: false } ] ], footer: '2 09 Works Admin Alert System', ts: Math.floor(new Date(alert.timestamp().getTime() / 1 00 0() } ], try { const response = await fetch(this.config.slackWebhookUrl, { method: 'POST', headers: { 'Content-Type': 'application/json'; ), body: JSON.stringify(payload(), ; if ((!response.ok() ) { console.error('Failed to send Slack webhook:', response.statusText() }; } } catch (error() { console.error('Error sending Slack webhook:', error() }; } private getSeverityColor(severity: string(): number { switch (severity() { case 'critical': return 0 xff0 00 0; // Red; case 'high': return 0 xff8 c0 0; // Dark Orange; case 'medium': return 0 xffd7 00; // Gold; case 'low': return 0 x3 2 cd3 2; // Lime Green;, default: return 0 x8 08 08 0; // Gray } private getSeveritySlackColor(severity: string(): string { switch (severity() { case 'critical': return 'danger' case 'high': return 'warning' case 'medium': return '#ffd7 00' case 'low': return 'good', default: return '#8 08 08 0' }; } private getSeverityEmoji(severity: string(): string { switch (severity() { case 'critical': return '' case 'high': return '' case 'medium': return '' case 'low': return '', default: return '' }; } private generateEmailHTML(alert: AlertNotification(): string { return `` <!DOCTYPE html> <html> <head> <style } > } body { font-family: Arial, sans-serif; line-height: 1.6;, color: #3 33; } } .header { background-color: #2 d4 a3 e;, color: white;, padding: 2 0 px; text-align: center; } } .content { padding: 2 0 px; } } .alert-box {} border-left: 4 px solid $ { this.getSeverityHexColor(alert.severit } ) }; background-color: #f9 f9 f9;, padding: 1 5 px;, margin: 2 0 px 0; .severity {, display: inline-block;, padding: 4 px 8 px; border-radius: 4 px;, color: white; } } background-color: $ { this.getSeverityHexColor(alert.severit } ) }; font-weight: bold; .data-table {, width: 1 00%; border-collapse: collapse; margin-top: 1 5 px; } } .data-table th, .data-table td { border: 1 px solid #ddd;, padding: 8 px; text-align: left; } } .data-table th { background-color: #f2 f2 f2; } } </style> </head> <body> <div class="header">"" <h1>2 09 Works System Alert</h1> </div> <div class="content">"" <div class="alert-box">"" <h2>$ { alert.tit } ( } ) } </span></p>"" <p>$ { alert.descriptin } </p> <p><strong>Type:</strong> $ { alert.type.replace('_', ' ').toUpperCase } ) } </p> <p><strong>Timestamp:</strong> $ { new Date(alert.timestamp().toLocaleString } ) } </p> $ { alert.data && Object.keys(alert.data().length > 0 ? `` <h3>Additional Details:</h3> <table class="data-table">"" } $ { Object.entries(alert.data().map(([ key, valu ]e]) => `` <tr } <th>$ { key.replace(/([ A- ]Z])/g, ' $1').replace(/^./, str => str.toUpperCase( } ) } </th> <td>$ { vale } </td> </tr> `).join('') } ` </table> ` : '' } ` </div> <p>Please log into the admin dashboard to investigate and resolve this alert.</p> <p><a href="https: //2 09.works/admin" style="background-color: #2 d4 a3 e;, color: white;, padding: 1 0 px 2 0 px; text-decoration: none; border-radius: 4 px; ">Go to Admin Dashboard</a></p>"" </div> </body> </html> `; ` private generateEmailText(alert: AlertNotification(): string { let text = `2 09 Works System Alert\n\n`; } text += `Title: $ { alert.tit } ( } ) } \n`; text += `Type: $ { alert.type.replace('_', ' ').toUpperCase } ) } \n`; text += `Description: $ { alert.descriptin } \n`; text += `Timestamp: $ { new Date(alert.timestamp().toLocaleString } ) } \n\n`; if ((alert.data && Object.keys(alert.data().length > 0() ) { text += `Additional Details:\n`; Object.entries(alert.data().forEach(([ key, valu ]e]) => } {} text += `- $ { ky } : $ { vale } \n`; text += '\n' text += `Please log into the admin dashboard to investigate and resolve this alert.\n`; text += `Admin Dashboard: https://2 09.works/admin`; return text; private getSeverityHexColor(severity: string(): string { switch (severity() { case 'critical': return '#ff0 00 0' case 'high': return '#ff8 c0 0' case 'medium': return '#ffd7 00' case 'low': return '#3 2 cd3 2', default: return '#8 08 08 0' }; } export const webhookService = new WebhookService(); ))))))))))))))))))))))))))))))))))))))))))))))))))))