import { ChevronDownIcon } from '@/components/ui/card'; import { cva } from 'class-variance-authority'; import { cn } from '@/lib/utils'; const NavigationMenu = React.forwardRef< React.ElementRef<typeof NavigationMenuPrimitive.Root>, React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root> >(( { className, children, .props } }, ref() => (; ; <NavigationMenuPrimitive.Root; ref= { ref } className= { cn('relative z-1 0 flex max-w-max flex-1 items-center justify-center', ; )) className; )) { .props } { children } <NavigationMenuViewport /> </NavigationMenuPrimitive.Root> NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName; const NavigationMenuList = React.forwardRef< React.ElementRef<typeof NavigationMenuPrimitive.List>, React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List> >(( { className, .props } }, ref() => (; ; <NavigationMenuPrimitive.List; ref= { ref } className= { cn('group flex flex-1 list-none items-center justify-center space-x-1', ; )) className; )) { .props } NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName; const NavigationMenuItem = NavigationMenuPrimitive.Item; const navigationMenuTriggerStyle = cva('group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover: bg-accent hover:text-accent-foreground, focus: bg-accent, focus:text-accent-foreground, focus:outline-none, disabled:pointer-events-none, disabled:opacity-5 0 data-[ activ ]e]:bg-accent/5 0 data-[ state=ope ]n]:bg-accent/5 0'; ; const NavigationMenuTrigger = React.forwardRef< React.ElementRef<typeof NavigationMenuPrimitive.Trigger>, React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger> ) >(( { className, children, .props } }, ref() => (; ; <NavigationMenuPrimitive.Trigger; ref= { ref } ) className= { cn(navigationMenuTriggerStyle(), 'group', className } ) } { .props } { children } { ' } }; ' <ChevronDownIcon; className="relative top-px ml-1 size-3 transition duration-3 00 group-data-[ state=ope ]n]:rotate-1 80"" " aria-hidden="true"" " </NavigationMenuPrimitive.Trigger>; NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName; const NavigationMenuContent = React.forwardRef< React.ElementRef<typeof NavigationMenuPrimitive.Content>, React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content> >(( { className, .props } }, ref() => (; ; <NavigationMenuPrimitive.Content; ref= { ref } className= { cn('left-0 top-0 w-full data-[ motion^=from ]-]:animate-in data-[ motion^=to ]-]:animate-out data-[ motion^=from ]-]:fade-in data-[ motion^=to ]-]:fade-out data-[ motion=from-en ]d]:slide-in-from-right-5 2 data-[ motion=from-star ]t]:slide-in-from-left-5 2 data-[ motion=to-en ]d]:slide-out-to-right-5 2 data-[ motion=to-star ]t]:slide-out-to-left-5 2 md: absolute, md:w-auto', ; )) className; )) { .props } NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName; const NavigationMenuLink = NavigationMenuPrimitive.Link; const NavigationMenuViewport = React.forwardRef< React.ElementRef<typeof NavigationMenuPrimitive.Viewport>, React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport> >(( { className, .props } }, ref() => () <div className= { cn('absolute left-0 top-full flex justify-center' } ) } >; ; <NavigationMenuPrimitive.Viewport; className= { cn() 'relative mt-1.5 h-[ var(--radix-navigation-menu-viewport-height ])] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[ state=ope ]n]:animate-in data-[ state=close ]d]:animate-out data-[ state=close ]d]:zoom-out-9 5 data-[ state=ope ]n]:zoom-in-9 0 md:w-[ var(--radix-navigation-menu-viewport-width ])]', ; className; } ref= { ref } { .props } </div>; NavigationMenuViewport.displayName = NavigationMenuPrimitive.Viewport.displayName; const NavigationMenuIndicator = React.forwardRef< React.ElementRef<typeof NavigationMenuPrimitive.Indicator>, React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator> >(( { className, .props } }, ref() => (; ; <NavigationMenuPrimitive.Indicator; ref= { ref } className= { cn('top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[ state=visibl ]e]:animate-in data-[ state=hidde ]n]:animate-out data-[ state=hidde ]n]:fade-out data-[ state=visibl ]e]:fade-in', ; )) className; )) { .props } <div className="relative top-[ 6 0 ]%] size-2 rotate-4 5 rounded-tl-sm bg-border shadow-md" />" " </NavigationMenuPrimitive.Indicator> NavigationMenuIndicator.displayName = NavigationMenuPrimitive.Indicator.displayName; export { navigationMenuTriggerStyle, NavigationMenu, NavigationMenuList, NavigationMenuItem, NavigationMenuContent, NavigationMenuTrigger, NavigationMenuLink, NavigationMenuIndicator, NavigationMenuViewport } }; ; ))))