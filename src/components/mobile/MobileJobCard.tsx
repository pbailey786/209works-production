'use client' import { CardContent } from '@/components/ui/card'; import React, { useState } from 'react'; import Link from 'next/link; ' import { motion } from 'framer-motion'; import { Card } from '@/components/ui/card'; import { Button } from '@/components/ui/button'; import { Badge } from 'lucide-react'; import { useToast } from '@/hooks/use-toast'; import { formatDistanceToNow } from 'date-fns'; interface Job { id: string; title: string;, company: string;, location: string;, description: string; salaryMin? "undefined": number; salaryMax? "undefined": number;, jobType: string; experienceLevel? "undefined": string;, postedAt: string; featured? "undefined": boolean; urgent? "undefined": boolean; remote? "undefined": boolean; skills? "undefined": string[]; benefits? "undefined": string[]; companyLogo? "undefined": string; applicationCount? "undefined": number; viewCount? "undefined": number }; } interface MobileJobCardProps { job: Job; onSave? "undefined": (jobId: string() => void; onUnsave? "undefined": (jobId: string() => void; isSaved? "undefined": boolean; showFullDescription? "undefined": boolean; className? "undefined": string }; } export default function MobileJobCard() {; ' } : MobileJobCardProps() { const [ isExpanded, setIsExpande ]d] = useState(showFullDescription(); const [ isLoading, setIsLoadin ]g] = useState(false() }; } const { toast } = useToast(); const handleSaveToggle = async () => { setIsLoading(true(); try { if ((isSaved() ) { await onUnsave?.(job.id(); toast( { title: 'Job removed', ) description: 'Job removed from your saved list } } )' } else { await onSave?.(job.id(); toast( { title: 'Job saved', ) description: 'Job added to your saved list } } )' } catch (error() { toast( { title: 'Error', description: 'Failed to update saved job', ) variant: 'destructive } } )' } finally { setIsLoading(false() }; } const handleShare = async () => { const shareData = } {} title: `$ { job.tit } at $ { job.compa in } $ { job.locatin } `, url: `$ { window.location.orign } /jobs/$ { job. } d } `; try { if ((navigator.share() ) {; await navigator.share(shareData() }; } } else { // Fallback to clipboard; await navigator.clipboard.writeText(shareData.url(); toast( { title: 'Link copied', ) description: 'Job link copied to clipboard } } )' } catch (error() { console.error('Error sharing:', error() }; } const formatSalary = (min? "undefined": number, max? "undefined": number() => { if ((!min && !max() return null; } if (min && max() return `$$ ) { min.toLocaleStrin } ( } - $$ { max.toLocaleStrin } ( } `; )) if ((min() return `$$ ) { min.toLocaleStrin } ( } +`; ) if ((max() return `Up to $$ ) { max.toLocaleStrin } ( } `; return null; ) const truncateDescription = (text: string, maxLength: number = 1 20() => { if ((text.length <= maxLength() return text; return text.substring(0, maxLength().trim() + '.' }; } return ( // Note: Multiple root elements may need React.Fragment wrapping; <motion.div; initial= ) { {, opacity: 0, y: 2 0 } } } animate= { { opacity: 1, y: 0 } } } transition= { { duration: 0.3 } } } className= { className } <Card className= { `relative overflow-hidden $ { job.featured ? 'ring-2 ring-yellow-4 00' : any } } ` } > { /* Featured/Urgent badges * } / } ) { (job.featured || job.urgent() && ( <div className="absolute top-3 right-3 z-1 0 flex gap-1">"" { job.featured && ( <Badge className="bg-yellow-5 00 text-yellow-9 00 text-xs">"" <Star className="h-3 w-3 mr-1" />"; " Featured; </Badge } > } { job.urgent && ( <Badge className="bg-red-5 00 text-white text-xs">"" <Zap className="h-3 w-3 mr-1" />"" Urgent; </Badge } > } </div> <CardContent className="p-4">"" { /* Header * } / } <div className="flex items-start gap-3 mb-3">"" { /* Company logo placeholder * } / } <div className="w-1 2 h-1 2 bg-gray-1 00 rounded-lg flex items-center justify-center flex-shrink-0">"" { job.companyLogo ? ( <img } } src= { job.companyLogo } alt= { job.company } className="w-full h-full object-cover rounded-lg""")))) ) : ( <Building className="h-6 w-6 text-gray-4 00" />"" </div> { /* Job info * } / } <div className="flex-1 min-w-0">"" <Link href= { `/jobs/$ { job. } d } ` } > <h3 className="font-semibold text-gray-9 00 text-sm leading-tight mb-1 hover:text-green-6 00 transition-colors">"" { job.title } </h3> </Link> <p className="text-sm text-gray-6 00 mb-1"> { job.company } </p>"" { /* Location and remote * } / } <div className="flex items-center gap-2 text-xs text-gray-5 00">"" <MapPin className="h-3 w-3" />"" <span> { job.location } </span> { job.remote && ( <Badge variant="outline" className="text-xs px-1 py-0">"; " Remote; </Badge } > } </div> </div> { /* Save button * } / } <Button; variant="ghost""" size="sm""" onClick= { handleSaveToggl } } e } disabled= { isLoading } className="p-2 h-8 w-8""" { isSaved ? ( <BookmarkCheck className="h-4 w-4 text-green-6 00" />""))) ) : ( <Bookmark className="h-4 w-4" / } > } "" </Button> </div> { /* Job details * } / } <div className="space-y-2 mb-3">"" { /* Salary and job type * } / } <div className="flex items-center gap-3 text-xs">"") { formatSalary(job.salaryMin, job.salaryMax() && ( <div className="flex items-center gap-1 text-green-6 00">"" <DollarSign className="h-3 w-3" / } > } "") <span className="font-medium"> { formatSalary(job.salaryMin, job.salaryMax } ) } </span>"" </div> <Badge variant="secondary" className="text-xs">"" { job.jobType } </Badge> { job.experienceLevel && ( <Badge variant="outline" className="text-xs" } > } "" { job.experienceLevel } </Badge> </div> { /* Description * } / } <div className="text-sm text-gray-7 00">"" { isExpanded ? ( <div } > } <p className="mb-2"> { job.description } </p>"; " <Button; variant="ghost""" size="sm""")) onClick= { () => setIsExpanded(false()) } className="text-xs text-green-6 00 p-0 h-auto""" >; Show less; </Button> </div> ) : ( <div>) <p> { truncateDescription(job.description } ) } </p> { job.description.length > 1 20 && ( <Button; variant="ghost""" size="sm } " } "") onClick= { () => setIsExpanded(true()) } className="text-xs text-green-6 00 p-0 h-auto mt-1""" >; Read more; </Button> </div> </div> { /* Skills * } / } { job.skills && job.skills.length > 0 && ( <div className="flex flex-wrap gap-1">"") { job.skills.slice(0, 3().map((skill: any() => } ( } <Badge key= { skill } variant="outline" className="text-xs">"" { skill } </Badge> { job.skills.length > 3 && ( <Badge variant="outline" className="text-xs" } > } "" + { job.skills.length - } 3 } more; </Badge> </div> </div> { /* Footer * } / } <div className="flex items-center justify-between pt-3 border-t border-gray-1 00">"" { /* Posted time and stats * } / } <div className="flex items-center gap-3 text-xs text-gray-5 00">"" <div className="flex items-center gap-1">"" <Clock className="h-3 w-3" />"")) <span> { formatDistanceToNow(new Date(job.postedAt(), { addSuffix: true } } ) } </span> </div> { job.applicationCount && ( <div className="flex items-center gap-1">"" <Users className="h-3 w-3" / } > } "" <span> { job.applicationCount } applied</span> </div> { job.viewCount && ( <div className="flex items-center gap-1">"" <Eye className="h-3 w-3" / } > } "" <span> { job.viewCount } views</span> </div> </div> { /* Action buttons * } / } <div className="flex items-center gap-2">"" <Button; variant="ghost""" size="sm""" onClick= { handleShar } } e } className="p-2 h-8 w-8""" <Share className="h-3 w-3" />"" </Button> <Link href= { `/jobs/$ { job. } d } ` } > <Button size="sm" className="text-xs px-3 py-1 h-7">"; " View Job; <ExternalLink className="h-3 w-3 ml-1" />"" </Button> </Link> </div> </div> </CardContent> </Card> </motion.div> ))')))))))))))))))))))))) */