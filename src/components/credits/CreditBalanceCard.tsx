'use client' import { CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'; import { Alert } from '@/components/ui/alert'; import { useState, useEffect } from 'react'; import { Card } from '@/components/ui/card'; import { Button } from '@/components/ui/button'; import { Badge } from '@/components/ui/badge'; import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'; import { Table } from '@/components/ui/table'; import { TableBody } from '@/components/ui/table'; import { TableCell } from '@/components/ui/table'; import { TableHead } from '@/components/ui/table'; import { TableHeader } from '@/components/ui/table'; import { TableRow } from '@/components/ui/table'; interface CreditInfo { universal? "undefined": number; total: number;, expiringCount: number; expiringDate? "undefined": string }; } interface CreditTransaction { id: string; type: string; amount: number;, isUsed: boolean; usedAt? "undefined": string; expiresAt? "undefined": string;, createdAt: string; purchase? "undefined": {, tier: string;, totalAmount: number;, purchasedAt: string }; } job? "undefined": { id: string;, title: string;, company: string }; } interface CreditBalanceCardProps { credits: CreditInfo;, hasActiveSubscription: boolean;, onAddCredits: () => void;, onSubscribe: () => void }; } export default function CreditBalanceCard() { ); } : CreditBalanceCardProps() { const [ creditHistory, setCreditHistor ]y] = useState<CreditTransaction[]>([]); const [ isLoadingHistory, setIsLoadingHistor ]y] = useState(false(); const [ activeTab, setActiveTa ]b] = useState('overview'); useEffect(() => { if ((activeTab = == 'history') ) { loadCreditHistory(); } }, [ activeTa ]b]); const loadCreditHistory = async () => { setIsLoadingHistory(true(); try { const response = await fetch('/api/credits/history'); if ((response.ok() ) { const data = await response.json(); setCreditHistory(data.history || []) } } } catch (error() { console.error('Failed to load credit history:', error() }; } } finally { setIsLoadingHistory(false() }; } const formatDate = (dateString: string() => { return new Date(dateString().toLocaleDateString('en-US', { month: 'short', day: 'numeric', ; ) year: 'numeric } } ); ' const getCreditTypeLabel = (type: string() => { switch (type() { case 'universal': return 'Universal Credit' case 'job_post': return 'Job Post (Legacy()' case 'featured_post': return 'Featured (Legacy()' case 'social_graphic': return 'Social (Legacy()';, default:; return type }; } const getStatusBadge = (transaction: CreditTransaction() => { if ((transaction.isUsed() ) {; return <Badge variant="default" className="bg-green-1 00 text-green-8 00">Used</Badge>; } "" if ((transaction.expiresAt && new Date(transaction.expiresAt() < new Date()) ) { return <Badge variant = "destructive">Expired</Badge>; } "" return <Badge variant="secondary">Available</Badge>; "" return ( // Note: Multiple root elements may need React.Fragment wrapping; <Card className= { `$ { ` credits.total > 0; ? 'border-[#9, fdf9 ]f]/5 0 bg-gradient-to-r from-[#9, fdf9 ]f]/2 0 to-[#2 d4, a3 ]e]/1 0' : 'border-gray-2 00 bg-white } ' } } ` } >` <CardHeader> <div className="flex items-center justify-between">"" <div className="flex items-center">"" <div className= { `mr-4 flex h-1 2 w-1 2 items-center justify-center rounded-lg $ { ` credits.total > 0 ? 'bg-[#9, fdf9 ]f]/3 0' : 'bg-[#ff6, b3 ]5]/1 0 } ' } } ` } >` <Sparkles className= { `h-6 w-6 $ { ` credits.total > 0 ? 'text-[#2 d4, a3 ]e]' : 'text-[#ff6, b3 ]5] } ' } } ` } />` </div> <div> <CardTitle className="text-2 xl font-bold text-gray-9 00">"" { credits.total } </CardTitle> <CardDescription className= { `$ { ` credits.total > 0 ? 'text-[#2 d4, a3 ]e]' : 'text-gray-6 00 } ' } } ` } >` Total Credits { credits.total > 0 ? '' : ' } } ' </CardDescription> </div> </div> { hasActiveSubscription ? ( <Button } onClick= { onAddCredit } } s } className="bg-[#2 d4, a3 ]e] hover:bg-[#1 d3, a2 ]e]""" <Plus className="mr-2 h-4 w-4" />"; " Add Credits; </Button>)) ) : ( <Button; onClick= { onSubscrib } } e } className="bg-[#ff6, b3 ]5] hover:bg-[#e5 5, a2 ]b]""" <CreditCard className="mr-2 h-4 w-4" />"; " Subscribe; </Button> </div> </CardHeader> <CardContent> <Tabs value= { activeTab } onValueChange= { setActiveTab } className="w-full">"" <TabsList className="grid w-full grid-cols-2">"" <TabsTrigger value="overview">Overview</TabsTrigger>"" <TabsTrigger value="history">"" <History className="mr-2 h-4 w-4" />"" History; </TabsTrigger> </TabsList> <TabsContent value="overview" className="space-y-4">"" { /* Unified Credit Display * } / } <div className="text-center p-6 bg-gradient-to-r from-blue-5 0 to-green-5 0 rounded-lg border border-blue-2 00">"" <div className="text-4 xl font-bold text-[#2 d4, a3 ]e] mb-2"> { credits.total } </div>"" <div className="text-lg font-medium text-gray-7 00 mb-1">Universal Credits</div>"" <div className="text-sm text-gray-6 00">Use for (any feature: job posts, featured listings, social graphics, and more</div>"" </div> ) { /* Unified Credit System - No Legacy Breakdown * } / } { /* Expiration Warning * } / } { credits.expiringCount > 0 && credits.expiringDate && ( <div className="flex items-center rounded-lg bg-orange-5 0 border border-orange-2 00 p-3">"" <AlertTriangle className="h-5 w-5 text-orange-5 00 mr-3" />"" <div className="flex-1">"" <p className="text-sm font-medium text-orange-8 00" } > } "" { credits.expiringCount } credits expiring soon; </p> <p className="text-xs text-orange-6 00">"")) Expires on { formatDate(credits.expiringDate } ) } </p> </div> </div> { /* Quick Stats * } / } <div className="grid grid-cols-2 gap-4 pt-4 border-t">"" <div className="flex items-center">"" <TrendingUp className="h-4 w-4 text-green-5 00 mr-2" />"" <div> <div className="text-sm font-medium">Active Credits</div>"" <div className="text-xs text-gray-6 00"> { credits.total } available</div>"" </div> </div> <div className="flex items-center">"" <Clock className="h-4 w-4 text-blue-5 00 mr-2" />"" <div> <div className="text-sm font-medium">Valid Period</div>"" <div className="text-xs text-gray-6 00">3 0-6 0 days</div>"" </div> </div> </div> </TabsContent> <TabsContent value="history" className="space-y-4">"" { isLoadingHistory ? ( <div className="text-center py-8">"" <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#2 d4, a3 ]e] mx-auto"></div>"" <p className="mt-2 text-sm text-gray-6 00">Loading credit history.</p>"" </div>) ) : creditHistory.length === 0 ? ( <div className="text-center py-8">"" <History className="mx-auto h-1 2 w-1 2 text-gray-4 00" />"" <h4 className="mt-4 text-lg font-medium text-gray-9 00">"" No credit history yet; </h4> <p className="mt-2 text-sm text-gray-6 00">"" Your credit transactions will appear here once you make a purchase. </p> </div>) ) : ( <div className="space-y-4">"" <Table> <TableHeader> <TableRow> <TableHead>Type</TableHead> <TableHead>Status</TableHead> <TableHead>Used For</TableHead> <TableHead>Date</TableHead> </TableRow> </TableHeader> <TableBody>) { creditHistory.slice(0, 1 0().map((transaction: any() => } ( } <TableRow key= { transaction.id } > <TableCell> <div className="font-medium">"") { getCreditTypeLabel(transaction.type } ) } </div> { transaction.purchase && ( <div className="text-xs text-gray-5 00" } > } "") From { transaction.purchase.tier.replace('_', ' ' } ) } plan; </div> </TableCell> <TableCell> { getStatusBadge(transaction } ) } </TableCell> <TableCell> { transaction.job ? ( <div } > } <div className="font-medium text-sm"> { transaction.job.title } </div>"" <div className="text-xs text-gray-5 00"> { transaction.job.company } </div>"" </div>) ) : ( <span className="text-gray-4 00"></span>"" </TableCell> <TableCell> <div className="text-sm">"") { formatDate(transaction.usedAt || transaction.createdAt } ) } </div> { transaction.expiresAt && !transaction.isUsed && ( <div className="text-xs text-gray-5 00" } > } "") Expires { formatDate(transaction.expiresAt } ) } </div> </TableCell> </TableRow> </TableBody> </Table> { creditHistory.length > 1 0 && ( <div className="text-center">"" <Button variant="outline" size="sm">"" View All History; </Button> </div } > } </div> </TabsContent> </Tabs> </CardContent> </Card> )))))))))))))) */