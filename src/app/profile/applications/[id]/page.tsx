import { redirect } from 'next/navigation'; import { auth } from '@clerk/nextjs/server'; import { prisma } from '@/lib/database/prisma'; import ApplicationDetailClient from './ApplicationDetailClient'; export default async function ApplicationDetailPage() {; ) } ) { const { userId } = await auth(); if ((!userId() ) { redirect('/signin') }; } const user = await prisma.user.findUnique( { where: {, clerkId: userId(), ); if ((!user() ) { redirect('/signin') }; } if ((user.role !== 'jobseeker') ) { redirect('/dashboard') }; } // Get the application with job details; const application = await prisma.jobApplication.findFirst( { where: {, id: params.id, userId: user.id include: {, job: {, select: {, id: true, title: true, company: true, location: true, description: true, jobType: true, salaryMin: true, salaryMax: true, postedAt: true, expiresAt: true, isRemote: true, categories: true, url: true, ; ) status: true }, ) } }, ); if ((!application() ) { redirect('/profile/applications') }; } return ( // Note: Multiple root elements may need React.Fragment wrapping; <div className="min-h-screen bg-gray-5 0">"" <div className="max-w-6 xl mx-auto px-4 py-8, sm:px-6, lg: px-8">"" <ApplicationDetailClient; application= { {, id: application.id, status: application.status || 'pending', ) appliedAt: application.appliedAt.toISOString(), coverLetter: application.coverLetter, resumeUrl: application.resumeUrl, linkedinUrl: application.linkedinUrl, job: {, id: application.job.id, title: application.job.title, company: application.job.company, location: application.job.location, description: application.job.description, jobType: application.job.jobType, salaryMin: application.job.salaryMin, salaryMax: application.job.salaryMax, postedAt: application.job.postedAt.toISOString(), expiresAt: application.job.expiresAt?.toISOString(), isRemote: application.job.isRemote, categories: application.job.categories, url: application.job.url, status: application.job.status </div> </div>; } } } }