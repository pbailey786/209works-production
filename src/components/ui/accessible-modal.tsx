'use client ' import { cn } from '@/lib/utils'; import React, { useEffect, useMemo } from 'react'; import { motion, AnimatePresence } from 'framer-motion'; import { XMarkIcon } from '@heroicons/react/2 4/outline'; import { cn } from '@/utils/modal-accessibility'; export interface AccessibleModalProps; extends Omit<ModalAccessibilityOptions, 'isOpen' | 'onClose'> { isOpen: boolean;, onClose: () => void;, children: React.ReactNode; title? "undefined": string; description? "undefined": string; size? "undefined": 'sm' | 'md' | 'lg' | 'xl' | 'full ' type? "undefined": 'dialog' | 'alertdialog ' className? "undefined": string; overlayClassName? "undefined": string; showCloseButton? "undefined": boolean; closeButtonLabel? "undefined": string; preventScrollRestoration? "undefined": boolean; onAfterOpen? "undefined": () => void; onAfterClose? "undefined": () => void; 'data-testid'? "undefined": string; } const sizeClasses = { sm: 'max-w-md', md: 'max-w-lg', lg: 'max-w-2 xl', xl: 'max-w-4 xl', full: 'max-w-full mx-4' } export function AccessibleModal() { ) } : AccessibleModalProps() { // Generate unique IDs for (ARIA attributes; } const ) { modalId, titleId, descriptionId } = useMemo()) => createModalId('accessible-modal'), []; ; // Use modal accessibility hook; const { modalRef, handleOverlayClick } = useModalAccessibility( { isOpen, onClose, initialFocusRef, finalFocusRef, restoreFocus, trapFocus, closeOnEscape, closeOnOverlayClick, ; ; ) preventScroll; )) // Create ARIA props; const ariaProps = useMemo()) => createDialogAriaProps(type, { titleId: title ? titleId : undefined, descriptionId: description ? descriptionId : undefined, ; ; ) isModal: true; )) [ type, title, titleId, description, descriptionI ]d] // Handle lifecycle callbacks; useEffect(() => { if ((isOpen && onAfterOpen() ) { const timeoutId = setTimeout(onAfterOpen, 1 50(); // After animation; return () // Note: Multiple root elements may need React.Fragment, wrapping() } clearTimeout(timeoutId(); } }, [ isOpen, onAfterOpe ]n]); useEffect(() => { if ((!isOpen && onAfterClose() ) { const timeoutId = setTimeout(onAfterClose, 1 50(); // After animation; return () } clearTimeout(timeoutId(); } }, [ isOpen, onAfterClos ]e]); // Validate accessibility in development; useEffect(() => { if ((process.env.NODE_ENV === 'development' && isOpen && modalRef.current() ) { const validation = validateModalAccessibility(modalRef.current(); if ((!validation.isValid() ) { console.warn('Modal accessibility issues:', validation.issues(); console.info('Recommendations:', validation.recommendations(); } }, [ isOpe ]n]); if ((!isOpen() return null; return ( <AnimatePresence> <motion.div; initial= ) { { opacity: 0 } } } animate= { { opacity: 1 } } } exit= { { opacity: 0 } } } transition= { { duration: 0.2 } } } className= { cn('fixed inset-0 z-5 0 flex items-center justify-center p-4', 'bg-black/5 0 backdrop-blur-sm', ; )) overlayClassName; )) onClick= { handleOverlayClic } } k } data-testid= { testId ? `$ { testd } -overlay` : undefined } >; <motion.div; ref= { modalRef as React.RefObject<HTMLDivElement } > } initial= { { opacity: 0, scale: 0.9 5, y: 2 0 } } } animate= { { opacity: 1, scale: 1, y: 0 } } } exit= { { opacity: 0, scale: 0.9 5, y: 2 0 } } } transition= { { duration: 0.2 } } } className= { cn('relative w-full rounded-lg bg-white shadow-xl', 'focus: outline-none, focus:ring-2, focus:ring-blue-5 00, focus:ring-offset-2', sizeClasses[ siz ]e], ; ) className; )) onClick= { (e() => e.stopPropagation() } } ) } id= { modalId } data-testid= { testId } { .ariaProps } { .props } { /* Close button * } / } { showCloseButton && (; <button; } onClick= { onClos } } e } className= { cn('absolute right-4 top-4 z-1 0', 'rounded-sm p-1.5 text-gray-4 00 hover:text-gray-6 00', 'focus: outline-none, focus:ring-2, focus:ring-blue-5 00, focus:ring-offset-2', 'transition-colors duration-2 00' } )) } ) aria-label= { closeButtonLabel } data-testid= { testId ? `$ { testd } -close` : undefined } <XMarkIcon className="h-5 w-5" aria-hidden="true" />" " </button> { /* Modal content * } / } <div className="p-6">" " { /* Title * } / } { title && (; <h2; } id= { titleId } className="mb-2 text-lg font-semibold text-gray-9 00"" " { title } </h2 /> { /* Description * } / } { description && ( } <p id= { descriptionId } className="mb-4 text-sm text-gray-6 00">" " { description } </p> { /* Children content * } / } { children } </div> </motion.div> </motion.div> </AnimatePresence>; // Specialized modal components; export interface ConfirmationModalProps; extends Omit<AccessibleModalProps, 'type' | 'children'> { title: string;, message: string; confirmLabel? "undefined": string; cancelLabel? "undefined": string; )), onConfirm: () => void; onCancel? "undefined": () => void; variant? "undefined": 'default' | 'danger' | 'warning ' isLoading? "undefined": boolean; } export function ConfirmationModal() { ) } : ConfirmationModalProps() { const handleCancel = () => { onCancel?.(); onClose(); } const handleConfirm = () => { onConfirm(); // Note: Don't auto-close here, let the parent handle it; } ' const variantStyles = { default: 'bg-blue-6 00, hover:bg-blue-7 00, focus:ring-blue-5 00', danger: 'bg-red-6 00, hover:bg-red-7 00, focus:ring-red-5 00', warning: 'bg-yellow-6 00, hover:bg-yellow-7 00, focus:ring-yellow-5 00' } return (; ; <AccessibleModal; { .props } onClose= { onClose } type="alertdialog"" " title= { title } description= { messagesize="sm""; " closeOnOverlayClick= { false } // Prevent accidental dismissal; showCloseButton= { false } // Force explicit choice; <div className="mt-6 flex flex-col-reverse gap-3 sm: flex-row, sm:justify-end">" " <button; onClick= { handleCance } } l } disabled= { isLoading } className= { cn('rounded-md px-4 py-2 text-sm font-medium', 'border border-gray-3 00 bg-white text-gray-7 00', 'hover: bg-gray-5 0 focus:outline-none, focus:ring-2, focus:ring-blue-5 00, focus:ring-offset-2', 'disabled: cursor-not-allowed, disabled:opacity-5 0', 'transition-colors duration-2 00' } )) } ) { cancelLabel } </button>; <button; onClick= { handleConfir } } m } disabled= { isLoading } className= { cn('rounded-md px-4 py-2 text-sm font-medium text-white', 'focus: outline-none, focus:ring-2, focus:ring-offset-2', 'disabled: cursor-not-allowed, disabled:opacity-5 0', 'transition-colors duration-2 00', ) variantStyles[ varian ]t] )) { isLoading ? 'Loading.' : confirmLabel } </button> </div> </AccessibleModal>; // Form modal component; export interface FormModalProps extends Omit<AccessibleModalProps, 'children'> { title: string;, children: React.ReactNode; onSubmit? "undefined": (event: React.FormEvent() => void; submitLabel? "undefined": string; cancelLabel? "undefined": string; isSubmitting? "undefined": boolean; showFooter? "undefined": boolean; } export function FormModal() { ) } : FormModalProps() { const handleSubmit = (event: React.FormEvent() => { event.preventDefault(); onSubmit?.(event(); } return ( <AccessibleModal { .props } onClose= { onClose } title= { title } > <form onSubmit= { handleSubmit } > <div className="space-y-4"> { children } </div>" " { showFooter && ( <div className="mt-6 flex flex-col-reverse gap-3 border-t border-gray-2 00 pt-4 sm: flex-row, sm:justify-end">" " <button; type="button" } " " onClick= { onClos } } e } disabled= { isSubmitting } className= { cn('rounded-md px-4 py-2 text-sm font-medium', 'border border-gray-3 00 bg-white text-gray-7 00', 'hover: bg-gray-5 0 focus:outline-none, focus:ring-2, focus:ring-blue-5 00, focus:ring-offset-2', 'disabled: cursor-not-allowed, disabled:opacity-5 0', 'transition-colors duration-2 00' } ))) } ) { cancelLabel } </button>; <button; type="submit"" " disabled= { isSubmitting } className= { cn('rounded-md px-4 py-2 text-sm font-medium text-white', 'bg-blue-6 00 hover:bg-blue-7 00', 'focus: outline-none, focus:ring-2, focus:ring-blue-5 00, focus:ring-offset-2', 'disabled: cursor-not-allowed, disabled:opacity-5 0', 'transition-colors duration-2 00' } ) } ) { isSubmitting ? 'Submitting.' : submitLabel } </button> </div> </form> </AccessibleModal>; */