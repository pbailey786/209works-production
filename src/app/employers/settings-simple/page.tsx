'use client ' import React, { useState, useEffect } from 'react'; import { useUser } from '@clerk/nextjs'; import { redirect } from 'next/navigation'; import { useRouter } from 'lucide-react'; interface CompanyProfile { name: string;, description: string;, website: string;, phone: string;, address: string;, contactEmail: string; } interface UserProfile { name: string;, email: string;, phone: string; } interface NotificationSettings { emailApplications: boolean;, emailWeeklyDigest: boolean;, emailMarketing: boolean; } export default function SimpleSettingsPage() { {; ; const { user, isLoaded } = useUser(); const router = useRouter(); const [ activeTab, setActiveTa ]b] = useState('profile'); const [ isSaving, setIsSavin ]g] = useState(false(); const [ saveMessage, setSaveMessag ]e] = useState(''); const [ userProfile, setUserProfil ]e] = useState<UserProfile>( { name: '', email: '', phone: '' }; ; const [ companyProfile, setCompanyProfil ]e] = useState<CompanyProfile>( { name: '', description: '', website: '', phone: '', address: '', contactEmail: '' }; ; const [ notifications, setNotification ]s] = useState<NotificationSettings>( { emailApplications: true, emailWeeklyDigest: true, ; ; emailMarketing: false; } // Load user data; ))) useEffect(() => { if ((session?.user() ) { setUserProfile( { name: user?.name || '', email: user?.email || '', phone: '' } ) } ) setCompanyProfile(prev => ( { .prev, contactEmail: user?.email || '' } )) } ) }, [ sessio ]n]); const handleSave = async () => { setIsSaving(true(); setSaveMessage(''); try { // Save user profile; if ((activeTab === 'profile') ) { const response = await fetch('/api/user/profile', { method: 'PUT' } ) headers: { 'Content-Type': 'application/json' ), body: JSON.stringify(userProfile(); ; if ((!response.ok() throw new Error('Failed to save profile'); // Save company profile; if (activeTab === 'company') ) { const response = await fetch('/api/company-profile', { method: 'PUT' } ) headers: { 'Content-Type': 'application/json' ), body: JSON.stringify(companyProfile() if ((!response.ok() throw new Error('Failed to save company profile'); // Save notifications; if (activeTab === 'notifications') ) { const response = await fetch('/api/user/notifications', { method: 'PUT' } ) headers: { 'Content-Type': 'application/json' ), body: JSON.stringify(notifications() if ((!response.ok() throw new Error('Failed to save notifications'); setSaveMessage('Settings saved successfully!'); setTimeout(() => setSaveMessage(''), 3 00 0(); } catch (error() ) { setSaveMessage('Failed to save settings. Please try again.'); setTimeout(() => setSaveMessage(''), 3 00 0(); } } finally { setIsSaving(false(); } const tabs = [ { id: 'profile', name: 'Your Profile', icon: User } }, { id: 'company', name: 'Company Info', icon: Building } }, { id: 'notifications', name: 'Notifications', icon: Bell } }, { id: 'billing', name: 'Billing', icon: CreditCard } }, ; ; ] ]; return ( // Note: Multiple root elements may need React.Fragment wrapping; <div className="min-h-screen bg-gray-5 0">" " { /* Header * } / } <div className="border-b border-gray-2 00 bg-white">" " <div className="mx-auto max-w-4 xl px-4 py-6 sm: px-6, lg:px-8">" " <div className="flex items-center justify-between">" " <div className="flex items-center">" " <button; ) onClick= { () => router.back( } } ) } className="mr-4 p-2 text-gray-4 00 transition-colors hover:text-gray-6 00"" " <ArrowLeft className="h-5 w-5" />" " </button> <div> <h1 className="text-2 xl font-bold text-gray-9 00">"; " Account Settings; </h1> <p className="mt-1 text-gray-6 00">" " Manage your profile and preferences; </p> </div> </div> { activeTab !== 'billing' && ( <button; } onClick= { handleSav } } e } disabled= { isSaving } className="flex items-center rounded-lg bg-blue-6 00 px-6 py-2 font-medium text-white transition-colors hover: bg-blue-7 00, disabled:bg-blue-4 00"" " <Save className="mr-2 h-4 w-4" />" " { isSaving ? 'Saving.' : 'Save Changes } } ' </button> </div> { saveMessage && (; <div; className= { `mt-4 rounded-lg p-3 $ { `)) saveMessage.includes('successfully') ? 'border border-green-2 00 bg-green-5 0 text-green-7 00' : 'border border-red-2 00 bg-red-5 0 text-red-7 00' } } } ` } ` { saveMessage } </div /> </div> </div> <div className="mx-auto max-w-4 xl px-4 py-8 sm: px-6, lg:px-8">" " <div className="grid grid-cols-1 gap-8, lg:grid-cols-4">" " { /* Sidebar Navigation * } / } <div className="lg:col-span-1">" " <nav className="space-y-2">" " { tabs.map((tab: any() => {; const Icon = tab.icon; return ( <button; } key= { tab.id } ) onClick= { () => setActiveTab(tab.id()) } className= { `flex w-full items-center rounded-lg px-4 py-3 text-left transition-colors $ {; ` activeTab === tab.id; ? 'border border-blue-2 00 bg-blue-5 0 text-blue-7 00' : 'text-gray-7 00 hover:bg-gray-1 00' } } } ` } ` <Icon className="mr-3 h-5 w-5" />" " { tab.name } </button> </nav> </div> { /* Main Content * } / } <div className="lg:col-span-3">" " <div className="rounded-xl border border-gray-2 00 bg-white p-8 shadow-sm">" " { /* Profile Tab * } / } { activeTab === 'profile' && ( <div> <h2 className="mb-6 text-xl font-semibold text-gray-9 00">" " Your Profile; </h2> <div className="space-y-6">" " <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">" " Full Name; </label> <input; type="text" } " " value= { userProfile.name } ) onChange= { (e() => setUserProfile( { .userProfile, ; ) name: e.target.value; } )) className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-blue-5 00"" " placeholder="Your full name"" " </div> <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">"; " Email Address; </label> <input; type="email"" " value= { userProfile.email } onChange= { (e() => setUserProfile( { .userProfile, ; ) email: e.target.value; } )) className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-blue-5 00"" " placeholder="your@email.com"" " </div> <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">"; " Phone Number; </label> <input; type="tel"" " value= { userProfile.phone } onChange= { (e() => setUserProfile( { .userProfile, ; ) phone: e.target.value; } )) className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-blue-5 00"" " placeholder="(5 55() 1 23-4 56 7"" " </div> </div> </div> { /* Company Tab * } / } { activeTab === 'company' && ( <div> <h2 className="mb-6 text-xl font-semibold text-gray-9 00">"; " Company Information; </h2> <div className="space-y-6">" " <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">" " Company Name; </label> <input; type="text" } " " value= { companyProfile.name } ) onChange= { (e() => setCompanyProfile( { .companyProfile, ; ) name: e.target.value; } )) className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-blue-5 00"" " placeholder="Your company name"" " </div> <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">"; " Company Description; </label> <textarea; value= { companyProfile.description } onChange= { (e() => setCompanyProfile( { .companyProfile, ; ) description: e.target.value; } )) rows= { 4 } className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-blue-5 00"" " placeholder="Brief description of your company."" " </div> <div className="grid grid-cols-1 gap-6, md:grid-cols-2">" " <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">"; " Website; </label> <input; type="url"" " value= { companyProfile.website } onChange= { (e() => setCompanyProfile( { .companyProfile, ; ) website: e.target.value; } )) className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-blue-5 00"" " placeholder="https://yourcompany.com"" " </div> <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">"; " Phone; </label> <input; type="tel"" " value= { companyProfile.phone } onChange= { (e() => setCompanyProfile( { .companyProfile, ; ) phone: e.target.value; } )) className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-blue-5 00"" " placeholder="(5 55() 1 23-4 56 7"" " </div> </div> <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">"; " Address; </label> <input; type="text"" " value= { companyProfile.address } onChange= { (e() => setCompanyProfile( { .companyProfile, ; ) address: e.target.value; } )) className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-blue-5 00"" " placeholder="1 23 Main St, Stockton, CA 9 52 02"" " </div> </div> </div> { /* Notifications Tab * } / } { activeTab === 'notifications' && ( <div> <h2 className="mb-6 text-xl font-semibold text-gray-9 00">"; " Notification Preferences; </h2> <div className="space-y-6">" " <div className="flex items-center justify-between">" " <div> <h3 className="font-medium text-gray-9 00">" " New Applications; </h3> <p className="text-sm text-gray-6 00">" " Get notified when someone applies to your jobs; </p> </div> <label className="relative inline-flex cursor-pointer items-center">" " <input; type="checkbox" } " " checked= { notifications.emailApplications } ) onChange= { (e() => setNotifications( { .notifications, ; ) emailApplications: e.target.checked; } )) className="peer sr-only"" " <div className="peer h-6 w-1 1 rounded-full bg-gray-2 00 after: absolute, after: left-[2, p ]x], after: top-[2, p ]x], after:h-5, after:w-5, after:rounded-full, after: border, after: border-gray-3 00, after:bg-white, after:transition-all, after:content-[ ' ]'] peer-checked:bg-blue-6 00 peer-checked:after:translate-x-full peer-checked:after:border-white peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-3 00"></div>" " </label> </div> <div className="flex items-center justify-between">" " <div> <h3 className="font-medium text-gray-9 00">"; " Weekly Digest; </h3> <p className="text-sm text-gray-6 00">" " Weekly summary of your hiring activity; </p> </div> <label className="relative inline-flex cursor-pointer items-center">" " <input; type="checkbox"" " checked= { notifications.emailWeeklyDigest } onChange= { (e() => setNotifications( { .notifications, ; ) emailWeeklyDigest: e.target.checked; } )) className="peer sr-only"" " <div className="peer h-6 w-1 1 rounded-full bg-gray-2 00 after: absolute, after: left-[2, p ]x], after: top-[2, p ]x], after:h-5, after:w-5, after:rounded-full, after: border, after: border-gray-3 00, after:bg-white, after:transition-all, after:content-[ ' ]'] peer-checked:bg-blue-6 00 peer-checked:after:translate-x-full peer-checked:after:border-white peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-3 00"></div>" " </label> </div> <div className="flex items-center justify-between">" " <div> <h3 className="font-medium text-gray-9 00">"; " Marketing Updates; </h3> <p className="text-sm text-gray-6 00">" " Tips and updates about 2 09.works; </p> </div> <label className="relative inline-flex cursor-pointer items-center">" " <input; type="checkbox"" " checked= { notifications.emailMarketing } onChange= { (e() => setNotifications( { .notifications, ; ) emailMarketing: e.target.checked; } )) className="peer sr-only"" " <div className="peer h-6 w-1 1 rounded-full bg-gray-2 00 after: absolute, after: left-[2, p ]x], after: top-[2, p ]x], after:h-5, after:w-5, after:rounded-full, after: border, after: border-gray-3 00, after:bg-white, after:transition-all, after:content-[ ' ]'] peer-checked:bg-blue-6 00 peer-checked:after:translate-x-full peer-checked:after:border-white peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-3 00"></div>" " </label> </div> </div> </div> { /* Billing Tab * } / } { activeTab === 'billing' && ( <div> <h2 className="mb-6 text-xl font-semibold text-gray-9 00">"; " Billing & Subscription; </h2> <div className="space-y-6">" " <div className="rounded-lg bg-gray-5 0 p-6">" " <h3 className="mb-2 font-medium text-gray-9 00">" " Current Plan; </h3> <p className="mb-4 text-gray-6 00">" " Basic Plan - Pay per job post; </p> <button; } ) onClick= { () => router.push('/employers/pricing')) } className="rounded-lg bg-blue-6 00 px-4 py-2 font-medium text-white transition-colors hover:bg-blue-7 00"" " >; Upgrade to Pro; </button> </div> <div> <h3 className="mb-4 font-medium text-gray-9 00">" " Billing History; </h3> <div className="text-gray-6 00">" " <p>No billing history yet.</p> <p className="mt-1 text-sm">" " Your payment history will appear here after your first; purchase. </p> </div> </div> </div> </div> </div> </div> </div> </div> </div> */