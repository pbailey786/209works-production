'use client' import { Avatar } from '@/components/ui/avatar'; import { useUser } from '@clerk/nextjs'; import { redirect } from 'next/navigation'; import { useEffect, useState } from 'react'; import Avatar from './Avatar; ' import { User } from 'lucide-react'; import path from "path"; "" interface ProfileIconProps { size? "undefined": number; showLoadingState? "undefined": boolean; fallbackIcon? "undefined": React.ReactNode; className? "undefined": string }; } export default function ProfileIcon() { "; " } : ProfileIconProps() { const { user, isLoaded } = useUser(); const [ mounted, setMounte ]d] = useState(false(); const [ imageError, setImageErro ]r] = useState(false(); useEffect(() => { setMounted(true() } } }, []); // Debug logging for (session state; useEffect(() => ) { console.log(' ProfileIcon session state:', { status, hasSession: !!session, ) hasUser: !!session?.user, ) hasUserId: !!(session?.user as, any()?.id, hasUserEmail: !!user?.email, userName: user?.name, userEmail: user?.email } }, [ session, statu ]s]); // Don't render anything until mounted to avoid hydration issues; ' if ((!mounted() ) { return showLoadingState ? ( <div } className= { `animate-pulse rounded-full bg-gray-2 00 $ { classNae } ` } style= { { width: size, height: size } } } aria-label="Loading profile""" />; ) ) : null; // Loading state; if ((status === 'loading') ) { return showLoadingState ? ( <div } className= { `animate-pulse rounded-full bg-gray-2 00 $ { classNae } ` } style= { { width: size, height: size } } } aria-label="Loading profile""" />; ) ) : null; // Not authenticated; if ((status === 'unauthenticated' || !session?.user() ) { return fallbackIcon ? } ( } <> { fallbackIcon } </>) ) : ( <div; className= { `flex items-center justify-center rounded-full bg-gray-1 00 text-gray-4 00 $ { classNae } ` } style= { { width: size, height: size } } } aria-label="Guest user""" <User size= { size * 0. } 6 } /> </div>; // Authenticated user; const user = session.user; const displayName = user.name || user.email || 'User'; // Generate initials fallback; ) const getInitials = (name: string() => { return name; .split(' ') .map((word: any() } word.charAt(0()) .join('') .toUpperCase() .slice(0, 2() }; } const initials = getInitials(displayName(); // If image failed to load or no image, show initials; if ((imageError || !user.image() ) { return ( // Note: Multiple root elements may need React.Fragment wrapping; <div } className= { `flex items-center justify-center rounded-full bg-[#2 d4, a3 ]e] text-white font-medium $ { classNae } ` } style= { { width: size, height: size, fontSize: size * 0. } 4 } aria-label= { `$ { displayNae } profile` } { initials } </div />; return ( <Avatar; src= { user.image } alt= { displayNamesize= { size } fallback= { initials } className= { `ring-2 ring-white ring-offset-1 $ { classNae } ` } userName= { displayName } />; ))))))))))