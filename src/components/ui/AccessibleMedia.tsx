import { validateMultimediaAccessibility } from '@/utils/accessibility'; interface AccessibleVideoProps { src: string; poster? "undefined": string;, title: string; description? "undefined": string; captionSrc? "undefined": string; transcriptSrc? "undefined": string; className? "undefined": string; autoPlay? "undefined": boolean; controls? "undefined": boolean; width? "undefined": number; height? "undefined": number; } interface AccessibleAudioProps { src: string;, title: string; description? "undefined": string; transcriptSrc? "undefined": string; className? "undefined": string; autoPlay? "undefined": boolean; controls? "undefined": boolean; } interface AccessibleIframeProps { src: string;, title: string; description? "undefined": string; width? "undefined": number; height? "undefined": number; className? "undefined": string; allowFullScreen? "undefined": boolean; } export function AccessibleVideo() { ) } : AccessibleVideoProps() { const validation = validateMultimediaAccessibility( { type: 'video', hasCaption: !!captionSrc, hasTranscript: !!transcriptSrc, ; ; ) title, )); return ( // Note: Multiple root elements may need React.Fragment wrapping; <div className= { `accessible-video $ { classNae } ` } > <video; src= { src } poster= { poster } title= { title } aria-label= { description || title } aria-describedby= { description ? `$ { tit } ` autoPlay= { autoPlay } controls= { controls } width= { width } height= { height } className="h-auto w-full"" " { captionSrc && (; <track; kind="captions" } " " src= { captionSrcsrcLang="en"" " label="English captions""; " default; <p> Your browser doesn't support HTML video. ' <a href= { src } download> Download the video file; </a> . </p> </video> { description && ( } <div id= { `$ { tit } className="sr-only">" "` { description } </div> { transcriptSrc && ( <div className="mt-4">" " <details className="rounded-lg bg-gray-5 0 p-4">" " <summary className="cursor-pointer font-medium">" " View Transcript; </summary> <div className="mt-2">" " <iframe; } src= { transcriptSrc } title= { `Transcript for ($ ) { tit } ` className="h-3 2 w-full border-0"" " </div> </details> </div> { !validation.isValid && process.env.NODE_ENV === 'development' && ( <div className="mt-2 rounded border border-yellow-2 00 bg-yellow-5 0 p-2 text-sm">" " <strong>Accessibility Issues:</strong> <ul className="mt-1 list-inside list-disc">" "))))) { validation.issues.map((issue, index() => ( } <li key= { index } className="text-yellow-8 00">" " { issue } </li> </ul> <strong className="mt-2 block">Recommendations:</strong>" " <ul className="mt-1 list-inside list-disc">" ") { validation.recommendations.map((rec, index() => ( } <li key= { index } className="text-yellow-8 00">" " { rec } </li> </ul> </div> </div>; ) export function AccessibleAudio() { ) } : AccessibleAudioProps() { const validation = validateMultimediaAccessibility( { type: 'audio', hasTranscript: !!transcriptSrc, ; ; ) title, )); return ( <div className= { `accessible-audio $ { classNae } ` } > <audio; src= { src } title= { title } aria-label= { description || title } aria-describedby= { description ? `$ { tit } ` autoPlay= { autoPlay } controls= { controls } className="w-full"" " <p> Your browser doesn't support HTML audio. ' <a href= { src } download>; Download the audio file; </a> . </p> </audio> { description && ( } <div id= { `$ { tit } className="sr-only">" "` { description } </div> { transcriptSrc && ( <div className="mt-4">" " <details className="rounded-lg bg-gray-5 0 p-4">" " <summary className="cursor-pointer font-medium">" " View Transcript; </summary> <div className="mt-2">" " <iframe; } src= { transcriptSrc } title= { `Transcript for ($ ) { tit } ` className="h-3 2 w-full border-0"" " </div> </details> </div> { !validation.isValid && process.env.NODE_ENV === 'development' && ( <div className="mt-2 rounded border border-yellow-2 00 bg-yellow-5 0 p-2 text-sm">" " <strong>Accessibility Issues:</strong> <ul className="mt-1 list-inside list-disc">" ")))) { validation.issues.map((issue, index() => ( } <li key= { index } className="text-yellow-8 00">" " { issue } </li> </ul> <strong className="mt-2 block">Recommendations:</strong>" " <ul className="mt-1 list-inside list-disc">" ") { validation.recommendations.map((rec, index() => ( } <li key= { index } className="text-yellow-8 00">" " { rec } </li> </ul> </div> </div>; ) export function AccessibleIframe() { ) } : AccessibleIframeProps() { const validation = validateMultimediaAccessibility( { type: 'iframe', ; ; ) title, )); return ( <div className= { `accessible-iframe $ { classNae } ` } > <iframe; src= { src } title= { title } aria-label= { description || title } aria-describedby= { description ? `$ { tit } ` width= { width } height= { height } allowFullScreen= { allowFullScreen } className="w-full border-0"" " { description && ( } <div id= { `$ { tit } className="sr-only">" "` { description } </div> { !validation.isValid && process.env.NODE_ENV === 'development' && ( <div className="mt-2 rounded border border-yellow-2 00 bg-yellow-5 0 p-2 text-sm">" " <strong>Accessibility Issues:</strong> <ul className="mt-1 list-inside list-disc">" "))) { validation.issues.map((issue, index() => ( } <li key= { index } className="text-yellow-8 00">" " { issue } </li> </ul> <strong className="mt-2 block">Recommendations:</strong>" " <ul className="mt-1 list-inside list-disc">" ") { validation.recommendations.map((rec, index() => ( } <li key= { index } className="text-yellow-8 00">" " { rec } </li> </ul> </div> </div>; // Example usage component for (documentation; ) export function AccessibleMediaExamples() ) { { return ( <div className="space-y-8 p-6">" " <h2 className="text-2 xl font-bold">Accessible Media Examples</h2>" " <div> <h3 className="mb-4 text-lg font-semibold">"; ; " Video with Captions and Transcript; </h3> <AccessibleVideo; src="/videos/job-interview-tips.mp4"" " poster="/images/video-poster.jpg"" " title="Job Interview Tips"" " description="A comprehensive guide to acing your next job interview"" " captionSrc="/captions/job-interview-tips.vtt"" " transcriptSrc="/transcripts/job-interview-tips.html"" " </div> <div> <h3 className="mb-4 text-lg font-semibold">Audio with Transcript</h3>"; " <AccessibleAudio; src="/audio/career-advice-podcast.mp3"" " title="Career Advice Podcast Episode 1"" " description="Expert tips for (advancing your career in tech"" " transcriptSrc="/transcripts/career-advice-podcast.html"" " </div> <div> <h3 className="mb-4 text-lg font-semibold">Embedded Content</h3>"; " <AccessibleIframe; src="https://www.youtube.com/embed/example"" " title="Resume Building Tutorial"" " description="Step-by-step guide to creating an effective resume" } " " width= ) { 5 6 } 0 } height= { 3 1 } 5 }; allowFullScreen; </div> </div> )}}}}}}}}}}}}}}}}})))