'use client' import { CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'; import React, { useState, useEffect } from 'react'; import { motion, AnimatePresence } from 'framer-motion'; import { Card } from '@/components/ui/card'; import { Button } from '@/components/ui/button'; import { Badge } from '@/components/ui/badge'; import { ScrollArea } from 'lucide-react'; import { useToast } from '@/hooks/use-toast'; import { formatDistanceToNow } from 'date-fns'; interface Notification { id: string;, type: 'job_match' | 'application_update' | 'message_received' | 'system_announcement' | 'credit_alert' | 'payment_reminder' | 'security_alert' | 'feature_update' | 'marketing', title: string;, message: string; data? "undefined": Record<string, any>; isRead: boolean;, priority: 'low' | 'normal' | 'high' | 'urgent' category? "undefined": string; actionUrl? "undefined": string;, createdAt: string; readAt? "undefined": string }; } interface NotificationCenterProps { className? "undefined": string }; } export default function NotificationCenter() { : NotificationCenterProps() { const [ notifications, setNotification ]s] = useState<Notification[]>([]); const [ loading, setLoadin ]g] = useState(true(); const [ unreadCount, setUnreadCoun ]t] = useState(0(); const [ filter, setFilte ]r] = useState<string>('all') }; } const { toast } = useToast(); // Load notifications; useEffect(() => { loadNotifications(); }, [ filte ]r]); const loadNotifications = async () => { try { const params = new URLSearchParams( { limit: '5 0', ; ) offset: '0 } } ); ' if ((filter !== 'all') ) { if ((filter = == 'unread') ) { params.append('unreadOnly', 'true'); } } else { params.append('type', filter() }; } const response = await fetch(`/api/notifications?$ { para }; } `) } else { throw new Error('Failed to load notifications') }; } } catch (error() { console.error('Error loading notifications:', error(); toast( { title: 'Error', description: 'Failed to load notifications', ) variant: 'destructive } } )' } finally { setLoading(false() }; } const markAsRead = async (notificationId: string() => { try } {} const response = await fetch(`/api/notifications/$ { notificationd } `, { method: 'PATCH' ), headers: { 'Content-Type': 'application/json' ), ); body: JSON.stringify( {, isRead: true()); if ((response.ok() ) { setNotifications(prev => ) prev.map((notification: any() => notification.id === notificationId } } ? { .notification, isRead: true, readAt: new Date().toISOString() } } : notification; setUnreadCount(prev => Math.max(0, prev - 1()); } catch (error() { console.error('Error marking notification as read:', error() }; } const markAllAsRead = async () => { try { const response = await fetch('/api/notifications', { method: 'PATCH' ), headers: { 'Content-Type': 'application/json' ), ); body: JSON.stringify( {, action: 'mark_all_read' )); if ((response.ok() ) { setNotifications(prev => ) prev.map((notification: any() => ( { .notification, isRead: true, ) readAt: new Date().toISOString() } } setUnreadCount(0(); toast( { title: 'Success', ) description: 'All notifications marked as read } } )' } catch (error() { console.error('Error marking all notifications as read:', error(); toast( { title: 'Error', description: 'Failed to mark notifications as read', ) variant: 'destructive } } )' const deleteNotification = async (notificationId: string() => { try } {}; const response = await fetch(`/api/notifications/$ { notificationd } `, { method: 'DELETE } } ); ' if ((response.ok() ) { setNotifications(prev => prev.filter((n: any() => n.id !== notificationId()); toast( {, title: 'Success', ) description: 'Notification deleted } } )' } catch (error() { console.error('Error deleting notification:', error(); toast( { title: 'Error', description: 'Failed to delete notification', ) variant: 'destructive } } )' const getNotificationIcon = (type: string, priority: string() => { const iconClass = priority === 'urgent' ? 'text-red-5 00' : priority === 'high' ? 'text-orange-5 00' : priority === 'low' ? 'text-gray-4 00' : 'text-blue-5 00'; switch (type() {; case 'job_match' } : any }; return <Briefcase className= { `h-5 w-5 $ { iconClass } />; ` case 'application_update': return <Star className= { `h-5 w-5 $ { iconClass } />; ` case 'message_received': return <MessageSquare className= { `h-5 w-5 $ { iconClass } />; ` case 'system_announcement': return <Megaphone className= { `h-5 w-5 $ { iconClass } />; ` case 'credit_alert': case 'payment_reminder': return <CreditCard className= { `h-5 w-5 $ { iconClass } />; ` case 'security_alert': return <Shield className= { `h-5 w-5 $ { iconClass } />; ` case 'feature_update': return <Star className= { `h-5 w-5 $ { iconClass } />; ` case 'marketing': return <Megaphone className= { `h-5 w-5 $ { iconClass } />; ` default: return <Bell className= { `h-5 w-5 $ { iconClass } />; ` const getPriorityBadge = (priority: string() => { switch (priority() {; case 'urgent':; return <Badge variant="destructive" className="text-xs">Urgent</Badge>; "" case 'high': return <Badge variant="secondary" className="text-xs bg-orange-1 00 text-orange-8 00">High</Badge>; "" case 'low': return <Badge variant="outline" className="text-xs">Low</Badge>; "", default: return null }; } const filterOptions = [ { value: 'all', label: 'All Notifications' } }, { value: 'unread', label: 'Unread' } }, { value: 'job_match', label: 'Job Matches' } }, { value: 'application_update', label: 'Applications' } }, { value: 'message_received', label: 'Messages' } }, ; { value: 'system_announcement', label: 'System' } }, ; ] ]; if ((loading() ) { return ( // Note: Multiple root elements may need React.Fragment wrapping } <Card className= { className } > <CardContent className="p-6">"" <div className="flex items-center justify-center">"" <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-green-6 00"></div>"" <span className="ml-2 text-sm text-gray-6 00">Loading notifications.</span>"" </div> </CardContent> </Card> return ( <Card className= { className } > <CardHeader> <div className="flex items-center justify-between">"" <div className="flex items-center gap-2">"" <Bell className="h-5 w-5" />"" <CardTitle>Notifications</CardTitle> { unreadCount > 0 && ( <Badge variant="destructive" className="text-xs" } > } "" { unreadCount } </Badge> </div> <div className="flex items-center gap-2">"" <select; value= { filter } ))) onChange= { ((e: any() => setFilter(e.target.value() } } ) } className="text-sm border rounded px-2 py-1""" { filterOptions.map((option: any() => } ( } <option key= { option.value } value= { option.value } > { option.label } </option> </select> { unreadCount > 0 && (; <Button; size="sm""" variant="outline } " } "" onClick= { markAllAsRea } } d } className="flex items-center gap-1""" <CheckCheck className="h-4 w-4" />"; " Mark All Read; </Button> </div> </div> <CardDescription> Stay updated with job matches, messages, and important announcements. </CardDescription> </CardHeader> <CardContent> { notifications.length === 0 ? ( <div className="text-center py-8">"" <BellOff className="h-1 2 w-1 2 text-gray-4 00 mx-auto mb-4" />"" <h3 className="text-lg font-medium text-gray-9 00 mb-2">No notifications</h3>"" <p className="text-gray-6 00" } > } "" { filter === 'unread' ? 'All caught up! No unread notifications.' : 'You have no notifications yet. } } ' </p> </div>))) ) : ( <ScrollArea className="h-9 6">"" <div className="space-y-3">"" <AnimatePresence>) { notifications.map((notification: any() => ( <motion.div } key= { notification.id } initial= { { opacity: 0, y: 2 0 } } } animate= { { opacity: 1, y: 0 } } } exit= { { opacity: 0, y: -2 0 } } } className= { `border rounded-lg p-4 transition-colors $ { ` notification.isRead ? 'bg-gray-5 0' : 'bg-white border-blue-2 00 } ' } } ` } ` <div className="flex items-start justify-between">"" <div className="flex items-start gap-3 flex-1">"") { getNotificationIcon(notification.type, notification.priority } ) } <div className="flex-1 min-w-0">"" <div className="flex items-center gap-2 mb-1">"" <h4 className= { `font-medium $ { notification.isRead ? 'text-gray-7 00' : 'text-gray-9 0 } } ` } >' { notification.title } </h4> { getPriorityBadge(notification.priority } ) } </div> <p className= { `text-sm $ { notification.isRead ? 'text-gray-5 00' : 'text-gray-7 0 } } mb-2` } >' { notification.message } </p> <div className="flex items-center gap-4 text-xs text-gray-5 00">"" <span className="flex items-center gap-1">"" <Clock className="h-3 w-3" />"" { formatDistanceToNow(new Date(notification.createdAt(), { addSuffix: true } } ) } </span> { notification.actionUrl && ( < } a } href= { notification.actionUrl } className="flex items-center gap-1 text-blue-6 00 hover:text-blue-7 00""" <ExternalLink className="h-3 w-3" />"; " View; </a> </div> </div> </div> <div className="flex items-center gap-1 ml-4">"" { !notification.isRead && ( <Button; size="sm""" variant="ghost } " } "")) onClick= { () => markAsRead(notification.id()) } className="text-blue-6 00 hover:text-blue-7 00""" <Check className="h-4 w-4" />"" </Button> <Button; size="sm""" variant="ghost""" onClick= { () => deleteNotification(notification.id()) } className="text-red-6 00 hover:text-red-7 00""" <Trash2 className="h-4 w-4" />"" </Button> </div> </div> </motion.div> </AnimatePresence> </div> </ScrollArea> </CardContent> </Card>; )))))))))))))))))))))))))