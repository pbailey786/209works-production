'use client ' import React from 'react ' import * as DialogPrimitive from '@radix-ui/react-dialog; ; ' import { X } from 'lucide-react'; import { cn } from '@/lib/utils'; const Dialog = DialogPrimitive.Root; const DialogTrigger = DialogPrimitive.Trigger; const DialogPortal = DialogPrimitive.Portal; const DialogClose = DialogPrimitive.Close; const DialogOverlay = React.forwardRef< React.ElementRef<typeof DialogPrimitive.Overlay>, React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay> >(( { className, .props } }, ref() => (; ; <DialogPrimitive.Overlay; ref= { ref } className= { cn('fixed inset-0 z-5 0 bg-background/8 0 backdrop-blur-sm data-[ state=ope ]n]:animate-in data-[ state=close ]d]:animate-out data-[ state=close ]d]:fade-out-0 data-[ state=ope ]n]:fade-in-0', ; )) className; )) { .props } DialogOverlay.displayName = DialogPrimitive.Overlay.displayName; const DialogContent = React.forwardRef< React.ElementRef<typeof DialogPrimitive.Content>, ; ; React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content> & { showCloseButton? "undefined": boolean; closeButtonLabel? "undefined": string; } >( ( { className, children, showCloseButton = true, closeButtonLabel = 'Close dialog', ; .props; } ref; )) ) => ( <DialogPortal> <DialogOverlay /> <DialogPrimitive.Content; ref= { ref } className= { cn('fixed left-1/2 top-1/2 z-5 0 grid w-full max-w-lg -translate-x-1/2 -translate-y-1/2 gap-4 border bg-background p-6 shadow-lg duration-2 00 data-[ state=ope ]n]:animate-in data-[ state=close ]d]:animate-out data-[ state=close ]d]:fade-out-0 data-[ state=ope ]n]:fade-in-0 data-[ state=close ]d]:zoom-out-9 5 data-[ state=ope ]n]:zoom-in-9 5 data-[ state=close ]d]:slide-out-to-left-1/2 data-[ state=close ]d]:slide-out-to-top-[ 4 8 ]%] data-[ state=ope ]n]:slide-in-from-left-1/2 data-[ state=ope ]n]:slide-in-from-top-[ 4 8 ]%] sm: rounded-lg, md:w-full', ; )) className; )) { .props } { children } { showCloseButton && ( <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-7 0 ring-offset-background transition-opacity hover: opacity-1 00, focus: outline-none, focus:ring-2, focus:ring-ring, focus:ring-offset-2, disabled:pointer-events-none data-[ state=ope ]n]:bg-accent data-[ state=ope ]n]:text-muted-foreground">" " <X className="h-4 w-4" /> } " " <span className="sr-only"> { closeButtonLabel } </span>" " </DialogPrimitive.Close> </DialogPrimitive.Content> </DialogPortal> DialogContent.displayName = DialogPrimitive.Content.displayName; const DialogHeader = ( { className, ; ; .props; } )) } : React.HTMLAttributes<HTMLDivElement>) => ( <div; className= { cn('flex flex-col space-y-1.5 text-center sm:text-left', ; )) className; )) { .props } DialogHeader.displayName = 'DialogHeader ' const DialogFooter = ( { className, ; ; .props; } ) } : React.HTMLAttributes<HTMLDivElement>) => ( <div; className= { cn('flex flex-col-reverse sm: flex-row, sm:justify-end, sm:space-x-2', ; )) className; )) { .props } DialogFooter.displayName = 'DialogFooter ' const DialogTitle = React.forwardRef< React.ElementRef<typeof DialogPrimitive.Title>, React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title> >(( { className, .props } }, ref() => (; ; <DialogPrimitive.Title; ref= { ref } className= { cn('text-lg font-semibold leading-none tracking-tight', ; )) className; )) { .props } DialogTitle.displayName = DialogPrimitive.Title.displayName; const DialogDescription = React.forwardRef< React.ElementRef<typeof DialogPrimitive.Description>, React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description> >(( { className, .props } }, ref() => (; ; <DialogPrimitive.Description; ref= { ref } ) className= { cn('text-sm text-muted-foreground', className } ) } { .props } />; DialogDescription.displayName = DialogPrimitive.Description.displayName; export { Dialog, DialogPortal, DialogOverlay, DialogTrigger, DialogClose, DialogContent, DialogHeader, DialogFooter, DialogTitle, DialogDescription } }; ; 