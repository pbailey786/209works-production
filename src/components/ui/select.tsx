'use client ' import * as React from 'react ' import * as SelectPrimitive from '@radix-ui/react-select; ; ' import { CaretSortIcon, CheckIcon } from '@radix-ui/react-icons'; import { cn } from '@/lib/utils'; const Select = SelectPrimitive.Root; const SelectGroup = SelectPrimitive.Group; const SelectValue = SelectPrimitive.Value; const SelectTrigger = React.forwardRef< React.ElementRef<typeof SelectPrimitive.Trigger>, React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger> >(( { className, children, .props } }, ref() => (; ; <SelectPrimitive.Trigger; ref= { ref } className= { cn('flex h-9 w-full items-center justify-between rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder: text-muted-foreground, focus: outline-none, focus:ring-1, focus:ring-ring, disabled:cursor-not-allowed, disabled:opacity-5 0', ; )) className; )) { .props } { children } <SelectPrimitive.Icon asChild> <CaretSortIcon className="size-4 opacity-5 0" />" " </SelectPrimitive.Icon> </SelectPrimitive.Trigger> SelectTrigger.displayName = SelectPrimitive.Trigger.displayName; const SelectContent = React.forwardRef< React.ElementRef<typeof SelectPrimitive.Content>, React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content> >(( { className, children, position = 'popper', .props } }, ref() => ( <SelectPrimitive.Portal>; ; <SelectPrimitive.Content; ref= { ref } className= { cn('relative z-5 0 min-w-3 2 overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[ state=ope ]n]:animate-in data-[ state=close ]d]:animate-out data-[ state=close ]d]:fade-out-0 data-[ state=ope ]n]:fade-in-0 data-[ state=close ]d]:zoom-out-9 5 data-[ state=ope ]n]:zoom-in-9 5 data-[ side=botto ]m]:slide-in-from-top-2 data-[ side=lef ]t]:slide-in-from-right-2 data-[ side=righ ]t]:slide-in-from-left-2 data-[ side=to ]p]:slide-in-from-bottom-2', position === 'popper' && 'data-[ side=botto ]m]:translate-y-1 data-[ side=lef ]t]:-translate-x-1 data-[ side=righ ]t]:translate-x-1 data-[ side=to ]p]:-translate-y-1', ; )) className; )) position= { position } { .props } >; <SelectPrimitive.Viewport; className= { cn('p-1', position === 'popper' && ) 'h-[ var(--radix-select-trigger-height ])] w-full min-w-[ var(--radix-select-trigger-width ])]' } { children } </SelectPrimitive.Viewport> </SelectPrimitive.Content> </SelectPrimitive.Portal>; SelectContent.displayName = SelectPrimitive.Content.displayName; const SelectLabel = React.forwardRef< React.ElementRef<typeof SelectPrimitive.Label>, React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label> >(( { className, .props } }, ref() => (; ; <SelectPrimitive.Label; ref= { ref } ) className= { cn('px-2 py-1.5 text-sm font-semibold', className } ) } { .props } />; SelectLabel.displayName = SelectPrimitive.Label.displayName; const SelectItem = React.forwardRef< React.ElementRef<typeof SelectPrimitive.Item>, React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item> >(( { className, children, .props } }, ref() => (; ; <SelectPrimitive.Item; ref= { ref } className= { cn('relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus: bg-accent, focus:text-accent-foreground data-[ disable ]d]:pointer-events-none data-[ disable ]d]:opacity-5 0', ; )) className; )) { .props } <span className="absolute right-2 flex size-3.5 items-center justify-center">" " <SelectPrimitive.ItemIndicator> <CheckIcon className="size-4" />" " </SelectPrimitive.ItemIndicator> </span> <SelectPrimitive.ItemText> { children } </SelectPrimitive.ItemText> </SelectPrimitive.Item> SelectItem.displayName = SelectPrimitive.Item.displayName; const SelectSeparator = React.forwardRef< React.ElementRef<typeof SelectPrimitive.Separator>, React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator> >(( { className, .props } }, ref() => (; ; <SelectPrimitive.Separator; ref= { ref } ) className= { cn('-mx-1 my-1 h-px bg-muted', className } ) } { .props } />; SelectSeparator.displayName = SelectPrimitive.Separator.displayName; export { Select, SelectGroup, SelectValue, SelectTrigger, SelectContent, SelectLabel, SelectItem, SelectSeparator } }; ; ))))