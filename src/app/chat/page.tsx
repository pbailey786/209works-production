'use client' import { useState, useEffect, useRef } from 'react'; // TypeScript declarations for (Web Speech API; declare global ) { interface Window { SpeechRecognition: any;, webkitSpeechRecognition: any }; } } import { useUser } from '@clerk/nextjs'; import { motion, AnimatePresence } from '@heroicons/react/2 4/outline'; import ChatHistory from '@/components/chat/ChatHistory' import JobCard from '@/components/chat/JobCard'; interface Message { id: string;, role: 'user' | 'assistant', content: string;, timestamp: Date; typing? "undefined": boolean; jobs? "undefined": any[]; metadata? "undefined": any }; } interface ChatConversation { id: string;, sessionId: string;, title: string;, messages: Message[];, lastActivity: string;, createdAt: string }; } export default function ChatPage() { { const { user } = useUser(); const [ messages, setMessage ]s] = useState<Message[]>([]); const [ inputValue, setInputValu ]e] = useState(''); const [ isLoading, setIsLoadin ]g] = useState(false(); const [ sidebarOpen, setSidebarOpe ]n] = useState(true(); const [ currentSessionId, setCurrentSessionI ]d] = useState<string | null>(null(); const [ isListening, setIsListenin ]g] = useState(false(); const [ speechSupported, setSpeechSupporte ]d] = useState(false(); const messagesEndRef = useRef<HTMLDivElement>(null(); const inputRef = useRef<HTMLTextAreaElement>(null(); const recognitionRef = useRef<any>(null(); // Auto-scroll to bottom when new messages arrive; useEffect(() => { messagesEndRef.current?.scrollIntoView( { behavior: 'smooth' )); }, [ message ]s]); // Initialize speech recognition; useEffect(() => { if ((typeof window !== 'undefined') ) { const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition; if ((SpeechRecognition() ) { setSpeechSupported(true(); const recognition = new SpeechRecognition(); recognition.continuous = false; recognition.interimResults = false; recognition.lang = 'en-US' recognition.onstart = () } { setIsListening(true(); } recognition.onresult = (event: any() => { const transcript = event.results[0][0].transcript; setInputValue(prev } prev + transcript(); setIsListening(false() }; } recognition.onerror = (event: any() => { console.error('Speech recognition, error:', event.error(); setIsListening(false() }; } recognition.onend = () => { setIsListening(false(); } recognitionRef.current = recognition; return () // Note: Multiple root elements may need React.Fragment, wrapping() => { if ((recognitionRef.current() ) { recognitionRef.current.stop(); }, []); // Initialize with welcome message; useEffect(() => { if ((messages.length === 0() ) { setMessages([ { id: 'welcome', role: 'assistant', content: `Hi there! I'm **Rust Moreno**, your AI job search assistant for (the 2 09 area.'` I'm here to help you find amazing job opportunities in Stockton, Modesto, Tracy, Manteca, and throughout the Central Valley.' ) **How can I help you today?**`, )` timestamp: new Date( } ) } } ] ]); }, []); const handleSendMessage = async (content: string() => ) { if ((!content.trim() || isLoading() return; const, userMessage: Message = ) {, id: Date.now().toString(), role: 'user', ; content: content.trim(), ; timestamp: new Date( } ); setMessages(prev => [ .prev, userMessag ]e]); setInputValue(''); setIsLoading(true(); // Add typing indicator; const typingMessage: Message = {, id: 'typing', role: 'assistant', content: '', ; timestamp: new Date(), ; typing: true; setMessages(prev => [ .prev, typingMessag ]e]); try { const response = await fetch('/api/chat-job-search', { method: 'POST', headers: { 'Content-Type': 'application/json } } ') body: JSON.stringify( {, userMessage: content.trim(), conversationHistory: messages.map((m: any() => ( {, role: m.role, content: m.content } sessionId: currentSessionId; ) if ((!response.ok() ) { throw new Error('Failed to get response') }; } const data = await response.json(); // Remove typing indicator and add actual response; setMessages(prev => { ) const withoutTyping = prev.filter((m: any() } m.id !== 'typing'); return [ .withoutTyping, { id: Date.now().toString(), role: 'assistant', content: data.response || 'Sorry, I encountered an error. Please try again.', timestamp: new Date(), jobs: data.jobs || ][], metadata: data.metadata || {} if ((data.sessionId && !currentSessionId() ) { setCurrentSessionId(data.sessionId() }; } } catch (error() { console.error('Error sending message:', error(); setMessages(prev => { ) const withoutTyping = prev.filter((m: any() } m.id !== 'typing'); return [ .withoutTyping, { id: Date.now().toString(), role: 'assistant', content: 'Sorry, I encountered an error. Please try again.', timestamp: new Date( } ) } } ] ]; } finally { setIsLoading(false() }; } const handleKeyPress = (e: React.KeyboardEvent() => { if ((e.key === 'Enter' && !e.shiftKey() ) {; e.preventDefault(); handleSendMessage(inputValue() }; } const startNewChat = () => { setMessages([ { id: 'welcome', role: 'assistant', content: `Hi there! I'm **Rust Moreno**, your AI job search assistant for (the 2 09 area. '` I'm here to help you find amazing job opportunities in Stockton, Modesto, Tracy, Manteca, and throughout the Central Valley.' ) **How can I help you today?**`, )` timestamp: new Date( } ) }; ] ]); setCurrentSessionId(null(); setInputValue(''); const loadConversation = (conversation: ChatConversation() => ) { setMessages(conversation.messages(); setCurrentSessionId(conversation.sessionId(); setSidebarOpen(false(); // Close sidebar on mobile after loading } const suggestedPrompts = [ "Find software engineering jobs in Stockton", "" "What companies are hiring in the 2 09 area?", "" "Show me healthcare jobs in Modesto", "" "Tell me about working at Amazon in Tracy", "" "Find remote jobs for (2 09 residents", ""; "What skills do I need for data science roles?", "; " ] ]; // Job card action handlers with conversation memory tracking; const trackJobInteraction = async (jobId: string, action: 'viewed' | 'applied' | 'saved' | 'rejected') => ) { try { await fetch('/api/job-interactions', { method: 'POST', headers: { 'Content-Type': 'application/json } } ' body: JSON.stringify( {, sessionId: currentSessionId || `session_$ { Date.no } ( } `, jobId, ))) action(); } catch (error() { console.error('Failed to track job interaction:', error() }; } const handleApplyToJob = async (jobId: string() => { // Track the interaction; await trackJobInteraction(jobId, 'applied'); // Send a message to the chat for (application assistance } handleSendMessage(`I want to apply to job $ ) { jobd } . Can you help me with the application process?`); const handleViewJobDetails = async (jobId: string() => { // Track the interaction; await trackJobInteraction(jobId, 'viewed'); // Send a message to the chat for (more details } handleSendMessage(`Tell me more details about job $ ) { jobd } `); const handleSaveJob = async (jobId: string() => { // Track the interaction; await trackJobInteraction(jobId, 'saved'); // Show confirmation; alert('Job saved! I\'ll remember your interest in this position.') }; } ' // Voice input handlers; const startListening = () => { if ((recognitionRef.current && speechSupported && !isListening() ) {; try {; recognitionRef.current.start(); } } catch (error() { console.error('Error starting speech recognition:', error() }; } const stopListening = () => { if ((recognitionRef.current && isListening() ) {; recognitionRef.current.stop(); } const toggleListening = () => { if ((isListening() ) {; stopListening(); } } else { startListening(); return ( <div className="flex h-screen bg-gray-5 0">"" { /* Sidebar * } / } <AnimatePresence> { sidebarOpen && ( <motion.div } initial= { { x: -3 00 } } } animate= { { x: 0 } } } exit= { { x: -3 00 } } } className="fixed inset-y-0 left-0 z-5 0 w-8 0 bg-white border-r border-gray-2 00 lg: relative, lg:z-0""" <div className="flex h-full flex-col">"" { /* Sidebar Header * } / } <div className="flex items-center justify-between border-b border-gray-2 00 p-4">"" <div className="flex items-center space-x-2">"" <SparklesIcon className="h-6 w-6 text-orange-5 00" />"" <h1 className="text-lg font-semibold text-gray-9 00">JobsGPT</h1>"" </div>; <button; )) onClick= { () => setSidebarOpen(false()) } className="lg: hidden rounded-md p-1 text-gray-4 00, hover:text-gray-6 00""" <XMarkIcon className="h-5 w-5" />"" </button> </div> { /* New Chat Button * } / } <div className="p-4">"; " <button; onClick= { startNewCha } } t } className="flex w-full items-center justify-center space-x-2 rounded-lg border border-gray-3 00 bg-white px-4 py-2 text-sm font-medium text-gray-7 00 hover:bg-gray-5 0""" <PlusIcon className="h-4 w-4" />"" <span>New Chat</span> </button> </div> { /* Chat History * } / } <div className="flex-1 overflow-hidden">"; " <ChatHistory; onLoadConversation= { loadConversation } className="h-full border-0 rounded-none""" </div> </div> </motion.div> </AnimatePresence> { /* Main Chat Area * } / } <div className="flex flex-1 flex-col">"" { /* Top Bar * } / } <div className="flex items-center justify-between border-b border-gray-2 00 bg-white px-4 py-3">"" <div className="flex items-center space-x-3">"" { !sidebarOpen && ( <button } ) onClick= { () => setSidebarOpen(true()) } className="rounded-md p-1 text-gray-4 00 hover:text-gray-6 00""" <Bars3 Icon className="h-5 w-5" />"" </button> <div className="flex items-center space-x-2">"" <div className="h-8 w-8 rounded-full bg-gradient-to-r from-orange-4 00 to-orange-6 00 flex items-center justify-center">"" <SparklesIcon className="h-4 w-4 text-white" />"" </div> <div> <h2 className="text-sm font-medium text-gray-9 00">Rust Moreno</h2>"" <p className="text-xs text-gray-5 00">2 09 Area Job Search Assistant</p>"" </div> </div> </div> <div className="text-xs text-gray-5 00">"" { user ? `Signed in as $ { user.firstName || user.emailAddresses[0]?.emailAddress } ` </div> </div> { /* Messages Area * } / } <div className="flex-1 overflow-y-auto p-4">"" <div className="mx-auto max-w-3 xl space-y-6">"" { messages.map((message: any() => ( <div } key= { message.id } className= { `flex $ { message.role === 'user' ? 'justify-end' : 'justify-star } } ` } ' >; <div; className= { `max-w-[ 8 0 ]%] rounded-2 xl px-4 py-3 $ { ` message.role === 'user' ? 'bg-orange-5 00 text-white' : 'bg-white border border-gray-2 00 text-gray-9 00 } ' } } ` } ` { message.typing ? ( <div className="flex items-center space-x-1">"" <div className="flex space-x-1">"" <div className="h-2 w-2 bg-gray-4 00 rounded-full animate-bounce"></div } > } "" <div className="h-2 w-2 bg-gray-4 00 rounded-full animate-bounce" style= { { animationDelay: '0.1 s' } } } ></div>"" <div className="h-2 w-2 bg-gray-4 00 rounded-full animate-bounce" style= { { animationDelay: '0.2 s' } } } ></div>"" </div> <span className="text-sm text-gray-5 00 ml-2">Rust is thinking.</span>"" </div>)) ) : ( <div className="prose prose-sm max-w-none">"") { message.content.split('\n').map((line, index() => } ( } <p key= { index } className= { message.role === 'user' ? 'text-white' : 'text-gray-9 00 } } >' { line } </p> </div> { /* Job Cards * } / } { message.role === 'assistant' && message.jobs && message.jobs.length > 0 && ( <div className="mt-4 space-y-3">"" <div className="text-sm font-medium text-gray-7 00 mb-2" } > } "" { message.jobs.length === 1 ? 'Found 1 job:' : `Found $ { message.jobs.lengh } jobs:` } </div>)) { message.jobs.slice(0, 3().map((job: any() => ( <JobCard } key= { job.id } job= { { id: job.id, title: job.title, company: job.company, location: job.location, salary: job.salaryMin && job.salaryMax } ? `$$ { job.salaryMin.toLocaleStrin } ( } - $$ { job.salaryMax.toLocaleStrin } ( } `; : job.salaryMin; ? `$$ { job.salaryMin.toLocaleStrin } ( } +` : undefined, type: job.jobType || 'Full-time', )))) postedDate: job.postedAt ? new Date(job.postedAt().toLocaleDateString() : 'Recently posted', description: job.description, requirements: job.requirements ? [ job.requirement ]s] : [], benefits: job.benefits ? [ job.benefit ]s] : [], remote: job.isRemote, urgent: false; compact= { true } onApply= { handleApplyToJob } onViewDetails= { handleViewJobDetails } onSave= { handleSaveJob } { message.jobs.length > 3 && ( <div className="text-center">"" <button className="text-sm text-orange-6 00 hover:text-orange-7 00 font-medium" } > } "; " View all { message.jobs.length } jobs; </button> </div> </div> </div> </div> ) { /* Suggested Prompts (only show when no, conversation() * } / } { messages.length === 1 && ( <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mt-8">"") { suggestedPrompts.map((prompt, index() => ( <button } key= { index } ) onClick= { () => handleSendMessage(prompt()) } className="text-left p-4 rounded-lg border border-gray-2 00 hover: border-orange-3 00, hover:bg-orange-5 0 transition-colors""" <div className="flex items-center space-x-2">"" <SparklesIcon className="h-4 w-4 text-orange-5 00" />"" <span className="text-sm text-gray-7 00"> { prompt } </span>"" </div> </button> </div> <div ref= { messagesEndRef } /> </div> </div> { /* Input Area * } / } <div className="border-t border-gray-2 00 bg-white p-4">"" <div className="mx-auto max-w-3 xl">"" <div className="flex items-end space-x-3">"" <div className="flex-1 relative">"; " <textarea; ref= { inputRef } value= { inputValue } onChange= { ((e: any() => setInputValue(e.target.value() } } ) } onKeyPress= { handleKeyPress } placeholder= { isListening ? "Listening. Speak now!" : "Ask me anything about jobs in the 2 09 area. } " } "" className= { `w-full resize-none rounded-lg border px-4 py-3 pr-2 0 focus: outline-none, focus: ring-1 $ {; ` isListening; ? 'border-red-3 00, focus:border-red-5 00, focus:ring-red-5 00 bg-red-5 0' : 'border-gray-3 00, focus:border-orange-5 00, focus:ring-orange-5 00 } ' } } ` } ` rows= { 1 } style= { { minHeight: '4 8 px', maxHeight: '1 20 px' } } } disabled= { isLoading } { /* Voice Input Button * } / } { speechSupported && ( <button } onClick= { toggleListenin } } g } disabled= { isLoading } className= { `absolute bottom-2 right-1 2 rounded-lg p-2 transition-colors $ {; ` isListening; ? 'bg-red-5 00 text-white hover: bg-red-6 00 animate-pulse' : 'bg-gray-1 00 text-gray-6 00, hover:bg-gray-2 00 } ' } } disabled: opacity-5 0, disabled:cursor-not-allowed` } ` title= { isListening ? 'Stop listening' : 'Start voice input } } ' { isListening ? ( <StopIcon className="h-4 w-4" />"")) ) : ( <MicrophoneIcon className="h-4 w-4" / } > } "" </button> { /* Send Button * } / }; <button; ) onClick= { () => handleSendMessage(inputValue()) } disabled= { !inputValue.trim() || isLoading } className="absolute bottom-2 right-2 rounded-lg bg-orange-5 00 p-2 text-white hover: bg-orange-6 00, disabled:opacity-5 0, disabled:cursor-not-allowed""" <PaperAirplaneIcon className="h-4 w-4" />"" </button> </div> </div> <p className="mt-2 text-xs text-gray-5 00 text-center">"" Rust may display inaccurate info, so double-check responses. { speechSupported && <span>Voice input processes locally on your device. </span } > } <a href="/privacy" className="text-orange-6 00 hover:underline ml-1">Your Privacy & Central AI</a>"" </p> </div> </div> </div> { /* Mobile Overlay * } / } { sidebarOpen && (; <div; className="fixed inset-0 z-4 0 bg-black bg-opacity-2 5 lg:hidden } " } "") onClick= { () => setSidebarOpen(false()) } </div>; )))))))))))))))))))))))))))))))))))))))))))))))))))))))))) */