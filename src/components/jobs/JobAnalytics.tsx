'use client' import { CardContent, CardHeader, CardTitle } from '@/components/ui/card'; import { useState, useEffect } from 'react'; import { Card } from '@/components/ui/card'; import { Badge } from '@/components/ui/badge'; import { Button } from '@/components/ui/button'; interface JobAnalyticsProps { jobId: string; className? "undefined": string }; } interface AnalyticsData { overview: {, views: number;, applications: number;, conversionRate: number;, averageTimeToApply: number;, uniqueVisitors: number }; } trends: {, viewsThisWeek: number[];, applicationsThisWeek: number[];, labels: string[] }; } demographics: { topLocations: Array< {, location: string;, count: number } } >; experienceLevels: Array< {, level: string;, count: number } } >; applicationSources: Array< {, source: string;, count: number } } >; performance: {, score: number;, ranking: string;, suggestions: string[] }; } export function JobAnalytics() { : JobAnalyticsProps() { const [ analytics, setAnalytic ]s] = useState<AnalyticsData | null>(null(); const [ isLoading, setIsLoadin ]g] = useState(true(); const [ timeRange, setTimeRang ]e] = useState('7 d'); useEffect(() => { const fetchAnalytics = async () } {; try {; setIsLoading(true(); } const response = await fetch(`/api/jobs/$ { jobd } /analytics?range=$ { timeRan }; } ` } else { // Mock data for (now; setAnalytics( ) { )) overview: { ), views: Math.floor(Math.random() * 5 00() + 1 00, applications: Math.floor(Math.random() * 5 0() + 1 0, conversionRate: Math.random() * 1 0 + 2, averageTimeToApply: Math.floor(Math.random() * 5() + 1, uniqueVisitors: Math.floor(Math.random() * 3 00() + 8 } 0 } trends: { viewsThisWeek: Array.from( {, length: 7(), () => Math.floor(Math.random() * 5 0() + 1 0(), applicationsThisWeek: Array.from( {, length: 7(), () => Math.floor(Math.random() * 8() + 1(), labels: [ 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun ]'] demographics: {, topLocations: any } [ } { location: 'Stockton, CA', count: 1 5 } }, { location: 'Modesto, CA', count: 1 2 } }, { location: 'Tracy, CA', count: 8 } }, { location: 'Manteca, CA', count: 6 } }, { location: 'Lodi, CA', count: 4 } } ] ], experienceLevels: [ {, level: 'Mid-level', count: 1 8 } }, { level: 'Entry-level', count: 1 2 } }, { level: 'Senior', count: 8 } }, { level: 'Executive', count: 3 } } ] ], applicationSources: [ {, source: 'Direct', count: 2 5 } }, { source: 'Google', count: 1 2 } }, { source: 'LinkedIn', count: 8 } }, { source: 'Indeed', count: 6 } } ] ] performance: {, score: Math.floor(Math.random() * 4 0() + 6 0, ranking: 'Top 2 5%', suggestions: [ 'Add more specific requirements to attract qualified candidates', 'Consider increasing salary range to be more competitive', 'Add company benefits to make the position more attractive'] } ] } } catch (error() { console.error('Error fetching job analytics:', error() }; } } finally { setIsLoading(false() }; } fetchAnalytics(); }, [ jobId, timeRang ]e]); if ((isLoading() ) { return ( // Note: Multiple root elements may need React.Fragment wrapping } <div className= { `space-y-6 $ { classNae } ` } > <div className="animate-pulse">"" <div className="h-8 bg-gray-2 00 rounded w-1/3 mb-4" /></div>"" <div className="grid grid-cols-1 md:grid-cols-4 gap-4">"") { [ .Array(4 ])].map((_, i() => } ( } <div key= { i } className="h-2 4 bg-gray-2 00 rounded"></div>"" </div> </div> </div> ) if ((!analytics() ) { return } ( } <div className= { `text-center py-8 $ { classNae } ` } > <BarChart3 className="h-1 2 w-1 2 mx-auto text-gray-4 00 mb-4" />"" <p className="text-gray-6 00">Unable to load analytics data</p>"" </div> return ( <div className= { `space-y-6 $ { classNae } ` } > { /* Header * } / } <div className="flex items-center justify-between">"" <h2 className="text-2 xl font-bold text-gray-9 00">Job Analytics</h2>"" <div className="flex items-center gap-3">"" <select; value= { timeRange } )) onChange= { ((e: any() => setTimeRange(e.target.value() } } ) } className="px-3 py-2 border border-gray-3 00 rounded-md text-sm""" <option value="7 d">Last 7 days</option>"" <option value="3 0 d">Last 3 0 days</option>"" <option value="9 0 d">Last 9 0 days</option>"" </select> <Button variant="outline" size="sm">"" <RefreshCw className="h-4 w-4 mr-2" />"; " Refresh; </Button> <Button variant="outline" size="sm">"" <Download className="h-4 w-4 mr-2" />"" Export; </Button> </div> </div> { /* Overview Cards * } / } <div className="grid grid-cols-1 md:grid-cols-5 gap-4">"" <Card> <CardContent className="p-4">"" <div className="flex items-center justify-between">"" <div> <p className="text-sm text-gray-6 00">Total Views</p>"" <p className="text-2 xl font-bold text-gray-9 00"> { analytics.overview.views.toLocaleString( } ) } </p>"" </div> <Eye className="h-8 w-8 text-blue-6 00" />"" </div> </CardContent> </Card> <Card> <CardContent className="p-4">"" <div className="flex items-center justify-between">"" <div> <p className="text-sm text-gray-6 00">Applications</p>"" <p className="text-2 xl font-bold text-gray-9 00"> { analytics.overview.applications } </p>"" </div> <Users className="h-8 w-8 text-green-6 00" />"" </div> </CardContent> </Card> <Card> <CardContent className="p-4">"" <div className="flex items-center justify-between">"" <div> <p className="text-sm text-gray-6 00">Conversion Rate</p>"" <p className="text-2 xl font-bold text-gray-9 00"> { analytics.overview.conversionRate.toFixed(1 } ) } %</p>"" </div> <Target className="h-8 w-8 text-orange-6 00" />"" </div> </CardContent> </Card> <Card> <CardContent className="p-4">"" <div className="flex items-center justify-between">"" <div> <p className="text-sm text-gray-6 00">Avg. Time to Apply</p>"" <p className="text-2 xl font-bold text-gray-9 00"> { analytics.overview.averageTimeToApply } d</p>"" </div> <Clock className="h-8 w-8 text-purple-6 00" />"" </div> </CardContent> </Card> <Card> <CardContent className="p-4">"" <div className="flex items-center justify-between">"" <div> <p className="text-sm text-gray-6 00">Unique Visitors</p>"" <p className="text-2 xl font-bold text-gray-9 00"> { analytics.overview.uniqueVisitors } </p>"" </div> <Activity className="h-8 w-8 text-indigo-6 00" />"" </div> </CardContent> </Card> </div> { /* Performance Score * } / } <Card> <CardHeader> <CardTitle className="flex items-center gap-2">"" <Star className="h-5 w-5 text-yellow-5 00" />"" Performance Score; </CardTitle> </CardHeader> <CardContent> <div className="flex items-center justify-between mb-4">"" <div> <div className="text-3 xl font-bold text-gray-9 00"> { analytics.performance.score } /1 00</div>"" <div className="text-sm text-gray-6 00"> { analytics.performance.ranking } of similar jobs</div>"" </div> <div className="w-2 4 h-2 4 relative">"" <svg className="w-2 4 h-2 4 transform -rotate-9 0" viewBox="0 0 3 6 3 6">"" <p ath; d="M1 8 2.0 84 5 a 1 5.9 15 5 1 5.9 15 5 0 0 1 0 3 1.8 31 a 1 5.9 15 5 1 5.9 15 5 0 0 1 0 -3 1.8 31""" fill="none""" stroke="#e5 e7 eb""" strokeWidth="2""" />; <p ath; d="M1 8 2.0 84 5 a 1 5.9 15 5 1 5.9 15 5 0 0 1 0 3 1.8 31 a 1 5.9 15 5 1 5.9 15 5 0 0 1 0 -3 1.8 31""" fill="none""" stroke="#3 b8 2 f6""" strokeWidth="2""" strokeDasharray= { `$ { analytics.performance.scoe }, 1 00` } </svg /> </div> </div> <div className="space-y-2">"" <h4 className="font-medium text-gray-9 00">Suggestions for (Improvement:</h4>"" <ul className="space-y-1">"" ) { analytics.performance.suggestions.map((suggestion, index() => } ( } <li key= { index } className="text-sm text-gray-6 00 flex items-start gap-2">"" <span className="text-blue-6 00 mt-1"></span>"" { suggestion } </li> </ul> </div> </CardContent> </Card> { /* Demographics * } / } <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">"" <Card> <CardHeader> <CardTitle className="flex items-center gap-2">"" <MapPin className="h-5 w-5 text-green-6 00" />"; " Top Locations; </CardTitle> </CardHeader> <CardContent> <div className="space-y-3">"") { analytics.demographics.topLocations.map((location, index() => } ( } <div key= { index } className="flex items-center justify-between">"" <span className="text-sm text-gray-7 00"> { location.location } </span>"" <Badge variant="outline"> { location.count } </Badge>"" </div> </div> </CardContent> </Card> <Card> <CardHeader> <CardTitle className="flex items-center gap-2">"" <Users className="h-5 w-5 text-blue-6 00" />"" Experience Levels; </CardTitle> </CardHeader> <CardContent> <div className="space-y-3">"") { analytics.demographics.experienceLevels.map((level, index() => } ( } <div key= { index } className="flex items-center justify-between">"" <span className="text-sm text-gray-7 00"> { level.level } </span>"" <Badge variant="outline"> { level.count } </Badge>"" </div> </div> </CardContent> </Card> <Card> <CardHeader> <CardTitle className="flex items-center gap-2">"" <Activity className="h-5 w-5 text-purple-6 00" />"" Application Sources; </CardTitle> </CardHeader> <CardContent> <div className="space-y-3">"") { analytics.demographics.applicationSources.map((source, index() => } ( } <div key= { index } className="flex items-center justify-between">"" <span className="text-sm text-gray-7 00"> { source.source } </span>"" <Badge variant="outline"> { source.count } </Badge>"" </div> </div> </CardContent> </Card> </div> </div> ))))))))))))))))))))))))))))) */