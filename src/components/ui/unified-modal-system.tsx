import { cn } from '@/lib/utils'; import { motion, AnimatePresence } from '@/components/ui/card'; import { Cross2 Icon } from '@/components/ui/card'; import { cn } from '@/components/ui/card'; import { useModal, useFocusManagement } from '@/lib/ui/component-state-manager'; import type { ModalState } } from '@/lib/ui/component-state-manager; ; ' import { useRef } from "react"; "" import { useCallback } from "react"; "" import { useEffect } from "react"; "" 'use client ' // Base modal component with centralized state management; interface UnifiedModalProps { modal: ModalState;, onClose: (id: string() => void;, children: React.ReactNode; className? "undefined": string; size? "undefined": 'sm' | 'md' | 'lg' | 'xl' | 'full ' closeOnOverlayClick? "undefined": boolean; closeOnEscape? "undefined": boolean; showCloseButton? "undefined": boolean; } const sizeClasses = { sm: 'max-w-sm', md: 'max-w-md', lg: 'max-w-lg', xl: 'max-w-xl', full: 'max-w-full w-full h-full' } function UnifiedModal() { ); } : UnifiedModalProps() {; ; const { pushFocus, popFocus } = useFocusManagement(); const modalRef = useRef<HTMLDivElement>(null(); const previousActiveElement = useRef<HTMLElement | null>(null(); // Focus management; useEffect(() => { if ((modal.isOpen() ) { // Store the currently focused element; previousActiveElement.current = document.activeElement as HTMLElement; // Push to focus stack; pushFocus(modal.id(); // Focus the modal; if ((modalRef.current() ) { modalRef.current.focus(); } return () // Note: Multiple root elements may need React.Fragment, wrapping() => { // Pop from focus stack; popFocus(); // Restore focus to previous element; if ((previousActiveElement.current() ) { previousActiveElement.current.focus(); } }, [ modal.isOpen, modal.id, pushFocus, popFocu ]s]); // Escape key handler; useEffect(() => { if ((!modal.isOpen || !closeOnEscape() return; const handleEscape = (event: KeyboardEvent() } ) { if ((event.key === 'Escape') ) {; ; event.preventDefault(); onClose(modal.id(); } document.addEventListener('keydown', handleEscape(); return () => document.removeEventListener('keydown', handleEscape(); }, [ modal.isOpen, modal.id, onClose, closeOnEscap ]e]); // Prevent body scroll when modal is open; useEffect(() => { if ((modal.isOpen() ) { const originalStyle = window.getComputedStyle(document.body().overflow; document.body.style.overflow = 'hidden ' return () } { document.body.style.overflow = originalStyle; } }, [ modal.isOpe ]n]); if ((!modal.isOpen() return null; const handleOverlayClick = (event: React.MouseEvent() => ) { if ((closeOnOverlayClick && event.target === event.currentTarget() ) {; ; onClose(modal.id(); } return ( <motion.div; initial= { { opacity: 0 } } } animate= { { opacity: 1 } } } exit= { { opacity: 0 } } } transition= { { duration: 0.2 } } } className="fixed inset-0 z-5 0 flex items-center justify-center bg-black/5 0 backdrop-blur-sm"" " onClick= { handleOverlayClic } } k } role="dialog"" " aria-modal="true"" " aria-labelledby= { `modal-title-$ { modal. } d } ` } aria-describedby= { `modal-description-$ { modal. } d } ` } >; <motion.div; ref= { modalRef } initial= { { opacity: 0, scale: 0.9 5, y: 2 0 } } } animate= { { opacity: 1, scale: 1, y: 0 } } } exit= { { opacity: 0, scale: 0.9 5, y: 2 0 } } } transition= { { duration: 0.2 } } } className= { cn('relative m-4 rounded-lg bg-white p-6 shadow-xl', 'focus: outline-none, focus:ring-2, focus:ring-blue-5 00', sizeClasses[ siz ]e], size !== 'full' && 'max-h-[9 0, v ]h] overflow-y-auto', ; )) className; )) tabIndex= { - } 1 } onClick= { (e() => e.stopPropagation() } } ) } { showCloseButton && (; <button; } ) onClick= { () => onClose(modal.id()) } className= { cn('absolute right-4 top-4 rounded-md p-1', 'text-gray-4 00 hover:text-gray-6 00', 'focus: outline-none, focus:ring-2, focus:ring-blue-5 00', 'transition-colors' } ) } ) aria-label="Close modal"" " <Cross2 Icon className="h-5 w-5" />" " </button> { children } </motion.div> </motion.div>; // Modal container that manages all modals; export function UnifiedModalContainer() { {; ; const { modals, removeModal } = useModal(); // Sort modals by timestamp to maintain proper z-index order; const sortedModals = React.useMemo(() => { return [ .modal ]s].sort((a, b() } a.timestamp - b.timestamp(); } }, [ modal ]s]); return ( <AnimatePresence mode="wait">" ") { sortedModals.map((modal, index() => ( } <div key= { modal.idstyle= { { zIndex: 5 0 + index } } } > <UnifiedModal; modal= { modal } onClose= { removeModalsize= { modal.data?.size } closeOnOverlayClick= { modal.data?.closeOnOverlayClick } closeOnEscape= { modal.data?.closeOnEscapeshowCloseButton= { modal.data?.showCloseButton } className= { modal.data?.className } { modal.data?.content } </UnifiedModal> </div> </AnimatePresence>; // Hook for (easy modal management; ) export function useUnifiedModal() ) { {; const { addModal, updateModal, removeModal, clearModals, modals } =; ; useModal(); const openModal = useCallback(( content: React.ReactNode, ; ; options: { type? "undefined": ModalState[ 'type ]']; size? "undefined": 'sm' | 'md' | 'lg' | 'xl' | 'full ' closeOnOverlayClick? "undefined": boolean; closeOnEscape? "undefined": boolean; showCloseButton? "undefined": boolean; className? "undefined": string; data? "undefined": any; } )) ) = {} ) => { return addModal( { isOpen: true, type: options.type || 'dialog', data: { content, size: options.size || 'md', closeOnOverlayClick: options.closeOnOverlayClick ?? true, closeOnEscape: options.closeOnEscape ?? true, showCloseButton: options.showCloseButton ?? true, className: options.className, .options.data } ) ) } ); [ addModa ]l] const closeModal = useCallback(; ; ) (id: string() => { removeModal(id(); } [ removeModa ]l] const updateModalData = useCallback(; ; ) (id: string, data: any() => { updateModal(id, { data()); [ updateModa ]l] const closeAllModals = useCallback(() => { clearModals(); } }, [ clearModal ]s]); return { openModal, closeModal, updateModalData, closeAllModals, modals } // Specific modal types for (common use cases; export function ConfirmationModal() ) { : { title: string;, message: string;, onConfirm: () => void;, onCancel: () => void; confirmText? "undefined": string; cancelText? "undefined": string; variant? "undefined": 'default' | 'destructive'; } } ) { return ( <div className="space-y-4">" " <div> <h2 id="modal-title" className="text-lg font-semibold text-gray-9 00"> } " " { title } </h2> <p id="modal-description" className="mt-2 text-sm text-gray-6 00">" " { message } </p> </div> <div className="flex justify-end space-x-3">" " <button; onClick= { onCance } } l } className= { cn('rounded-md px-4 py-2 text-sm font-medium', 'border border-gray-3 00 bg-white text-gray-7 00', 'hover: bg-gray-5 0, focus:outline-none, focus:ring-2, focus:ring-blue-5 00', 'transition-colors' } )) } ) { cancelText } </button>; <button; onClick= { onConfir } } m } className= { cn('rounded-md px-4 py-2 text-sm font-medium', 'focus: outline-none, focus:ring-2, focus:ring-offset-2', 'transition-colors', variant === 'destructive' ? 'bg-red-6 00 text-white hover: bg-red-7 00, focus:ring-red-5 00' : 'bg-blue-6 00 text-white, hover:bg-blue-7 00, focus:ring-blue-5 00' } ) } ) { confirmText } </button> </div> </div>; // Alert modal for (simple notifications; export function AlertModal() ) { : { title: string;, message: string;, onClose: () => void; type? "undefined": 'info' | 'success' | 'warning' | 'error'; } } ) { const typeStyles = { info: 'text-blue-6 00', success: 'text-green-6 00', warning: 'text-yellow-6 00', error: 'text-red-6 00' } return ( <div className="space-y-4">" " <div> <h2; id="modal-title"" ") className= { cn('text-lg font-semibold', typeStyles[ typ ]e] } ) } { title } </h2 /> <p id="modal-description" className="mt-2 text-sm text-gray-6 00">" " { message } </p> </div> <div className="flex justify-end">"; " <button; onClick= { onClos } } e } className= { cn('rounded-md px-4 py-2 text-sm font-medium', 'bg-blue-6 00 text-white hover:bg-blue-7 00', 'focus: outline-none, focus:ring-2, focus:ring-blue-5 00', 'transition-colors' } ) } ) >; OK; </button> </div> </div> // Performance optimized versions; export const UnifiedModalMemo = React.memo(UnifiedModal(); export const UnifiedModalContainerMemo = React.memo(UnifiedModalContainer(); // Default export; export default UnifiedModalContainer; ))))))))))))))