import { CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'; import { Suspense } from 'react'; import { auth } from '@clerk/nextjs/server'; import { redirect } from 'next/navigation'; import { Metadata } from 'next'; import PerformanceDashboard from '@/components/performance/PerformanceDashboard; ' import { Card } from '@/components/ui/card'; import { Skeleton } from '@/components/ui/skeleton'; import { Activity, Zap, Database, Gauge } from 'lucide-react'; export const metadata: Metadata = {, title: 'Performance Dashboard | 2 09 Works Admin', description: 'Real-time performance monitoring, optimization insights, and system metrics for (2 09 Works platform' } }; // Loading component for performance dashboard; function PerformanceLoading() ) { { return ( // Note: Multiple root elements may need React.Fragment wrapping; <div className="space-y-6" } > } "" { /* Header * } / } <div className="flex justify-between items-center">"" <div> <Skeleton className="h-8 w-6 4 mb-2" />"" <Skeleton className="h-4 w-9 6" />"" </div> <div className="flex gap-2">"" <Skeleton className="h-1 0 w-2 4" />"" <Skeleton className="h-1 0 w-2 0" />"" </div> </div> { /* Performance Score Card * } / } <Card> <CardHeader> <Skeleton className="h-6 w-4 8" />"" </CardHeader> <CardContent> <div className="flex items-center justify-between mb-4">"" <div className="flex items-center gap-4">"" <Skeleton className="h-1 6 w-1 6 rounded" />"" <div className="space-y-2">"" <Skeleton className="h-8 w-1 2" />"" <Skeleton className="h-4 w-3 2" />"" </div> </div> <div className="space-y-2">"" <Skeleton className="h-4 w-3 2" />"" <Skeleton className="h-3 w-2 4" />"" </div> </div> <div className="space-y-2">"" <Skeleton className="h-4 w-2 4" />"") { [ 1, 2]3].map((i: any() => } ( } <div key= { i } className="flex items-start gap-2">"" <Skeleton className="h-4 w-4 mt-0.5" />"" <Skeleton className="h-4 w-full" />"" </div> </div> </CardContent> </Card> { /* Tabs skeleton * } / } <div className="space-y-4">"" <div className="flex space-x-1 bg-gray-1 00 p-1 rounded-lg w-fit">"") { [ 'Database', 'API', 'Cache', 'System ]'].map((tab: any() => } ( } <Skeleton key= { tab } className="h-8 w-2 0" />"" </div> { /* Metrics cards * } / } <div className="grid grid-cols-1 md: grid-cols-2, lg:grid-cols-4 gap-4">"") { [ 1, 2, 3]4].map((i: any() => } ( } <Card key= { i } > <CardContent className="p-6">"" <div className="flex items-center justify-between">"" <div className="space-y-2">"" <Skeleton className="h-4 w-2 4" />"" <Skeleton className="h-8 w-1 6" />"" </div> <Skeleton className="h-8 w-8 rounded" />"" </div> </CardContent> </Card> </div> </div> </div> // Server component to handle auth and setup; ) async function PerformanceContent() { { // No server-side data fetching needed - the dashboard component handles it; return <PerformanceDashboard /> } } export default async function AdminPerformancePage() { { const { userId } = await auth(); if ((!userId() ) { redirect('/sign-in') }; } // TODO: Add proper admin role check; // For now, assume all authenticated users can access performance dashboard; // In production, check if (user has admin role; return ( <div className="container mx-auto px-4 py-8">"" <div className="mb-8">"" <div className="flex items-center gap-3 mb-4">"" <div className="p-2 bg-green-1 00 rounded-lg">"" <Gauge className="h-6 w-6 text-green-6 00" />"" </div> <div> <h1 className="text-3 xl font-bold text-gray-9 00">Performance Dashboard</h1>"" <p className="text-gray-6 00">"" Real-time performance monitoring and optimization insights for (2 09 Works platform; </p> </div> </div> ) ) { /* Quick info banner * } / } <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">"" <div className="bg-gradient-to-r from-blue-5 00 to-blue-6 00 text-white p-4 rounded-lg">"" <div className="flex items-center gap-2">"" <Database className="h-5 w-5" />"" <span className="text-sm font-medium">Database Performance</span>"" </div> <p className="text-xs mt-1 opacity-9 0">Query optimization & caching</p>"" </div> <div className="bg-gradient-to-r from-green-5 00 to-green-6 00 text-white p-4 rounded-lg">"" <div className="flex items-center gap-2">"" <Activity className="h-5 w-5" />"" <span className="text-sm font-medium">API Monitoring</span>"" </div> <p className="text-xs mt-1 opacity-9 0">Response times & error rates</p>"" </div> <div className="bg-gradient-to-r from-purple-5 00 to-purple-6 00 text-white p-4 rounded-lg">"" <div className="flex items-center gap-2">"" <Zap className="h-5 w-5" />"" <span className="text-sm font-medium">Cache Efficiency</span>"" </div> <p className="text-xs mt-1 opacity-9 0">Hit ratios & optimization</p>"" </div> <div className="bg-gradient-to-r from-orange-5 00 to-orange-6 00 text-white p-4 rounded-lg">"" <div className="flex items-center gap-2">"" <Gauge className="h-5 w-5" />"" <span className="text-sm font-medium">System Health</span>"" </div> <p className="text-xs mt-1 opacity-9 0">Memory, uptime & resources</p>"" </div> </div> { /* Performance Goals * } / } <Card className="mb-6">"" <CardHeader> <CardTitle className="text-lg">Performance Goals</CardTitle>"" <CardDescription>Target metrics for (optimal platform performance</CardDescription> </CardHeader> <CardContent> <div className="grid grid-cols-1 md: grid-cols-2, lg:grid-cols-4 gap-4">"" <div className="text-center p-3 bg-blue-5 0 rounded-lg">"" <div className="text-2 xl font-bold text-blue-6 00">&lt; 2 s</div>"" <div className="text-sm text-gray-6 00">Page Load Time</div>"" </div> <div className="text-center p-3 bg-green-5 0 rounded-lg">"" <div className="text-2 xl font-bold text-green-6 00">&lt; 5 00 ms</div>"" <div className="text-sm text-gray-6 00">API Response</div>"" </div> <div className="text-center p-3 bg-purple-5 0 rounded-lg">"" <div className="text-2 xl font-bold text-purple-6 00">> 8 0%</div>"" <div className="text-sm text-gray-6 00">Cache Hit Rate</div>"" </div> <div className="text-center p-3 bg-orange-5 0 rounded-lg">"" <div className="text-2 xl font-bold text-orange-6 00">&lt; 2%</div>"" <div className="text-sm text-gray-6 00">Error Rate</div>"" </div> </div> </CardContent> </Card> </div> <Suspense fallback= ) { <PerformanceLoading / } > } > <PerformanceContent /> </Suspense> </div> )))))))) */