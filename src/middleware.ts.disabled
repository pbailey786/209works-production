import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { getToken } from 'next-auth/jwt';

// Routes that require authentication
const protectedRoutes = [
  '/dashboard',
  '/profile',
  '/alerts',
  '/employers/dashboard',
  '/employers/my-jobs',
  '/employers/applicants',
  '/employers/settings',
  '/employers/create-job-post',
  '/employers/post-job-simple',
];

// Routes that should skip onboarding check
const skipOnboardingRoutes = [
  '/onboarding',
  '/signin',
  '/signup',
  '/api',
  '/_next',
  '/favicon.ico',
];

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;

  // Skip middleware for static files and API routes
  if (
    pathname.startsWith('/_next') ||
    pathname.startsWith('/api') ||
    pathname.includes('.') ||
    skipOnboardingRoutes.some(route => pathname.startsWith(route))
  ) {
    return NextResponse.next();
  }

  // Check if route requires authentication
  const isProtectedRoute = protectedRoutes.some(route => pathname.startsWith(route));
  
  if (!isProtectedRoute) {
    return NextResponse.next();
  }

  // Get the token
  const token = await getToken({ 
    req: request, 
    secret: process.env.NEXTAUTH_SECRET 
  });

  // If no token, redirect to signin
  if (!token) {
    const signInUrl = new URL('/signin', request.url);
    signInUrl.searchParams.set('callbackUrl', pathname);
    return NextResponse.redirect(signInUrl);
  }

  // Check onboarding status for authenticated users
  if (token && !token.onboardingCompleted && pathname !== '/onboarding') {
    const onboardingUrl = new URL('/onboarding', request.url);
    return NextResponse.redirect(onboardingUrl);
  }

  // Role-based redirects
  if (token) {
    // Redirect employers to their dashboard if they try to access job seeker routes
    if (token.role === 'employer' && pathname.startsWith('/dashboard') && pathname !== '/dashboard') {
      return NextResponse.redirect(new URL('/employers/dashboard', request.url));
    }

    // Redirect job seekers to their dashboard if they try to access employer routes
    if (token.role === 'jobseeker' && pathname.startsWith('/employers/')) {
      return NextResponse.redirect(new URL('/dashboard', request.url));
    }

    // Redirect to appropriate dashboard for generic /dashboard route
    if (pathname === '/dashboard' && token.role === 'employer') {
      return NextResponse.redirect(new URL('/employers/dashboard', request.url));
    }
  }

  return NextResponse.next();
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
};
