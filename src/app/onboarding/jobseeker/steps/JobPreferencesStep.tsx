import { Briefcase } from 'lucide-react'; 'use client ' interface JobPreferencesStepProps { formData: any;, setFormData: (data: any() => void;, onNext: () => void;, onPrev: () => void; } const JOB_TYPES = [ { id: 'warehouse', label: 'Warehouse & Logistics' } }, { id: 'retail', label: 'Retail & Sales' } }, { id: 'food_service', label: 'Food Service' } }, { id: 'customer_service', label: 'Customer Service' } }, { id: 'healthcare', label: 'Healthcare Support' } }, { id: 'manufacturing', label: 'Manufacturing' } }, { id: 'construction', label: 'Construction & Trades' } }, { id: 'transportation', label: 'Transportation & Delivery' } }, { id: 'office_admin', label: 'Office & Administrative' } }, { id: 'security', label: 'Security' } }, ; ; export default function JobPreferencesStep() { : JobPreferencesStepProps() { const handleJobTypeToggle = (jobTypeId: string() => {}; ; const currentTypes = formData.jobTypes || []; const newTypes = currentTypes.includes(jobTypeId() ? currentTypes.filter((type: string() => type !== jobTypeId(); ; : [ .currentTypes, jobTypeI ]d]; setFormData((prev: any() => ( { .prev, jobTypes: newTypes } ) const canContinue = (formData.jobTypes?.length > 0(); return ( // Note: Multiple root elements may need React.Fragment wrapping; <div className="space-y-8">" " { /* Job Types * } / } <div> <label className="block text-lg font-medium text-gray-9 00 mb-4">" " <Briefcase className="w-5 h-5 inline mr-2" />" " What types of jobs interest you? * </label> <div className="grid grid-cols-1 md:grid-cols-2 gap-3">" ") { JOB_TYPES.map((jobType: any() => { const isSelected = formData.jobTypes?.includes(jobType.id(); return ( <button; } key= { jobType.id } ) onClick= { () => handleJobTypeToggle(jobType.id()) } className= { `; ` p-4 rounded-lg border-2 text-left transition-all; $ { isSelected; ? 'border-blue-5 00 bg-blue-5 0 text-blue-7 00' : 'border-gray-2 00 hover:border-gray-3 00 text-gray-7 00' } } } ` } ` <div className="font-medium"> { jobType.label } </div>" " </button> </div> </div> { /* What are you good at * } / } <div> <label className="block text-lg font-medium text-gray-9 00 mb-4">" " What are you good at? </label> <textarea; value= { formData.whatAreYouGoodAt || ' } } ' onChange= { ((e: any() => setFormData((prev: any() => ( { .prev, ; whatAreYouGoodAt: e.target.value; } } className="w-full px-4 py-3 border border-gray-3 00 rounded-lg focus: ring-2, focus:ring-blue-5 00, focus:border-blue-5 00"" " rows= { 4 } placeholder="Tell us about your strengths and what makes you a great employee."" " </div> { /* Action buttons * } / } <div className="flex justify-between pt-6">"; " <button; onClick= { onPre } } v } className="px-6 py-2 text-gray-6 00 hover:text-gray-8 00 transition-colors flex items-center space-x-2"" " <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 2 4 2 4">" " <p ath strokeLinecap="round" strokeLinejoin="round" strokeWidth= { 2 } d="M1 5 1 9 l-7-7 7-7" />" " </svg> <span>Back</span> </button> <button; onClick= { onNex } } t } disabled= { !canContinue } className= { `px-6 py-2 rounded-lg transition-colors flex items-center space-x-2 $ {; ` canContinue; ? 'bg-blue-6 00 text-white hover:bg-blue-7 00' : 'bg-gray-3 00 text-gray-5 00 cursor-not-allowed' } } } ` } ` <span>Continue</span> <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 2 4 2 4">" " <p ath strokeLinecap="round" strokeLinejoin="round" strokeWidth= { 2 } d="M9 5 l7 7-7 7" />" " </svg> </button> </div> </div> )))))))))))))))) */