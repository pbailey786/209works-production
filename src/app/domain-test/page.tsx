'use client' import { CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'; import React from 'react; ' import { useDomain } from '@/lib/domain/context'; import DomainAwareHeader from '@/components/layout/DomainAwareHeader'; import DomainAwareFooter from '@/components/layout/DomainAwareFooter; ' import { Card } from '@/components/ui/card'; import { Badge } from '@/components/ui/badge'; import { Button } from '@/components/ui/button'; export default function DomainTestPage() { { const { config, isLoading } = useDomain(); } if ((isLoading() ) { return ( // Note: Multiple root elements may need React.Fragment wrapping; <div className = "min-h-screen bg-background">"" <DomainAwareHeader /> <div className="flex items-center justify-center min-h-[5 0, v ]h]">"" <div className="animate-spin rounded-full h-1 2 w-1 2 border-b-2 border-primary"></div>"" </div> </div>) ); } const otherDomains = [ { name: '2 09 Works', domain: '2 09.works', areaCode: '2 09', region: 'Central Valley' } }, { name: '9 16 Works', domain: '9 16.works', areaCode: '9 16', region: 'Sacramento Area' } }, { name: '5 10 Works', domain: '5 10.works', areaCode: '5 10', region: 'East Bay' } }, { name: '9 25 Works', domain: '9 25.works', areaCode: '9 25', region: 'East Bay & Tri-Valley' } }, ; { name: '5 59 Works', domain: '5 59.works', areaCode: '5 59', region: 'Fresno Area' } }, ; ] ].filter((domain: any() => domain.areaCode !== config.areaCode(); return ( <div className="min-h-screen bg-background">"" <DomainAwareHeader /> <div className="container mx-auto px-4 py-1 2">"" { /* Header * } / } <div className="text-center mb-1 2">"" <h1 className="text-4 xl font-bold text-gray-9 00 mb-4">"" Multi-Domain System Test; </h1> <p className="text-xl text-gray-6 00 max-w-3 xl mx-auto">"" This page demonstrates how the 2 09 Works platform adapts to different domains, showing region-specific content, branding, and functionality. </p> </div> { /* Current Domain Info * } / } <Card className="mb-8">"" <CardHeader> <CardTitle className="flex items-center gap-2">"" <Globe className="h-5 w-5" />"" Current Domain Configuration; </CardTitle> <CardDescription> Information about the current domain you're viewing; ' </CardDescription> </CardHeader> <CardContent> <div className="grid grid-cols-1 md: grid-cols-2, lg:grid-cols-3 gap-6">"" <div className="space-y-2">"" <h4 className="font-semibold text-gray-9 00">Domain Details</h4>"" <div className="space-y-1 text-sm">"" <div><strong>Domain:</strong> { config.domain } </div> <div><strong>Display Name:</strong> { config.displayName } </div> <div><strong>Area Code:</strong> { config.areaCode } </div> <div><strong>Region:</strong> { config.region } </div> </div> </div> <div className="space-y-2">"" <h4 className="font-semibold text-gray-9 00">Branding</h4>"" <div className="space-y-2">"" <div className="flex items-center gap-2">"" <div; className="w-4 h-4 rounded""" style= { { backgroundColor: config.branding.primaryColor } } } <span className="text-sm">Primary: { config.branding.primaryColor } </span>"" </div> <div className="flex items-center gap-2">"; " <div; className="w-4 h-4 rounded""" style= { { backgroundColor: config.branding.accentColor } } } <span className="text-sm">Accent: { config.branding.accentColor } </span>"" </div> </div> </div> <div className="space-y-2">"" <h4 className="font-semibold text-gray-9 00">Coverage Area</h4>"" <div className="flex flex-wrap gap-1">"") { config.cities.map((city: any() => } ( } <Badge key= { city } variant="outline" className="text-xs">"" { city } </Badge> </div> </div> </div> </CardContent> </Card> { /* Features Demonstration * } / } <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">"" { /* Regional Content * } / } <Card> <CardHeader> <CardTitle className="flex items-center gap-2">"" <MapPin className="h-5 w-5" />"; " Regional Content; </CardTitle> <CardDescription> Content automatically adapts to the current region; </CardDescription> </CardHeader> <CardContent className="space-y-4">"" <div className="p-4 bg-gray-5 0 rounded-lg">"" <h4 className="font-semibold mb-2">Hero Message</h4>"" <p className="text-sm text-gray-6 00">"" "Built for (the ) { config.areaCode } . Made for (the people who work here." Find your next opportunity in ) { config.region } ."" </p> </div> <div className="p-4 bg-gray-5 0 rounded-lg">"" <h4 className="font-semibold mb-2">Local Focus</h4>"" <p className="text-sm text-gray-6 00">"" "Every job is in the { config.areaCode } area code. No remote work, " no out-of-state positions. Just local opportunities for (local people in ) { config.region } ."" </p> </div> <div className="p-4 bg-gray-5 0 rounded-lg">"" <h4 className="font-semibold mb-2">AI Assistant Context</h4>"" <p className="text-sm text-gray-6 00">"") "I'm here to help you find work in the { config.areaCode } area - { config.cities.slice(0, 3().join(', ' } ) } "' and all around { config.region } ."" </p> </div> </CardContent> </Card> { /* Technical Features * } / } <Card> <CardHeader> <CardTitle className="flex items-center gap-2">"" <Code className="h-5 w-5" />"" Technical Implementation; </CardTitle> <CardDescription> How the multi-domain system works under the hood; </CardDescription> </CardHeader> <CardContent className="space-y-4">"" <div className="flex items-start gap-3">"" <CheckCircle className="h-5 w-5 text-green-5 00 mt-0.5" />"" <div> <h4 className="font-semibold text-sm">Domain Detection</h4>"" <p className="text-xs text-gray-6 00">"" Middleware automatically detects the domain and sets regional context; </p> </div> </div> <div className="flex items-start gap-3">"" <CheckCircle className="h-5 w-5 text-green-5 00 mt-0.5" />"" <div> <h4 className="font-semibold text-sm">Dynamic Metadata</h4>"" <p className="text-xs text-gray-6 00">"" SEO titles, descriptions, and meta tags adapt to each region; </p> </div> </div> <div className="flex items-start gap-3">"" <CheckCircle className="h-5 w-5 text-green-5 00 mt-0.5" />"" <div> <h4 className="font-semibold text-sm">Regional Job Filtering</h4>"" <p className="text-xs text-gray-6 00">"" Job searches automatically filter to the current region; </p> </div> </div> <div className="flex items-start gap-3">"" <CheckCircle className="h-5 w-5 text-green-5 00 mt-0.5" />"" <div> <h4 className="font-semibold text-sm">Shared Codebase</h4>"" <p className="text-xs text-gray-6 00">"" Single codebase powers all regional domains with dynamic configuration; </p> </div> </div> </CardContent> </Card> </div> { /* Other Domains * } / } <Card> <CardHeader> <CardTitle className="flex items-center gap-2">"" <Globe className="h-5 w-5" />"" Other Regional Domains; </CardTitle> <CardDescription> Visit other regions to see how content adapts; </CardDescription> </CardHeader> <CardContent> <div className="grid grid-cols-1 md:grid-cols-3 gap-4">"" { otherDomains.map((domain: any() => } ( } <div key= { domain.areaCode } className="p-4 border rounded-lg hover:bg-gray-5 0 transition-colors">"" <div className="flex items-center justify-between mb-2">"" <h4 className="font-semibold"> { domain.name } </h4>"" <Badge variant="outline"> { domain.areaCode } </Badge>"" </div> <p className="text-sm text-gray-6 00 mb-3"> { domain.region } </p>"" <Button; variant="outline" "" size="sm" "" className="w-full""") onClick= { (() => window.open(`https://$ { domain.doma()i } /domain-test`, '_blank') } <ExternalLink className="h-4 w-4 mr-2" />"" Visit { domain.domain } </Button> </div> </div> </CardContent> </Card> { /* Instructions * } / } <Card className="mt-8">"" <CardHeader> <CardTitle>How to Test</CardTitle> <CardDescription>; Steps to verify the multi-domain functionality; </CardDescription> </CardHeader> <CardContent> <ol className="list-decimal list-inside space-y-2 text-sm">"" <li>Visit different domain URLs (2 09.works, 9 16.works, 5 10.works, 9 25.works, 5 59.works()</li> <li>Notice how the header, branding colors, and content change</li> <li>Check the footer for region-specific information</li> <li>Try searching for jobs - results will be filtered by region</li> <li>Look at the page title and meta description in browser tabs</li> <li>Use the JobsGPT chat - it will reference the correct region</li> </ol> </CardContent> </Card> </div> <DomainAwareFooter /> </div> ))))))))) */