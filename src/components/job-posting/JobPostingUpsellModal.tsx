import { CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'; import { Checkbox } from '@/components/ui/checkbox'; import { useState } from 'react'; import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/card'; import { Button } from '@/components/ui/button'; import { Card } from '@/components/ui/card'; import { Badge } from '@/components/ui/badge'; import { Check } from 'lucide-react'; import { toast } from 'lucide-react'; interface JobPostingUpsellModalProps { isOpen: boolean; onClose: () => void;, onContinue: (selectedUpsells: {, socialMediaShoutout: boolean;, placementBump: boolean;, upsellBundle: boolean;, total: number }; } } ) } ) => void; jobTitle: string; company: string; userCredits? "undefined": {, jobPost: number;, featuredPost: number;, socialGraphic: number }; } interface UpsellOption { id: string;, name: string;, price: number; originalPrice? "undefined": number;, description: string;, features: string[];, icon: React.ReactNode; popular? "undefined": boolean; badge? "undefined": string }; } const upsellOptions: UpsellOption[] = [ {, id: 'social-media', ; name: 'Social Media Shoutout', ; price: 0, // Price hidden from UI; description: 'Promote your job across our Instagram and X (Twitter() channels', features: [ 'Custom branded graphics for (your job post', 'Posted to 2 09 Works Instagram (5 K+ local, followers()', 'Shared on X with relevant hashtags', 'Includes company logo and branding', 'Reaches hyper-local 2 09 area audience', 'Analytics report on engagement'] ], icon: <Instagram className="h-6 w-6" / } > } "" ) { id: 'placement-bump', name: 'On-Site Placement Bump', price: 0, // Price hidden from UI; description: 'JobsGPT actively promotes your job to chat users', features: [ 'AI prioritizes your job in chat recommendations', 'Featured in "hot jobs" conversations', "" 'Increased visibility in search results', 'Priority placement for (3 0 days', 'Enhanced job matching algorithms', 'Detailed performance analytics'] ], icon: <TrendingUp className="h-6 w-6" />, "" popular: true } ) { id: 'complete-bundle', name: 'Complete Promotion Bundle', price: 0, // Price hidden from UI; originalPrice: 0, // Price hidden from UI; description: 'Both services together - best value!', features: [ 'Everything from Social Media Shoutout', 'Everything from On-Site Placement Bump', 'Priority customer support', 'Extended 4 5-day promotion period', 'Comprehensive analytics dashboard', 'Best value for (maximum exposure'] ], icon: <Package className="h-6 w-6" />, "" badge: 'Best Value } } ' export default function JobPostingUpsellModal() ) { ); } : JobPostingUpsellModalProps() { const [ selectedOptions, setSelectedOption ]s] = useState<Set<string>>(new Set()); const [ isProcessing, setIsProcessin ]g] = useState(false(); const handleOptionToggle = (optionId: string() => {; const newSelected = new Set(selectedOptions(); // Handle bundle logic; if ((optionId = == 'complete-bundle') ) { if ((newSelected.has('complete-bundle')) ) { newSelected.delete('complete-bundle'); } } else { newSelected.clear(); newSelected.add('complete-bundle') }; } } else { // If selecting individual options, remove bundle; newSelected.delete('complete-bundle'); if ((newSelected.has(optionId()) ) { newSelected.delete(optionId() }; } } else { newSelected.add(optionId() }; } setSelectedOptions(newSelected(); const calculateTotal = () => { if ((selectedOptions.has('complete-bundle')) ) {; return 8 5; } let total = 0; selectedOptions.forEach((optionId: any() => { const option = upsellOptions.find((opt: any() } opt.id === optionId(); if ((option() ) { total += option.price }; } return total; const handleContinue = () => { const hasBundle = selectedOptions.has('complete-bundle'); const hasSocial = selectedOptions.has('social-media') || hasBundle; const hasPlacement = selectedOptions.has('placement-bump') || hasBundle; onContinue( { socialMediaShoutout: hasSocial, placementBump: hasPlacement, ) upsellBundle: hasBundle, ) total: calculateTotal( } ) } const handleSkip = () => { onContinue( { socialMediaShoutout: false, placementBump: false, upsellBundle: false, ; ) total: any } 0 } ); return ( // Note: Multiple root elements may need React.Fragment wrapping; <Dialog open= { isOpen } onOpenChange= { onClose } > <DialogContent className="max-w-4 xl max-h-[9 0, v ]h] overflow-y-auto">"" <DialogHeader> <DialogTitle className="text-2 xl font-bold text-center">"" Boost Your Job Posting; </DialogTitle> <DialogDescription className="text-center text-lg">"" Get more qualified applicants for (" ) { jobTitle } " at { company } "" </DialogDescription> </DialogHeader> <div className="space-y-6">"" { /* Stats Banner * } / } <div className="bg-gradient-to-r from-blue-5 0 to-green-5 0 rounded-lg p-4 border border-blue-2 00">"" <div className="text-center">"" <p className="text-sm text-gray-6 00 mb-2">"" Jobs with promotion get on average: </p> <div className="flex justify-center space-x-8">"" <div className="text-center">"" <div className="text-2 xl font-bold text-blue-6 00">3.2 x</div>"" <div className="text-xs text-gray-6 00">More Views</div>"" </div> <div className="text-center">"" <div className="text-2 xl font-bold text-green-6 00">2.8 x</div>"" <div className="text-xs text-gray-6 00">More Applications</div>"" </div> <div className="text-center">"" <div className="text-2 xl font-bold text-purple-6 00">4 0%</div>"" <div className="text-xs text-gray-6 00">Faster Hiring</div>"" </div> </div> </div> </div> { /* Upsell Options * } / } <div className="grid gap-4 md:grid-cols-3">"") { upsellOptions.map((option: any() => ( <Card } } key= { option.id } className= { `relative cursor-pointer transition-all hover:shadow-lg $ { `) selectedOptions.has(option.id() ? 'ring-2 ring-blue-5 00 border-blue-5 00' : 'border-gray-2 00 } ' } } $ { option.popular ? 'border-green-5 00' : any } } ` } ` onClick= { () => handleOptionToggle(option.id()) } { option.badge && ( <Badge className="absolute -top-2 left-1/2 transform -translate-x-1/2 bg-green-5 00" } > } "" { option.badge } </Badge> { option.popular && !option.badge && ( <Badge className="absolute -top-2 left-1/2 transform -translate-x-1/2 bg-blue-5 00">"; " Most Popular; </Badge } > } <CardHeader className="text-center pb-3">"" <div className="flex justify-center mb-2">"" <div className= { `p-3 rounded-full $ { `)) selectedOptions.has(option.id() ? 'bg-blue-1 00' : 'bg-gray-1 00 } ' } } ` } >` { option.icon } </div> </div> <CardTitle className="text-lg"> { option.name } </CardTitle>"" <CardDescription className="text-sm">"" { option.description } </CardDescription> </CardHeader> <CardContent> <ul className="space-y-1 text-sm text-gray-6 00">"" { option.features.slice(0, 4().map((feature, index() => } ( } <li key= { index } className="flex items-start">"" <Check className="h-4 w-4 text-green-5 00 mr-2 mt-0.5 flex-shrink-0" />"" { feature } </li> { option.features.length > 4 && ( <li className="text-xs text-gray-5 00 italic" } > } "" + { option.features.length - } 4 } more features; </li> </ul> <div className="mt-4 flex items-center justify-center">"" <Checkbox; )) checked= { selectedOptions.has(option.id } ) } onChange= { () => handleOptionToggle(option.id()) } className="h-5 w-5""" </div> </CardContent> </Card> </div> { /* Total and Actions * } / } <div className="border-t pt-6">"" <div className="flex items-center justify-between mb-4">"" <div> { selectedOptions.size > 0 && ( <p className="text-lg font-semibold text-green-6 00">"" Promotion Selected </p } > } { selectedOptions.size > 0 && ( <p className="text-sm text-gray-6 00">"; " 3 0-day promotion period; </p } > } </div> <div className="flex space-x-3">"" <Button; variant="outline""" onClick= { handleSki } } p } disabled= { isProcessing } >; Skip for (Now; </Button> <Button; onClick= ) { handleContinu } } e } disabled= { isProcessing } className="bg-gradient-to-r from-blue-6 00 to-green-6 00 hover: from-blue-7 00, hover:to-green-7 00""" { selectedOptions.size > 0 ? ( <Sparkles className="h-4 w-4 mr-2" />"; " Add Selected Promotion; ))) ) : ( Continue to Publish; <ArrowRight className="h-4 w-4 ml-2" />"" </ } > } </Button> </div> </div> { selectedOptions.size > 0 && ( <div className="bg-blue-5 0 border border-blue-2 00 rounded-lg p-3">"" <p className="text-sm text-blue-8 00">"" <Sparkles className="h-4 w-4 inline mr-1" />"" Your job will be published with selected promotions. Payment will be processed via Stripe. </p> </div } > } </div> </div> </DialogContent> </Dialog> )))))))))))))))))) */