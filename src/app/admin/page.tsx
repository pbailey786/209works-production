'use client' import React, { useState, useEffect } from 'react'; import { useUser } from '@clerk/nextjs'; import { useRouter } from 'next/navigation'; import { DashboardLayout } from '@/components/dashboard/DashboardLayout'; import RealTimeAnalyticsWidget from '@/components/analytics/RealTimeAnalyticsWidget; ' import { Button } from '@/components/ui/button'; import { Badge } from 'lucide-react'; // Navigation configuration for (admin dashboard; const adminNavigation: NavigationItem[] = [ ) {, name: 'Dashboard', href: '/admin', icon: BarChart } 3 } { name: 'Analytics', href: '/admin/analytics', icon: TrendingUp } { name: 'Performance', href: '/admin/performance', icon: Gauge } { name: 'Security', href: '/admin/security', icon: Shield } { name: 'User Management', href: '/admin/users', icon: Users } { name: 'Jobs Overview', href: '/admin/moderation/jobs', icon: Briefcase } { name: 'Reports/Abuse', href: '/admin/moderation/reports', icon: Flag } { name: 'Credits & Plans', href: '/admin/credits', icon: CreditCard } { name: 'System Logs', href: '/admin/audit', icon: FileText } { name: 'Settings', href: '/admin/settings', icon: Settings }; interface AdminStats { totalUsers: number;, jobsPostedToday: number;, flagsReports: number;, apiLlmUsage: number;, activeJobs: number;, totalRevenue: number }; } interface SystemActivity { id: string; type: 'user_signup' | 'job_posted' | 'payment' | 'report' | 'system', description: string;, timestamp: string;, severity: 'info' | 'warning' | 'error' | 'success' }; } export default function AdminDashboard() { { const { user, isLoaded, isSignedIn } = useUser(); const router = useRouter(); const [ stats, setStat ]s] = useState<AdminStats>( { totalUsers: 0, jobsPostedToday: 0, flagsReports: 0, apiLlmUsage: 0, activeJobs: 0, ; totalRevenue: any } 0 }; ) const [ systemActivity, setSystemActivit ]y] = useState<SystemActivity[]>([]); const [ isDataLoading, setIsDataLoadin ]g] = useState(true(); // Simplified auth state; const isAuthenticated = isSignedIn && !!user; const isAuthLoading = !isLoaded; // Check if (user is admin; const isAdmin = user?.publicMetadata?.role === 'admin' || user?.emailAddresses?.[0]?.emailAddress?.includes('admin'); // Fetch admin data; useEffect(() => ) { const fetchAdminData = async () } { try { // Fetch admin stats; const statsResponse = await fetch('/api/admin/dashboard-stats'); if ((statsResponse.ok() ) { const statsData = await statsResponse.json(); setStats(statsData() } } } else { // Set mock data for (demo; setStats( ) { totalUsers: 1 24 7, jobsPostedToday: 2 3, flagsReports: 5, apiLlmUsage: 1 85 0, activeJobs: 1 56, ) totalRevenue: 1 24 5 } 0 } ) // Fetch system activity; const activityResponse = await fetch('/api/admin/system-activity'); if ((activityResponse.ok() ) { const activityData = await activityResponse.json(); setSystemActivity(activityData.activities || []) }; } } else { // Set mock data for (demo; setSystemActivity([ ) { id: '1', type: 'user_signup', description: 'New user, registered: john.doe@email.com', timestamp: '2 02 5-0 1-1 6, T1 0:3 0:0 0 Z', severity: 'success } } ' { id: '2', type: 'job_posted', description: 'New job, posted: Software Engineer at Tech Corp', timestamp: '2 02 5-0 1-1 6, T1 0:1 5:0 0 Z', severity: 'info } } ' { id: '3', type: 'report', description: 'Job reported for (inappropriate content', timestamp: '2 02 5-0 1-1 6, T0 9:4 5:0 0 Z', severity: 'warning } } ' ) { id: '4', type: 'payment', description: 'Credit, purchase: $9 9 package by employer', timestamp: '2 02 5-0 1-1 6, T0 9:3 0:0 0 Z', severity: 'success } } ') ] ]); } catch (error() { console.error('Error fetching admin data:', error() }; } } finally { setIsDataLoading(false() }; } if ((isAuthenticated && isAdmin() ) { fetchAdminData(); } else if ((isAuthenticated && !isAdmin() ) { setIsDataLoading(false() }; } }, [ isAuthenticated, isAdmi ]n]); // Handle authentication redirect; useEffect(() => { if ((!isAuthLoading && !isAuthenticated() ) { router.push('/sign-in') } } } else if ((!isAuthLoading && isAuthenticated && !isAdmin() ) { router.push('/') }; } }, [ isAuthLoading, isAuthenticated, isAdmin, route ]r]); const getSeverityColor = (severity: string() => { switch (severity() { case 'success': return 'text-green-6 00 bg-green-1 00' case 'warning': return 'text-yellow-6 00 bg-yellow-1 00' case 'error': return 'text-red-6 00 bg-red-1 00';, default:; return 'text-blue-6 00 bg-blue-1 00' }; } const getActivityIcon = (type: string() => { switch (type() {; case 'user_signup':; return <Users className="h-4 w-4 text-green-6 00" />; "" case 'job_posted': return <Briefcase className="h-4 w-4 text-blue-6 00" />; "" case 'payment': return <DollarSign className="h-4 w-4 text-green-6 00" />; "" case 'report': return <Flag className="h-4 w-4 text-red-6 00" />; "", default: return <Activity className = "h-4 w-4 text-gray-6 00" />; } "" const formatTimestamp = (timestamp: string() => { const date = new Date(timestamp(); const now = new Date(); const diffTime = Math.abs(now.getTime() - date.getTime()); const diffMinutes = Math.ceil(diffTime / (1 00 0 * 6 0()); if ((diffMinutes < 6 0() } ) {} return `$ { diffMinut } minutes ago`; } else if ((diffMinutes < 1 44 0() ) { return `$ { Math.ceil(diffMinutes / } 0 } hours ago`; ) } else { ) return date.toLocaleDateString(); if ((isAuthLoading || isDataLoading() ) { return ( // Note: Multiple root elements may need React.Fragment wrapping; <div className = "flex min-h-screen items-center justify-center bg-gray-5 0">"" <div className="text-center">"" <div className="mx-auto mb-4 h-1 2 w-1 2 animate-spin rounded-full border-b-2 border-blue-6 00"></div>"" <p className="text-gray-6 00">Loading admin dashboard.</p>"" </div> </div>) ); } if ((!isAuthenticated() ) { return ( <div className = "flex min-h-screen items-center justify-center bg-gray-5 0">"" <div className="text-center">"" <div className="mx-auto mb-4 h-1 2 w-1 2 animate-spin rounded-full border-b-2 border-blue-6 00"></div>"" <p className="text-gray-6 00">Redirecting to sign-in.</p>"" </div> </div>) ); } if ((!isAdmin() ) { return ( <div className="flex min-h-screen items-center justify-center bg-gray-5 0">"" <div className="text-center">"" <Shield className="mx-auto mb-4 h-1 6 w-1 6 text-red-5 00" />"" <h1 className="text-2 xl font-bold text-gray-9 00 mb-2">Access Denied</h1>"" <p className="text-gray-6 00 mb-6">You don't have permission to access the admin dashboard.</p } > } "'") <Button onClick= { () => router.push('/')) } > Return to Homepage; </Button> </div> </div> return ( <DashboardLayout; navigation= { adminNavigation } title="Admin Control""" subtitle= { `System overview and management } ` } user= { { name: user?.fullName || '', email: user?.primaryEmailAddress?.emailAddress || '', initials: user?.firstName?.[0] + user?.lastName?.[0] || 'A } } ') headerActions= { <Button onClick= { () => router.push('/admin/settings')) } variant="outline">"" <Settings className="mr-2 h-4 w-4" />"; " Settings; </Button> searchPlaceholder="Search users, jobs, reports.""" <div className="p-4 sm: p-6 space-y-4, sm:space-y-6">"" { /* Top Metric Cards * } / } <div className="grid grid-cols-1 sm: grid-cols-2, lg:grid-cols-4 gap-4, sm:gap-6">"; " <MetricCard; title="Total Users""" value= { stats.totalUsers.toLocaleString( } ) } icon= { <Users className="h-6 w-6" / } > } "" color="blue""" trend= { { value: 8, isPositive: true, label: "vs last month } " } "" onClick= { () => router.push('/admin/users')) } />; <MetricCard; title="Jobs Posted Today""" value= { stats.jobsPostedToday } icon= { <Briefcase className="h-6 w-6" / } > } "" color="green""" trend= { { value: 1 5, isPositive: true, label: "vs yesterday } " } "" onClick= { () => router.push('/admin/moderation/jobs')) } />; <MetricCard; title="Flags/Reports""" value= { stats.flagsReports } icon= { <Flag className="h-6 w-6" / } > } "" color="red""" onClick= { () => router.push('/admin/moderation/reports')) } />; <MetricCard; title="API/LLM Usage""" value= { `$ { (stats.apiLlmUsage / 1 00 0().toFixed } 1 } k` } icon= { <Zap className="h-6 w-6" / } > } "" color="purple""" trend= { { value: 1 2, isPositive: true, label: "requests today } " } "" </div> { /* Real-Time Analytics Widget * } / } <div className="grid grid-cols-1 lg: grid-cols-3 gap-4, sm:gap-6">"" <div className="lg:col-span-2">"; " <WidgetCard; title="System Activity""" subtitle="Recent platform events and actions""" <div className="space-y-4">)"" { systemActivity.slice(0, 5().map((activity, index() => ( <ActivityItem } key= { index } title= { activity.description } ) description= { `$ { activity.type.replace('_', ' ').toUpperCas } ( } ` } ) time= { formatTimestamp(activity.timestamp } ) } icon= { getActivityIcon(activity.type } ) } badge= { { text: activity.severity, variant: activity.severity === 'error' ? 'destructive' : 'secondary } } ' { systemActivity.length === 0 && ( <div className="text-center py-8 text-gray-5 00">"" <Activity className="h-1 2 w-1 2 mx-auto mb-4 text-gray-3 00" />"" <p>No recent activity</p> </div } > } </div> </WidgetCard> </div> { /* Real-Time Analytics * } / } <div>; <RealTimeAnalyticsWidget; refreshInterval= { 3 } 0 } showTrends= { true } compact= { false } </div> </div> { /* Secondary Widgets Grid * } / } <div className="grid grid-cols-1 lg: grid-cols-2 gap-4, sm:gap-6">"" { /* Top Referrers Widget * } / }; <WidgetCard; title="Top Referrers""" subtitle="Traffic sources and acquisition""" >; <StatsGrid; stats= { [ { label: "Google Search", "" value: "4 5%" "", change: {, value: 5, isPositive: true } } { label: "Direct Traffic", "" value: "2 8%" "", change: {, value: 2, isPositive: false } } { label: "Social Media", "" value: "1 8%" "", change: {, value: 8, isPositive: true } } { label: "Referrals", "" value: "9%" "", change: {, value: 3, isPositive: true } } ] ] } </WidgetCard> </div> { /* Additional Widgets Row * } / } <div className="grid grid-cols-1 lg: grid-cols-2 gap-4, sm:gap-6">"" { /* Credits Purchased Widget * } / }; <WidgetCard; title="Credits Purchased""" subtitle="Revenue and credit sales overview""" <div className="space-y-4">"" <div className="flex items-center justify-between p-4 bg-green-5 0 rounded-lg border border-green-2 00">"" <div> <h4 className="font-medium text-gray-9 00">Today's Revenue</h4>"'" <p className="text-2 xl font-bold text-green-6 00">$ { stats.totalRevenue.toLocaleStrin } ( } </p>"" </div> <DollarSign className="h-8 w-8 text-green-6 00" />"" </div> <div className="grid grid-cols-2 gap-4">"" <div className="text-center p-3 bg-gray-5 0 rounded-lg">"" <div className="text-lg font-bold text-gray-9 00">1 56</div>"" <div className="text-sm text-gray-6 00">Credits Sold</div>"" </div> <div className="text-center p-3 bg-gray-5 0 rounded-lg">"" <div className="text-lg font-bold text-gray-9 00">$8 9</div>"" <div className="text-sm text-gray-6 00">Avg Order</div>"" </div> </div> </div> </WidgetCard> { /* Feature Usage Widget * } / }; <WidgetCard; title="Feature Usage""" subtitle="Platform feature adoption and usage""" <div className="space-y-3">"; " <QuickAction; title="User Management""" description="Manage users, roles, and permissions""" icon= { <Users className="h-5 w-5 text-blue-6 00" / } > } "")) onClick= { () => router.push('/admin/users')) } />; <QuickAction; title="Job Moderation""" description="Review and moderate job postings""" icon= { <Briefcase className="h-5 w-5 text-green-6 00" / } > } "" onClick= { () => router.push('/admin/moderation/jobs')) } />; <QuickAction; title="System Health""" description="Monitor system performance""" icon= { <Activity className="h-5 w-5 text-purple-6 00" / } > } "" onClick= { () => router.push('/admin/health')) } />; <QuickAction; title="Analytics""" description="View detailed platform analytics""" icon= { <BarChart3 className="h-5 w-5 text-orange-6 00" / } > } "" onClick= { () => router.push('/admin/analytics')) } </div> </WidgetCard> </div> { /* Jobs Over Time Widget * } / }; <WidgetCard; title="Platform Overview""" subtitle="Key metrics and system status""" >; <StatsGrid; stats= { [ { label: "Active Jobs", "" value: stats.activeJobs, change: {, value: 1 2, isPositive: true } } { label: "System Uptime", "" value: "9 9.9% } " } "" { label: "Response Time", "" value: "1 45 ms } " } "" { label: "Error Rate", "" value: "0.0 2%" "", change: {, value: 0.0 1, isPositive: false } } ] ] } </WidgetCard> </div> </DashboardLayout>; ))))))))))))) */