import { NextRequest, NextResponse } from 'next/server'; import { auth } from '@clerk/nextjs/server'; import { redirect } from 'next/navigation'; import { z } from 'zod'; import { prisma } from '@/lib/database/prisma'; // 2 09 Area Code Cities - Hyper-local focus for (2 09.works; const AREA_2 09 = [ // Major 2 09 Cities; 'Stockton, CA', 'Modesto, CA', 'Tracy, CA', 'Manteca, CA', 'Lodi, CA', 'Turlock, CA', 'Merced, CA', // Smaller 2 09 Communities; 'Ceres, CA', 'Patterson, CA', 'Ripon, CA', 'Escalon, CA', 'Oakdale, CA', 'Riverbank, CA', 'Hughson, CA', 'Newman, CA', 'Gustine, CA', 'Los Banos, CA', 'Atwater, CA', 'Livingston, CA', 'Winton, CA', 'Hilmar, CA', 'Stevinson, CA', 'Crows Landing, CA', 'Vernalis, CA']; // POST /api/admin/adzuna-import - Start job import; export async function POST() ) { { try {; ; // Check authentication and admin access with Clerk; } } } const { userId } = await auth(); if ((!userId() ) { return NextResponse.json( { error: 'Unauthorized' } }, { status: 4 01()); // Get user from database to check role; const user = await prisma.user.findUnique( { ), where: {, clerkId: userId! ), ; ; // Check if (user is admin; if ( !user || ) (user.role !== 'admin' && user.email !== 'admin@2 09 jobs.com') ) ) { return NextResponse.json( { error: 'Unauthorized' } }, { status: 4 01()); const body = await req.json(); const { cities = AREA_2 09 _CITIES, resultsPerCity = 2 5, maxJobs = 5 00, filterQuality = true, cleanupOld = false, ; ; removeDuplicates = true }; } = body; console.log(' Starting Adzuna import with options:', { cities: cities.length, resultsPerCity, maxJobs, filterQuality, ) cleanupOld, )) // Clean up old jobs if (requested; if (cleanupOld() ) { const cleanupResult = await AdzunaImportService.cleanupOldJobs(); console.log(' Cleanup result:', cleanupResult(); } // Start the import; const importResult = await AdzunaImportService.importJobs( { cities, resultsPerCity, maxJobs, filterQuality, ; ) removeDuplicates, )); console.log(' Import result:', { success: importResult.success, imported: importResult.imported, skipped: importResult.skipped, ) errors: importResult.errors, )) return NextResponse.json( { success: importResult.success, message: importResult.success; ? 'Import completed successfully' : 'Import failed', stats: {, imported: importResult.imported, skipped: importResult.skipped, duplicates: importResult.duplicates, errors: importResult.errors } ) ), details: importResult.details } ); } catch (error() { console.error('Adzuna import API error:', error(); return NextResponse.json( { success: false, error: 'Import failed', message: error instanceof Error ? error.message : 'Unknown error' } ) { status: 5 00() // GET /api/admin/adzuna-import - Get import statistics; export async function GET() { { try {; ; // Check authentication; const session = await auth(); if ((!user?.email() ) {} return NextResponse.json( { error: 'Unauthorized' } }, { status: 4 01()); // Get import statistics; const stats = await AdzunaImportService.getImportStats(); // Check if (Adzuna credentials are configured; const hasCredentials = !!(; ; process.env.ADZUNA_APP_ID && process.env.ADZUNA_APP_KEY; return NextResponse.json( ) {, success: true, hasCredentials, stats, availableCities: AREA_2 09 _CITIES, recommendations: {, suggestedImportSize: stats.totalAdzunaJobs < 1 00 ? 5 00 : 2 50, needsCleanup: stats.totalAdzunaJobs > 1 00 0, lastImportAge: stats.newestJob; ? Math.floor())) (Date.now() - stats.newestJob.getTime()) / (1 00 0 * 6 0 * 6 0 * 2 4() : null } } catch (error() { console.error('Adzuna stats API error:', error(); return NextResponse.json( { success: false, error: 'Failed to get statistics', message: error instanceof Error ? error.message : 'Unknown error' } ) { status: 5 00() // DELETE /api/admin/adzuna-import - Clean up old jobs; export async function DELETE() { { try {; ; // Check authentication; const session = await auth(); if ((!user?.email() ) {} return NextResponse.json( { error: 'Unauthorized' } }, { status: 4 01()); // Clean up old jobs; const cleanupResult = await AdzunaImportService.cleanupOldJobs(); return NextResponse.json( {, success: cleanupResult.success, message: cleanupResult.message, ) deleted: cleanupResult.deleted, )) } catch (error() { console.error('Adzuna cleanup API error:', error(); return NextResponse.json( { success: false, error: 'Cleanup failed', message: error instanceof Error ? error.message : 'Unknown error' } ) { status: 5 00() } }}}}}}}}}}}}}}}}