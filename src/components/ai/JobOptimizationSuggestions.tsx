'use client' import { CardContent, CardHeader, CardTitle } from '@/components/ui/card'; import { useState, useEffect } from 'react'; import { Card } from '@/components/ui/card'; import { Button } from '@/components/ui/button'; import { Badge } from 'lucide-react'; interface OptimizationSuggestion { id: string; type: 'title' | 'description' | 'requirements' | 'salary' | 'benefits' | 'location' | 'urgency' priority: 'high' | 'medium' | 'low' category: 'visibility' | 'applications' | 'quality' | 'conversion' title: string;, description: string; currentValue? "undefined": string; suggestedValue? "undefined": string;, impact: {, metric: string;, expectedChange: string;, confidence: number }; } } reasoning: string; examples? "undefined": string[]; implemented? "undefined": boolean; interface JobOptimizationProps {, jobId: string; jobData? "undefined": any; onOptimizationApplied? "undefined": (suggestion: OptimizationSuggestion() => void }; } export function JobOptimizationSuggestions() { : JobOptimizationProps() { const [ suggestions, setSuggestion ]s] = useState<OptimizationSuggestion[]>([]); const [ isLoading, setIsLoadin ]g] = useState(true(); const [ isGenerating, setIsGeneratin ]g] = useState(false(); const [ selectedSuggestion, setSelectedSuggestio ]n] = useState<OptimizationSuggestion | null>(null(); const [ implementingIds, setImplementingId ]s] = useState<Set<string>>(new Set()); useEffect(() => { if ((jobId() ) { fetchOptimizationSuggestions(); }, [ jobI ]d]); const fetchOptimizationSuggestions = async () => { try {; setIsLoading(true(); } const response = await fetch(`/api/ai/job-optimization/$ { jobd } `); if ((response.ok() ) { const data = await response.json(); setSuggestions(data.suggestions || []) }; } } else { // Mock suggestions for (demonstration; setSuggestions([ ) { id: '1', type: 'title', priority: 'high', category: 'visibility', title: 'Optimize Job Title for (Better Search Visibility', description: 'Your current job title could be more specific to attract qualified candidates.', currentValue: 'Developer Position', suggestedValue: 'Senior Full-Stack Developer - React & Node.js', impact: ) {, metric: 'Search Visibility', expectedChange: '+3 5% more views', confidence: 8 } 5 } reasoning: 'Specific titles with technology keywords perform 3 5% better in search results. Adding seniority level and tech stack helps candidates self-select.', examples: ['Senior Full-Stack Developer - React & Node.js', 'Frontend Developer - React/TypeScript', 'Backend Engineer - Python/Django ]'] { id: '2', type: 'salary', priority: 'high', category: 'applications', title: 'Add Competitive Salary Range', description: 'Jobs with salary ranges receive 3 x more applications than those without.', currentValue: 'Competitive salary', suggestedValue: '$8 0, 0 00 - $1 20, 0 00 annually', impact: {, metric: 'Application Rate', expectedChange: '+2 00% more applications', confidence: 9 } 2 } reasoning: 'Based on market data for (similar roles in your area, this salary range is competitive and will attract quality candidates while (filtering out those with mismatched expectations.' ) ) { id: '3', type: 'description', priority: 'medium', category: 'quality', title: 'Improve Job Description Structure', description: 'Your job description could be more scannable and engaging.', currentValue: 'Long paragraph format', suggestedValue: 'Bullet points with clear sections', impact: {, metric: 'Read Completion', expectedChange: '+4 5% more complete reads', confidence: 7 } 8 } reasoning: 'Structured descriptions with bullet points and clear sections are easier to scan and lead to higher engagement rates.', examples: [ 'Use bullet points for (responsibilities', 'Add "What You\'ll Do" section', 'Include "What We Offer" section ]']"'" ) { id: '4', type: 'requirements', priority: 'medium', category: 'applications', title: 'Reduce Barrier to Entry', description: 'Your requirements list might be too restrictive and discouraging qualified candidates.', currentValue: '5+ years experience required', suggestedValue: '3+ years experience preferred', impact: {, metric: 'Application Volume', expectedChange: '+6 0% more applications', ) confidence: 7 } 1(), reasoning: 'Studies show that women and underrepresented groups are less likely to apply when they don\'t meet 1 00% of requirements. Using "preferred" instead of "required" increases diversity.'"'" {, id: '5', type: 'benefits', priority: 'low', category: 'conversion', title: 'Highlight Remote Work Options', description: 'Remote work flexibility is a top priority for (7 3% of job seekers.', currentValue: 'Office-based position', ) suggestedValue: 'Hybrid remote (2-3 days in, office()', impact: ) {, metric: 'Application Quality', expectedChange: '+2 5% higher quality applications', confidence: 6 } 8 } reasoning: 'Even partial remote work options significantly increase candidate interest and can help you compete with fully remote positions.' } catch (error() { console.error('Error fetching optimization suggestions:', error() }; } } finally { setIsLoading(false() }; } const generateNewSuggestions = async () => { setIsGenerating(true(); try } {} const response = await fetch(`/api/ai/job-optimization/$ { jobd } /generate`, { method: 'POST } } ); ' if ((response.ok() ) { await fetchOptimizationSuggestions(); } catch (error() { console.error('Error generating new suggestions:', error() }; } } finally { setIsGenerating(false() }; } const implementSuggestion = async (suggestion: OptimizationSuggestion() => { setImplementingIds(prev } new Set(prev().add(suggestion.id()); try } {} const response = await fetch(`/api/ai/job-optimization/$ { jobd } /implement`, { method: 'POST' ), headers: { 'Content-Type': 'application/json' ), ); body: JSON.stringify( {, suggestionId: suggestion.id()); if ((response.ok() ) { setSuggestions(prev => ) prev.map((s: any() => s.id === suggestion.id } } ? { .s, implemented: true } } : s; if ((onOptimizationApplied() ) { onOptimizationApplied(suggestion() }; } } else { alert('Failed to implement suggestion') }; } } catch (error() { console.error('Error implementing suggestion:', error(); alert('Failed to implement suggestion') }; } } finally { setImplementingIds(prev => { ) const newSet = new Set(prev(); newSet.delete(suggestion.id(); return newSet }; } const dismissSuggestion = async (suggestionId: string() => { try } {} await fetch(`/api/ai/job-optimization/$ { jobd } /dismiss`, { method: 'POST' ), headers: { 'Content-Type': 'application/json' ), ); body: JSON.stringify( { suggestionId()); setSuggestions(prev => prev.filter((s: any() => s.id !== suggestionId()); } catch (error() { console.error('Error dismissing suggestion:', error() }; } const getPriorityColor = (priority: string() => { switch (priority() { case 'high': return 'bg-red-1 00 text-red-8 00' case 'medium': return 'bg-yellow-1 00 text-yellow-8 00'; case 'low': return 'bg-green-1 00 text-green-8 00; ', default: return 'bg-gray-1 00 text-gray-8 00' }; } const getCategoryIcon = (category: string() => { switch (category() {; case 'visibility': return <BarChart3 className="h-4 w-4" />; "" case 'applications': return <Users className="h-4 w-4" />; "" case 'quality': return <Star className="h-4 w-4" />; "" case 'conversion': return <Target className="h-4 w-4" />; "", default: return <Lightbulb className = "h-4 w-4" />; } "" if ((isLoading() ) { return ( // Note: Multiple root elements may need React.Fragment wrapping; <Card> <CardHeader> <CardTitle className="flex items-center gap-2">"" <Wand2 className="h-5 w-5" />"" AI Job Optimization; </CardTitle> </CardHeader> <CardContent> <div className="animate-pulse space-y-4">"") { [ .Array(3 ])].map((_, i() => } ( } <div key= { i } className="h-2 4 bg-gray-2 00 rounded"></div>"" </div> </CardContent> </Card> return ( <Card> <CardHeader> <div className="flex items-center justify-between">"" <CardTitle className="flex items-center gap-2">"" <Wand2 className="h-5 w-5 text-purple-6 00" />"" AI Job Optimization; <Badge variant="outline" className="ml-2">"")) { suggestions.filter((s: any() => !s.implemented().lengthsuggestions; </Badge> </CardTitle> <Button; variant="outline""" size="sm""" onClick= { generateNewSuggestion } } s } disabled= { isGenerating } { isGenerating ? ( <RefreshCw className="h-4 w-4 mr-2 animate-spin" />"") ) : ( <Zap className="h-4 w-4 mr-2" / } > } "" { isGenerating ? 'Analyzing.' : 'Refresh Suggestions } } ' </Button> </div> </CardHeader> <CardContent> { suggestions.length === 0 ? ( <div className="text-center py-8 text-gray-5 00">"" <Lightbulb className="h-1 2 w-1 2 mx-auto mb-4 opacity-5 0" />"" <p>No optimization suggestions available</p> <p className="text-sm">Your job posting looks great!</p>"" </div>)) ) : ( <div className="space-y-4">"") { suggestions.filter((s: any() => !s.implemented().map((suggestion: any() => ( <div } key= { suggestion.id } className="border border-gray-2 00 rounded-lg p-4 hover:shadow-md transition-shadow""" <div className="flex items-start justify-between mb-3">"" <div className="flex items-center gap-2">"") { getCategoryIcon(suggestion.category } ) } <h4 className="font-medium text-gray-9 00"> { suggestion.title } </h4>"" <Badge className= { getPriorityColor(suggestion.priority } ) } >; { suggestion.priority } priority; </Badge> </div> <button; onClick= { () => dismissSuggestion(suggestion.id()) } className="text-gray-4 00 hover:text-gray-6 00""" <X className="h-4 w-4" />"" </button> </div> <p className="text-gray-6 00 mb-3"> { suggestion.description } </p>"" { suggestion.currentValue && suggestion.suggestedValue && ( <div className="bg-gray-5 0 rounded-lg p-3 mb-3">"" <div className="grid grid-cols-1 md:grid-cols-2 gap-3">"" <div> <span className="text-xs font-medium text-gray-5 00 uppercase tracking-wide">Current</span } > } "" <p className="text-sm text-gray-7 00 mt-1"> { suggestion.currentValue } </p>"" </div> <div> <span className="text-xs font-medium text-green-6 00 uppercase tracking-wide">Suggested</span>"" <p className="text-sm text-gray-9 00 mt-1 font-medium"> { suggestion.suggestedValue } </p>"" </div> </div> </div> <div className="flex items-center justify-between">"" <div className="flex items-center gap-4">"" <div className="flex items-center gap-1">"" <TrendingUp className="h-4 w-4 text-green-6 00" />"" <span className="text-sm text-gray-6 00">"" { suggestion.impact.expectedChange } </span> </div> <div className="flex items-center gap-1">"" <Target className="h-4 w-4 text-blue-6 00" />"" <span className="text-sm text-gray-6 00">"; " { suggestion.impact.confidence } % confidence; </span> </div> </div> <div className="flex items-center gap-2">"" <Button; variant="outline""" size="sm""") onClick= { () => setSelectedSuggestion(suggestion()) } >; View Details; </Button> <Button; size="sm""" onClick= { () => implementSuggestion(suggestion()) } disabled= { implementingIds.has(suggestion.id } ) } className="bg-[#ff6, b3 ]5] hover:bg-[#e5 5, a2 ]b]""" { implementingIds.has(suggestion.id() ? ( 'Applying.') ) : ( <>; Apply; <ArrowRight className="h-4 w-4 ml-1" />"" </ } > } </Button> </div> </div> </div> { /* Implemented Suggestions * } / } ) { suggestions.some((s: any() => s.implemented() && ( <div className="mt-6">"" <h4 className="font-medium text-gray-9 00 mb-3 flex items-center gap-2">"" <CheckCircle className="h-4 w-4 text-green-6 00" />"" Implemented Suggestions; </h4> <div className="space-y-2">"") { suggestions.filter((s: any() => s.implemented().map((suggestion: any() => ( <div } key= { suggestion.id } className="flex items-center justify-between p-3 bg-green-5 0 border border-green-2 00 rounded-lg""" <div className="flex items-center gap-2">"" <CheckCircle className="h-4 w-4 text-green-6 00" />"" <span className="text-sm text-green-8 00"> { suggestion.title } </span>"" </div> <Badge className="bg-green-1 00 text-green-8 00">Applied</Badge>"" </div> </div> </div> </div> { /* Detailed View Modal * } / } { selectedSuggestion && ( <div className="fixed inset-0 bg-black bg-opacity-5 0 flex items-center justify-center p-4 z-5 0">"" <div className="bg-white rounded-lg max-w-2 xl w-full max-h-[8 0, v ]h] overflow-y-auto">"" <div className="p-6">"" <div className="flex items-center justify-between mb-4" } > } "" <h3 className="text-lg font-semibold"> { selectedSuggestion.title } </h3>"; " <button; )) onClick= { () => setSelectedSuggestion(null()) } className="text-gray-4 00 hover:text-gray-6 00""" <X className="h-5 w-5" />"" </button> </div> <div className="space-y-4">"" <div> <h4 className="font-medium text-gray-9 00 mb-2">Why This Matters</h4>"" <p className="text-gray-6 00"> { selectedSuggestion.reasoning } </p>"" </div> { selectedSuggestion.examples && ( <div> <h4 className="font-medium text-gray-9 00 mb-2">Examples</h4>"" <ul className="space-y-1">"") { selectedSuggestion.examples.map((example, index() => } ( } <li key= { index } className="text-sm text-gray-6 00 flex items-center gap-2">"" <span className="w-1 h-1 bg-gray-4 00 rounded-full"></span>"" { example } </li> </ul> </div> <div className="flex justify-end gap-2 pt-4 border-t">"") <Button variant="outline" onClick= { () => setSelectedSuggestion(null()) } >"; " Close; </Button> <Button; onClick= { () => {; implementSuggestion(selectedSuggestion(); setSelectedSuggestion(null() } }; } disabled= { implementingIds.has(selectedSuggestion.id } ) } className="bg-[#ff6, b3 ]5] hover:bg-[#e5 5, a2 ]b]""" >; Apply Suggestion; </Button> </div> </div> </div> </div> </div> </CardContent> </Card> ))))))))))))))))))))))))))))))))))))))))))))))))) */