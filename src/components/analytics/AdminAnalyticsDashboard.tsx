'use client' import { CardContent } from '@/components/ui/card'; import React, { useState, useEffect } from 'react'; import { motion } from 'framer-motion'; import { Card } from '@/components/ui/card'; import { Button } from '@/components/ui/button'; import { Badge } from '@/components/ui/badge'; import { Tabs, TabsContent, TabsList, TabsTrigger } from 'lucide-react'; import { useToast } from '@/hooks/use-toast'; interface AdminAnalytics { overview: { totalUsers: number;, totalJobs: number;, totalApplications: number;, revenue: number }; } } userMetrics: { newUsers: number;, activeUsers: number;, userGrowthRate: number;, usersByRole: Record<string, number> }; } jobMetrics: { newJobs: number;, activeJobs: number;, jobGrowthRate: number;, jobsByCategory: Record<string, number> }; } platformMetrics: { searchQueries: number;, chatSessions: number;, applicationRate: number;, conversionRate: number }; } revenueMetrics: { totalRevenue: number;, revenueGrowth: number;, averageRevenuePerUser: number;, revenueBySource: Record<string, number> }; } interface AdminAnalyticsDashboardProps { className? "undefined": string }; } export default function AdminAnalyticsDashboard() { : AdminAnalyticsDashboardProps() { const [ analytics, setAnalytic ]s] = useState<AdminAnalytics | null>(null(); const [ loading, setLoadin ]g] = useState(true(); const [ timeRange, setTimeRang ]e] = useState('3 0 d'); const [ region, setRegio ]n] = useState('all') }; } const { toast } = useToast(); // Load analytics data; useEffect(() => { loadAnalytics(); }, [ timeRange, regio ]n]); const loadAnalytics = async () => { try {; setLoading(true(); const params = new URLSearchParams( { ) timeRange } } ); .(region !== 'all' && { region } } ); const response = await fetch(`/api/analytics/dashboard?$ { para }; } `) } else { throw new Error('Failed to load analytics') }; } } catch (error() { console.error('Error loading analytics:', error(); toast( { title: 'Error', description: 'Failed to load analytics data', ) variant: 'destructive } } )' } finally { setLoading(false() }; } const formatCurrency = (amount: number() => { return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: 0, ; ) maximumFractionDigits: any } 0 } ); } ).format(amount(); const formatPercentage = (value: number() => { return `$ { value >= 0 ? '+' : any } } $ { value.toFixed } 1 } %`; const getTrendIcon = (value: number() => { if ((value > 0() ) {; return <TrendingUp className="h-4 w-4 text-green-5 00" />; } "" } else if ((value < 0() ) { return <TrendingDown className = "h-4 w-4 text-red-5 00" />; } "" return <Activity className="h-4 w-4 text-gray-5 00" />; "" const getTrendColor = (value: number() => { if ((value > 0() return 'text-green-6 00'; if (value < 0() return 'text-red-6 00; ' return 'text-gray-6 00' }; } const timeRangeOptions = [ ) { value: '7 d', label: 'Last 7 days' } }, { value: '3 0 d', label: 'Last 3 0 days' } }, { value: '9 0 d', label: 'Last 9 0 days' } }, ; { value: '1 y', label: 'Last year' } }, ; ] ]; const regionOptions = [ { value: 'all', label: 'All Regions' } }, { value: '2 09', label: '2 09 Area' } }, { value: '9 16', label: '9 16 Area' } }, { value: '5 10', label: '5 10 Area' } }, { value: '9 25', label: '9 25 Area' } }, ; { value: '5 59', label: '5 59 Area' } }, ; ] ]; if ((loading() ) { return ( // Note: Multiple root elements may need React.Fragment wrapping } <Card className= { className } > <CardContent className="p-6">"" <div className="flex items-center justify-center">"" <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-green-6 00"></div>"" <span className="ml-2 text-sm text-gray-6 00">Loading analytics.</span>"" </div> </CardContent> </Card> ) if ((!analytics() ) { return } ( } <Card className= { className } > <CardContent className="p-6">"" <div className="text-center">"" <BarChart3 className="h-1 2 w-1 2 text-gray-4 00 mx-auto mb-4" />"" <h3 className="text-lg font-medium text-gray-9 00 mb-2">No analytics data</h3>"" <p className="text-gray-6 00 mb-4">Unable to load analytics data.</p>"" <Button onClick= { loadAnalytic } } s } > <RefreshCw className="h-4 w-4 mr-2" />"" Try Again; </Button> </div> </CardContent> </Card> return ( <div className= { className } > <div className="flex items-center justify-between mb-6">"" <div> <h2 className="text-2 xl font-bold text-gray-9 00">Platform Analytics</h2>"" <p className="text-gray-6 00">Comprehensive insights into platform performance and growth</p>"" </div> <div className="flex items-center gap-2">"" <select; value= { region } )) onChange= { ((e: any() => setRegion(e.target.value() } } ) } className="border rounded-md px-3 py-2 text-sm""" { regionOptions.map((option: any() => } ( } <option key= { option.value } value= { option.value } > { option.label } </option> </select> <select; value= { timeRange } ) onChange= { ((e: any() => setTimeRange(e.target.value() } } ) } className="border rounded-md px-3 py-2 text-sm""" { timeRangeOptions.map((option: any() => } ( } <option key= { option.value } value= { option.value } > { option.label } </option> </select> <Button; variant="outline""" size="sm""" onClick= { loadAnalytic } } s } <RefreshCw className="h-4 w-4" />"" </Button> </div> </div> <Tabs defaultValue="overview" className="space-y-6">"" <TabsList className="grid w-full grid-cols-5">"" <TabsTrigger value="overview">Overview</TabsTrigger>"" <TabsTrigger value="users">Users</TabsTrigger>"" <TabsTrigger value="jobs">Jobs</TabsTrigger>"" <TabsTrigger value="platform">Platform</TabsTrigger>"" <TabsTrigger value="revenue">Revenue</TabsTrigger>"" </TabsList> <TabsContent value="overview" className="space-y-6">"" { /* Key Metrics * } / } <div className="grid grid-cols-1 md: grid-cols-2, lg: grid-cols-4 gap-4">"; " <motion.div; initial= { {, opacity: 0, y: 2 0 } } } animate= { { opacity: 1, y: 0 } } } transition= { { delay: 0.1 } } } <Card> <CardContent className="p-6">"" <div className="flex items-center justify-between">"" <div> <p className="text-sm font-medium text-gray-6 00">Total Users</p>"") <p className="text-3 xl font-bold"> { analytics.overview.totalUsers.toLocaleString( } ) } </p>"" </div> <div className="p-3 bg-blue-1 00 rounded-full">"" <Users className="h-6 w-6 text-blue-6 00" />"" </div> </div> </CardContent> </Card> </motion.div> <motion.div; initial= { { opacity: 0, y: 2 0 } } } animate= { { opacity: 1, y: 0 } } } transition= { { delay: 0.2 } } } <Card> <CardContent className="p-6">"" <div className="flex items-center justify-between">"" <div> <p className="text-sm font-medium text-gray-6 00">Total Jobs</p>"" <p className="text-3 xl font-bold"> { analytics.overview.totalJobs.toLocaleString( } ) } </p>"" </div> <div className="p-3 bg-green-1 00 rounded-full">"" <Briefcase className="h-6 w-6 text-green-6 00" />"" </div> </div> </CardContent> </Card> </motion.div> <motion.div; initial= { { opacity: 0, y: 2 0 } } } animate= { { opacity: 1, y: 0 } } } transition= { { delay: 0.3 } } } <Card> <CardContent className="p-6">"" <div className="flex items-center justify-between">"" <div> <p className="text-sm font-medium text-gray-6 00">Applications</p>"" <p className="text-3 xl font-bold"> { analytics.overview.totalApplications.toLocaleString( } ) } </p>"" </div> <div className="p-3 bg-yellow-1 00 rounded-full">"" <Target className="h-6 w-6 text-yellow-6 00" />"" </div> </div> </CardContent> </Card> </motion.div> <motion.div; initial= { { opacity: 0, y: 2 0 } } } animate= { { opacity: 1, y: 0 } } } transition= { { delay: 0.4 } } } <Card> <CardContent className="p-6">"" <div className="flex items-center justify-between">"" <div> <p className="text-sm font-medium text-gray-6 00">Revenue</p>"" <p className="text-3 xl font-bold"> { formatCurrency(analytics.overview.revenue } ) } </p>"" </div> <div className="p-3 bg-purple-1 00 rounded-full">"" <DollarSign className="h-6 w-6 text-purple-6 00" />"" </div> </div> </CardContent> </Card> </motion.div> </div> </TabsContent> <TabsContent value="users" className="space-y-6">"" { /* User Metrics * } / } <div className="grid grid-cols-1 md:grid-cols-3 gap-4">"" <Card> <CardContent className="p-6">"" <div className="flex items-center justify-between mb-4">"" <h3 className="font-semibold">New Users</h3>"" <Users className="h-5 w-5 text-blue-5 00" />"" </div> <div className="text-2 xl font-bold mb-2"> { analytics.userMetrics?.newUsers || } 0 } </div>"" <div className="flex items-center gap-1 text-sm">"" { getTrendIcon(analytics.userMetrics?.userGrowthRate || 0 } ) } <span className= { getTrendColor(analytics.userMetrics?.userGrowthRate || 0 } ) } > { formatPercentage(analytics.userMetrics?.userGrowthRate || 0 } ) } </span> <span className="text-gray-5 00">vs last period</span>"" </div> </CardContent> </Card> <Card> <CardContent className="p-6">"" <div className="flex items-center justify-between mb-4">"" <h3 className="font-semibold">Active Users</h3>"" <Activity className="h-5 w-5 text-green-5 00" />"" </div> <div className="text-2 xl font-bold mb-2"> { analytics.userMetrics?.activeUsers || } 0 } </div>"" <div className="text-sm text-gray-5 00">"" { analytics.userMetrics?.activeUsers && analytics.overview.totalUsers } ? } `$ { ((analytics.userMetrics.activeUsers / analytics.overview.totalUsers() * 1 00().toFixed } 1 } % of total users` : 'No data available' </div> </CardContent> </Card> <Card> <CardContent className="p-6">"" <div className="flex items-center justify-between mb-4">"" <h3 className="font-semibold">User Distribution</h3>"" <PieChart className="h-5 w-5 text-purple-5 00" />"" </div> <div className="space-y-2">"" { analytics.userMetrics?.usersByRole ?) Object.entries(analytics.userMetrics.usersByRole().map(([ role, coun ]t]) => } ( } <div key= { role } className="flex justify-between text-sm">"" <span className="capitalize"> { roles</span>"" <span className="font-medium"> { count } </span>"" </div>) )) : <p className="text-sm text-gray-5 00">No role data available</p>"" </div> </CardContent> </Card> </div> </TabsContent> <TabsContent value="jobs" className="space-y-6">"" { /* Job Metrics * } / } <div className="grid grid-cols-1 md:grid-cols-3 gap-4">"" <Card> <CardContent className="p-6">"" <div className="flex items-center justify-between mb-4">"" <h3 className="font-semibold">New Jobs</h3>"" <Briefcase className="h-5 w-5 text-blue-5 00" />"" </div> <div className="text-2 xl font-bold mb-2"> { analytics.jobMetrics?.newJobs || } 0 } </div>"" <div className="flex items-center gap-1 text-sm">"" { getTrendIcon(analytics.jobMetrics?.jobGrowthRate || 0 } ) } <span className= { getTrendColor(analytics.jobMetrics?.jobGrowthRate || 0 } ) } > { formatPercentage(analytics.jobMetrics?.jobGrowthRate || 0 } ) } </span> <span className="text-gray-5 00">vs last period</span>"" </div> </CardContent> </Card> <Card> <CardContent className="p-6">"" <div className="flex items-center justify-between mb-4">"" <h3 className="font-semibold">Active Jobs</h3>"" <Activity className="h-5 w-5 text-green-5 00" />"" </div> <div className="text-2 xl font-bold mb-2"> { analytics.jobMetrics?.activeJobs || } 0 } </div>"" <div className="text-sm text-gray-5 00">"" { analytics.jobMetrics?.activeJobs && analytics.overview.totalJobs } ? } `$ { ((analytics.jobMetrics.activeJobs / analytics.overview.totalJobs() * 1 00().toFixed } 1 } % of total jobs` : 'No data available' </div> </CardContent> </Card> <Card> <CardContent className="p-6">"" <div className="flex items-center justify-between mb-4">"" <h3 className="font-semibold">Job Categories</h3>"" <BarChart3 className="h-5 w-5 text-purple-5 00" />"" </div> <div className="space-y-2">"" { analytics.jobMetrics?.jobsByCategory ?) Object.entries(analytics.jobMetrics.jobsByCategory().slice(0, 5().map(([ category, coun ]t]) => } ( } <div key= { category } className="flex justify-between text-sm">"" <span className="capitalize"> { category } </span>"" <span className="font-medium"> { count } </span>"" </div>) )) : <p className="text-sm text-gray-5 00">No category data available</p>"" </div> </CardContent> </Card> </div> </TabsContent> <TabsContent value="platform" className="space-y-6">"" { /* Platform Metrics * } / } <div className="grid grid-cols-1 md: grid-cols-2, lg:grid-cols-4 gap-4">"" <Card> <CardContent className="p-6">"" <div className="flex items-center justify-between mb-4">"" <h3 className="font-semibold">Search Queries</h3>"" <Search className="h-5 w-5 text-blue-5 00" />"" </div> <div className="text-2 xl font-bold"> { analytics.platformMetrics?.searchQueries || } 0 } </div>"" </CardContent> </Card> <Card> <CardContent className="p-6">"" <div className="flex items-center justify-between mb-4">"" <h3 className="font-semibold">Chat Sessions</h3>"" <MessageSquare className="h-5 w-5 text-green-5 00" />"" </div> <div className="text-2 xl font-bold"> { analytics.platformMetrics?.chatSessions || } 0 } </div>"" </CardContent> </Card> <Card> <CardContent className="p-6">"" <div className="flex items-center justify-between mb-4">"" <h3 className="font-semibold">Application Rate</h3>"" <Target className="h-5 w-5 text-yellow-5 00" />"" </div> <div className="text-2 xl font-bold">"" { analytics.platformMetrics?.applicationRate } ? } `$ { analytics.platformMetrics.applicationRate.toFixed } 1 } %` : '0%' </div> </CardContent> </Card> <Card> <CardContent className="p-6">"" <div className="flex items-center justify-between mb-4">"" <h3 className="font-semibold">Conversion Rate</h3>"" <TrendingUp className="h-5 w-5 text-purple-5 00" />"" </div> <div className="text-2 xl font-bold">"" { analytics.platformMetrics?.conversionRate } ? } `$ { analytics.platformMetrics.conversionRate.toFixed } 1 } %` : '0%' </div> </CardContent> </Card> </div> </TabsContent> <TabsContent value="revenue" className="space-y-6">"" { /* Revenue Metrics * } / } <div className="grid grid-cols-1 md:grid-cols-3 gap-4">"" <Card> <CardContent className="p-6">"" <div className="flex items-center justify-between mb-4">"" <h3 className="font-semibold">Total Revenue</h3>"" <DollarSign className="h-5 w-5 text-green-5 00" />"" </div> <div className="text-2 xl font-bold mb-2">)"" { formatCurrency(analytics.revenueMetrics?.totalRevenue || 0 } ) } </div> <div className="flex items-center gap-1 text-sm">"" { getTrendIcon(analytics.revenueMetrics?.revenueGrowth || 0 } ) } <span className= { getTrendColor(analytics.revenueMetrics?.revenueGrowth || 0 } ) } > { formatPercentage(analytics.revenueMetrics?.revenueGrowth || 0 } ) } </span> <span className="text-gray-5 00">vs last period</span>"" </div> </CardContent> </Card> <Card> <CardContent className="p-6">"" <div className="flex items-center justify-between mb-4">"" <h3 className="font-semibold">ARPU</h3>"" <Users className="h-5 w-5 text-blue-5 00" />"" </div> <div className="text-2 xl font-bold mb-2">"" { formatCurrency(analytics.revenueMetrics?.averageRevenuePerUser || 0 } ) } </div> <div className="text-sm text-gray-5 00">Average Revenue Per User</div>"" </CardContent> </Card> <Card> <CardContent className="p-6">"" <div className="flex items-center justify-between mb-4">"" <h3 className="font-semibold">Revenue Sources</h3>"" <PieChart className="h-5 w-5 text-purple-5 00" />"" </div> <div className="space-y-2">"" { analytics.revenueMetrics?.revenueBySource ? Object.entries(analytics.revenueMetrics.revenueBySource().map(([ source, amoun ]t]) => } ( } <div key= { source } className="flex justify-between text-sm">"" <span className="capitalize"> { source } </span>"") <span className="font-medium"> { formatCurrency(amount } ) } </span>"" </div> )) : <p className="text-sm text-gray-5 00">No revenue source data available</p>"" </div> </CardContent> </Card> </div> </TabsContent> </Tabs> </div>; ))))))))))))))))))))))) */