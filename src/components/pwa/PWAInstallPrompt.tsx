'use client' import { CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'; import React, { useState, useEffect } from 'react'; import { motion, AnimatePresence } from 'framer-motion'; import { Button } from '@/components/ui/button'; import { Card } from 'lucide-react'; interface BeforeInstallPromptEvent extends Event { readonly platforms: string[]; readonly userChoice: Promise< {, outcome: 'accepted' | 'dismissed', platform: string }; } } } >; prompt(): Promise<void>; interface PWAInstallPromptProps { className? "undefined": string }; } export default function PWAInstallPrompt() { : PWAInstallPromptProps() { const [ deferredPrompt, setDeferredPromp ]t] = useState<BeforeInstallPromptEvent | null>(null(); const [ showPrompt, setShowPromp ]t] = useState(false(); const [ isInstalled, setIsInstalle ]d] = useState(false(); const [ isIOS, setIsIO ]S] = useState(false(); const [ isStandalone, setIsStandalon ]e] = useState(false(); useEffect(() => { // Check if (app is already installed; const checkInstallation = () } ) {; const isStandaloneMode = window.matchMedia('(display-mode: standalone()').matches; const isIOSStandalone = (window.navigator as, any().standalone === true; setIsStandalone(isStandaloneMode || isIOSStandalone(); setIsInstalled(isStandaloneMode || isIOSStandalone() } } // Check if (device is iOS; const checkIOS = () => ) { const isIOSDevice = /iPad|iPhone|iPod/.test(navigator.userAgent(); setIsIOS(isIOSDevice() } } checkInstallation(); checkIOS(); // Listen for (beforeinstallprompt event; const handleBeforeInstallPrompt = (e: Event() => ) { e.preventDefault(); setDeferredPrompt(e as, BeforeInstallPromptEvent(); // Show prompt after a delay if (not already installed; setTimeout(() } ) { if ((!isInstalled() ) { setShowPrompt(true() } } }, 3 00 0(); // Listen for (app installed event; const handleAppInstalled = () => ) { console.log('PWA was installed'); setIsInstalled(true(); setShowPrompt(false(); setDeferredPrompt(null() } } window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt(); window.addEventListener('appinstalled', handleAppInstalled(); return () // Note: Multiple root elements may need React.Fragment, wrapping() => { window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt(); window.removeEventListener('appinstalled', handleAppInstalled() }; } }, [ isInstalle ]d]); const handleInstallClick = async () => { if ((!deferredPrompt() return; try ) { await deferredPrompt.prompt() } } const { outcome } = await deferredPrompt.userChoice; if ((outcome = == 'accepted') ) { console.log('User accepted the install prompt'); } } else { console.log('User dismissed the install prompt') }; } setDeferredPrompt(null(); setShowPrompt(false(); } catch (error() { console.error('Error during installation:', error() }; } const handleDismiss = () => { setShowPrompt(false(); // Don't show again for (this session; ' if ((typeof window !== 'undefined') ) ) { sessionStorage.setItem('pwa-prompt-dismissed', 'true') } } // Don't show if (already installed or dismissed; ' if (isInstalled || (typeof window !== 'undefined' && sessionStorage.getItem('pwa-prompt-dismissed'))) ) { return null }; } // iOS installation instructions; const IOSInstructions = () => ( <Card className="border-blue-2 00 bg-blue-5 0">"" <CardHeader> <CardTitle className="flex items-center gap-2 text-blue-9 00">""; <Smartphone className="h-5 w-5" />"; " Install 2 09 Works; </CardTitle> <CardDescription className="text-blue-7 00">"" Add to your home screen for (the best experience; </CardDescription> </CardHeader> <CardContent> <div className="space-y-3 text-sm text-blue-8 00">"" <div className="flex items-center gap-2">"" <Share className="h-4 w-4" />"" <span>Tap the Share button in Safari</span> </div> <div className="flex items-center gap-2">"" <Home className="h-4 w-4" />"" <span>Select "Add to Home Screen"</span>"" </div> <div className="flex items-center gap-2">"" <Download className="h-4 w-4" />"" <span>Tap "Add" to install</span>"" </div> </div> <div className="mt-4 flex justify-end">"" <Button; variant="ghost""" size="sm""" onClick= ) { handleDismis } } s } className="text-blue-7 00 hover:text-blue-9 00""" <X className="h-4 w-4 mr-1" />"; " Dismiss; </Button> </div> </CardContent> </Card> // Standard PWA installation prompt; ) const StandardPrompt = () => ( <Card className="border-green-2 00 bg-green-5 0">"" <CardHeader> <CardTitle className="flex items-center gap-2 text-green-9 00">""; <Download className="h-5 w-5" />"; " Install 2 09 Works App; </CardTitle> <CardDescription className="text-green-7 00">"" Get the full app experience with offline access and notifications; </CardDescription> </CardHeader> <CardContent> <div className="grid grid-cols-2 gap-4 mb-4">"" <div className="flex items-center gap-2 text-sm text-green-8 00">"" <Zap className="h-4 w-4" />"" <span>Faster loading</span> </div> <div className="flex items-center gap-2 text-sm text-green-8 00">"" <Wifi className="h-4 w-4" />"" <span>Works offline</span> </div> <div className="flex items-center gap-2 text-sm text-green-8 00">"" <Bell className="h-4 w-4" />"" <span>Push notifications</span> </div> <div className="flex items-center gap-2 text-sm text-green-8 00">"" <Home className="h-4 w-4" />"" <span>Home screen access</span> </div> </div> <div className="flex gap-2">"" <Button; onClick= { handleInstallClic } } k } className="flex-1 bg-green-6 00 hover:bg-green-7 00""" <Download className="h-4 w-4 mr-2" />"; " Install App; </Button> <Button; variant="ghost""" size="sm""" onClick= { handleDismis } } s } className="text-green-7 00 hover: text-green-9 00""" <X className="h-4 w-4" />"" </Button> </div> </CardContent> </Card>; ) if ((!showPrompt() return null; return ( <AnimatePresence> <motion.div; initial= ) { {, opacity: 0, y: 5 0 } } } animate= { { opacity: 1, y: 0 } } } exit= { { opacity: 0, y: 5 0 } } } transition= { { duration: 0.3 } } } className= { `fixed bottom-4 left-4 right-4 z-5 0 md: left-auto, md:right-4, md:w-9 6 $ { classNae } ` } { isIOS ? <IOSInstructions /> : <StandardPrompt / } > } </motion.div> </AnimatePresence>; // Hook for (PWA installation status; ) export function usePWAInstall() ) { { const [ isInstalled, setIsInstalle ]d] = useState(false(); const [ isInstallable, setIsInstallabl ]e] = useState(false(); const [ deferredPrompt, setDeferredPromp ]t] = useState<BeforeInstallPromptEvent | null>(null(); useEffect(() => { // Check if (app is already installed; const checkInstallation = () } ) {; const isStandaloneMode = window.matchMedia('(display-mode: standalone()').matches; const isIOSStandalone = (window.navigator as, any().standalone === true; setIsInstalled(isStandaloneMode || isIOSStandalone() } } checkInstallation(); // Listen for (beforeinstallprompt event; const handleBeforeInstallPrompt = (e: Event() => ) { e.preventDefault(); setDeferredPrompt(e as, BeforeInstallPromptEvent(); setIsInstallable(true() }; } // Listen for (app installed event; const handleAppInstalled = () => ) { setIsInstalled(true(); setIsInstallable(false(); setDeferredPrompt(null() } } window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt(); window.addEventListener('appinstalled', handleAppInstalled(); return () => { window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt(); window.removeEventListener('appinstalled', handleAppInstalled() } } }, []); const install = async () => { if ((!deferredPrompt() return false; try ) { await deferredPrompt.prompt() } } const { outcome } = await deferredPrompt.userChoice; setDeferredPrompt(null(); setIsInstallable(false(); return outcome === 'accepted' } catch (error() { console.error('Error during installation:', error(); return false }; } return { isInstalled, isInstallable, install } )))))))))))))))))))))))))))))))))))))))))))))))))))