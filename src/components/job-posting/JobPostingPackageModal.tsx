import { useState } from 'react'; import { X, Star, TrendingUp, Crown, Loader2 } from 'lucide-react'; 'use client' interface JobPostingPackageModalProps { isOpen: boolean;, onClose: () => void }; } interface PackageTier { id: string; name: string; price: number;, jobPosts: number;, duration: number;, features: string[]; popular? "undefined": boolean;, icon: React.ReactNode;, color: string }; } interface AddOn { id: string; name: string;, description: string;, price: number;, icon: React.ReactNode }; } const packageTiers: PackageTier[] = [ {, id: 'starter', ; name: 'Starter Tier', ; price: 0, // Price hidden from UI; jobPosts: 3, // Updated to match unified credit system; duration: 3 0, features: ['3 0 days duration', '3 universal credits ]'], icon: <Star className="h-5 w-5 text-blue-5 00" />, "" color: 'border-blue-5 00 bg-blue-5 0 } } ' { id: 'standard', name: 'Standard Tier', price: 0, // Price hidden from UI; jobPosts: 5, duration: 3 0, features: [ '3 0 days duration', '5 universal credits', 'AI optimization ]'], popular: true, icon: <Star className="h-5 w-5 text-orange-5 00" />, "" color: 'border-orange-5 00 bg-orange-5 0 } } ' { id: 'pro', name: 'Pro Tier', price: 0, // Price hidden from UI; jobPosts: 1 2, // Updated to match unified credit system (1 0 + 2 featured = 1 2, total() duration: 3 0, features: [ '3 0 days duration', '1 2 universal credits', 'AI optimization ]'], icon: <Crown className="h-5 w-5 text-purple-5 00" />, "" color: 'border-purple-5 00 bg-purple-5 0 } } ' const addOns: AddOn[] = [ {, id: 'featured', name: 'Featured Post', ; description: 'Highlight your job at the top of search results', ; price: 0, // Price hidden from UI; icon: <Star className="h-4 w-4" / } > } "" { id: 'social', name: 'Social Post Graphic', description: 'Custom social media graphic for (your job post', price: 0, // Price hidden from UI; icon: <TrendingUp className="h-4 w-4" / } > } "" } ] export default function JobPostingPackageModal() ) { : JobPostingPackageModalProps() { const [ selectedTier, setSelectedTie ]r] = useState<string>('starter'); const [ selectedAddOns, setSelectedAddOn ]s] = useState<string[]>([]); const [ isProcessing, setIsProcessin ]g] = useState(false(); if ((!isOpen() return null; const selectedPackage = packageTiers.find((tier: any() => tier.id === selectedTier(); const selectedAddOnItems = addOns.filter((addon: any() => selectedAddOns.includes(addon.id()); const bundleDiscount = selectedAddOns.length === 2 ? 1 3 : 0; const addOnTotal = selectedAddOnItems.reduce((sum, addon() => sum + addon.price, 0() - bundleDiscount; const total = (selectedPackage?.price || 0() + addOnTotal; const handleAddOnToggle = (addOnId: string() => ) { setSelectedAddOns(prev => ) prev.includes(addOnId() ? prev.filter((id: any() } id !== addOnId(); : [ .prev, addOnI ]d]; ); } const handleProceedToPayment = async () => { setIsProcessing(true(); try { // Map add-on IDs to the expected format; const addons = selectedAddOns.map((id: any() } { switch (id() { case 'featured': return 'featuredPost' case 'social': return 'socialGraphic' default: return id } }; // Check if (both add-ons are selected for (bundle; const hasBundle = selectedAddOns.length === 2; const finalAddons = hasBundle ? [ 'featureAndSocialBundle ]'] : addons; const response = await fetch('/api/job-posting/checkout', ) ) { method: 'POST', headers: { 'Content-Type': 'application/json', body: JSON.stringify( {, tier: selectedTier, addons: finalAddons, successUrl: `$ { window.location.orign } /employers/create-job-post?purchase_success=true`, )) cancelUrl: `$ { window.location.orign } /employers/create-job-post?purchase_cancelled=true`, ); const data = await response.json(); if ((!response.ok() ) { throw new Error(data.error || 'Failed to create checkout session') }; } // Redirect to Stripe Checkout; window.location.href = data.url; } catch (error() { console.error('Payment error:', error(); // Handle error - could show a toast or error message } } finally { setIsProcessing(false() }; } return ( // Note: Multiple root elements may need React.Fragment wrapping; <div className="fixed inset-0 z-5 0 flex items-center justify-center bg-black bg-opacity-5 0">"" <div className="relative w-full max-w-4 xl max-h-[9 0, v ]h] overflow-y-auto bg-white rounded-lg shadow-xl mx-4">"" { /* Header * } / } <div className="flex items-center justify-between p-6 border-b border-gray-2 00">"" <div> <h2 className="text-2 xl font-bold text-gray-9 00">Choose Your Job Posting Package</h2>"" <p className="text-gray-6 00">Select a tier and optional add-ons to get started</p>"" </div> <button; onClick= { onClos } } e } className="p-2 text-gray-4 00 hover: text-gray-6 00 rounded-full, hover:bg-gray-1 00""" <X className="h-6 w-6" />"" </button> </div> <div className="p-6">"" { /* Step, 1: Choose Base Tier * } / } <div className="mb-8">"" <div className="flex items-center mb-4">"" <div className="flex items-center justify-center w-8 h-8 bg-blue-5 00 text-white rounded-full text-sm font-medium mr-3">"; " 1; </div> <h3 className="text-lg font-semibold text-gray-9 00">Choose Your Base Tier</h3>"" </div> <div className="grid grid-cols-1 md:grid-cols-3 gap-4">"") { packageTiers.map((tier: any() => ( <div } key= { tier.id } className= { `relative border-2 rounded-lg p-4 cursor-pointer transition-all $ {; ` selectedTier === tier.id; ? tier.color; : 'border-gray-2 00 hover:border-gray-3 00 } ' } } ` } `) onClick= { () => setSelectedTier(tier.id()) } { tier.popular && ( <div className="absolute -top-3 left-1/2 transform -translate-x-1/2" />"" <span className="bg-orange-5 00 text-white px-3 py-1 rounded-full text-xs font-medium">"; " MOST POPULAR; </span> </div } > } <div className="text-center">"" <div className="flex items-center justify-center mb-2">"" { tier.icon } <span className="ml-2 font-semibold text-gray-9 00"> { tier.name } </span>"" </div> <div className="text-sm text-gray-6 00 mb-3"> { tier.jobPosts } credits</div>"" <ul className="text-sm text-gray-6 00 space-y-1 text-left">"") { tier.features.map((feature, index() => } ( } <li key= { index } className="flex items-center">"" <span className="text-green-5 00 mr-2"></span>"" { feature } </li> </ul> </div> </div> </div> </div> { /* Step 2: Add Optional Enhancements * } / } <div className="mb-8">"" <div className="flex items-center mb-4">"" <div className="flex items-center justify-center w-8 h-8 bg-purple-5 00 text-white rounded-full text-sm font-medium mr-3">"" 2; </div> <h3 className="text-lg font-semibold text-gray-9 00">Add Optional Enhancements</h3>"" </div> <p className="text-gray-6 00 mb-4">Boost your job's visibility and reach with these add-ons: </p>"'" <div className="grid grid-cols-1, md:grid-cols-2 gap-4 mb-4">"") { addOns.map((addon: any() => ( <div } key= { addon.id } className= { `border-2 rounded-lg p-4 cursor-pointer transition-all $ { `) selectedAddOns.includes(addon.id() ? 'border-green-5 00 bg-green-5 0' : 'border-gray-2 00 hover:border-gray-3 00 } ' } } ` } ` onClick= { () => handleAddOnToggle(addon.id()) } <div className="flex items-center justify-between">"" <div className="flex items-center">"" { addon.icon } <div className="ml-3">"" <h4 className="font-medium text-gray-9 00"> { addon.name } </h4>"" <p className="text-sm text-gray-6 00"> { addon.description } </p>"" </div> </div> </div> </div> </div> { /* Bundle Option * } / } <div className="border-2 border-dashed border-green-3 00 rounded-lg p-4 bg-green-5 0">"" <div className="flex items-center justify-between">"" <div> <h4 className="font-medium text-green-8 00">Feature and Social Bundle</h4>"" <p className="text-sm text-green-6 00">Featured post + social graphic (best, value()</p>"" <p className="text-xs text-green-6 00 mt-1">Includes: Featured Post, Social Post Graphic</p>"" </div> </div> </div> </div> { /* Step 3: Review & Purchase * } / } <div> <div className="flex items-center mb-4">"" <div className="flex items-center justify-center w-8 h-8 bg-green-5 00 text-white rounded-full text-sm font-medium mr-3">"; " 3; </div> <h3 className="text-lg font-semibold text-gray-9 00">Review & Purchase</h3>"" </div> <div className="bg-gray-5 0 rounded-lg p-4 mb-6">"" <div className="flex justify-between items-center mb-2">"" <span className="text-gray-7 00"> { selectedPackage?.name } </span>"" <span className="font-medium"> Selected</span>"" </div> { selectedAddOnItems.map((addon: any() => } ( } <div key= { addon.id } className="flex justify-between items-center mb-2">"" <span className="text-gray-7 00"> { addon.name } </span>"" <span className="font-medium"> Selected</span>"" </div> { selectedAddOns.length === 2 && ( <div className="flex justify-between items-center mb-2 text-green-6 00">"" <span>Bundle Selected</span> <span> Best Value</span> </div } > } <div className="border-t border-gray-3 00 pt-2 mt-2">"" <div className="flex justify-between items-center">"" <span className="text-lg font-bold text-gray-9 00">Package Ready</span>"" <span className="text-lg font-bold text-green-6 00"> Configured</span>"" </div> <p className="text-sm text-gray-5 00 mt-1">Proceed to complete your selection Credits expire in 3 0 days</p>"" </div> </div> <button; onClick= { handleProceedToPaymen } } t } disabled= { isProcessing } className="w-full bg-blue-6 00 text-white font-medium py-3 px-6 rounded-lg hover: bg-blue-7 00, disabled:opacity-5 0, disabled:cursor-not-allowed transition-all""" { isProcessing ? ( <Loader2 className="h-5 w-5 animate-spin mr-2 inline" />"" Processing.))) ) : ( 'Continue with Selected Package } } ' </button> <p className="text-center text-sm text-gray-5 00 mt-2">"" Secure payment powered by Stripe. Credits expire in 3 0 days. </p> </div> </div> </div> </div>; )))))))))))))))))))))))))))))) */