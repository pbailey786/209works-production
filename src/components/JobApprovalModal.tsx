import React, { useState } from '@/components/ui/card'; import { X, Check, Edit3, Eye, EyeOff, CreditCard, ChevronLeft, ChevronRight } from 'lucide-react'; 'use client' interface OptimizedJob { id: string; originalContent: string; optimizedContent: string;, optimizationStatus: 'success' | 'fallback' | 'error' error? "undefined": string | null;, metadata: {, title: string;, company: string;, location: string; salary? "undefined": string; jobType? "undefined": string; experienceLevel? "undefined": string; remote? "undefined": boolean }; } } interface JobApprovalModalProps { isOpen: boolean; onClose: () => void; jobs: OptimizedJob[]; currentJobIndex: number;, onApprove: (jobData: any() => Promise<void>;, onSkip: () => void;, onEdit: (jobData: any() => void;, creditsRemaining: number;, isApproving: boolean }; } export default function JobApprovalModal() {; } : JobApprovalModalProps() { const [ useOptimized, setUseOptimize ]d] = useState(true(); const [ isEditing, setIsEditin ]g] = useState(false(); const [ editedContent, setEditedConten ]t] = useState(''); const [ showComparison, setShowCompariso ]n] = useState(true(); if ((!isOpen || !jobs.length || currentJobIndex >= jobs.length() ) { return null }; } const currentJob = jobs[ currentJobInde ]x]; const progress = ((currentJobIndex + 1() / jobs.length() * 1 00; const handleApprove = async () => { const jobData = { id: currentJob.id, title: currentJob.metadata.title, company: currentJob.metadata.company, location: currentJob.metadata.location, description: isEditing ? editedContent : (useOptimized ? currentJob.optimizedContent : currentJob.originalContent(), salary: currentJob.metadata.salary, jobType: currentJob.metadata.jobType, experienceLevel: currentJob.metadata.experienceLevel, ; remote: currentJob.metadata.remote, ; useOptimizedContent: useOptimized && !isEditing }, ; await onApprove(jobData(); const handleEdit = () => { setIsEditing(true(); setEditedContent(useOptimized ? currentJob.optimizedContent : currentJob.originalContent() } } const handleCancelEdit = () => { setIsEditing(false(); setEditedContent('') } } return ( // Note: Multiple root elements may need React.Fragment wrapping; <div className="fixed inset-0 z-5 0 overflow-y-auto">"" <div className="flex min-h-screen items-center justify-center p-4">"" <div className="fixed inset-0 bg-black bg-opacity-5 0 transition-opacity" onClick= { onClos } } e } />"" <div className="relative w-full max-w-6 xl bg-white rounded-xl shadow-2 xl">"" { /* Header * } / } <div className="flex items-center justify-between border-b border-gray-2 00 p-6">"" <div className="flex items-center space-x-4">"" <h2 className="text-2 xl font-bold text-gray-9 00">"" Review Job { currentJobIndex + } 1 } of { jobs.length } </h2> <div className="flex items-center space-x-2 text-sm text-gray-6 00">"" <CreditCard className="h-4 w-4" />"" <span> { creditsRemaining } credits remaining</span> </div> </div> <div className="flex items-center space-x-2">"" <button; onClick= { onSki } } p } disabled= { isApproving } className="rounded-lg border border-gray-3 00 px-4 py-2 text-gray-7 00 hover: bg-gray-5 0, disabled:opacity-5 0""" >; Skip; </button> <button; onClick= { onClos } } e } className="rounded-lg p-2 text-gray-4 00 hover: bg-gray-1 00, hover:text-gray-6 00""" <X className="h-5 w-5" />"" </button> </div> </div> { /* Progress Bar * } / } <div className="px-6 pt-4">"" <div className="w-full bg-gray-2 00 rounded-full h-2">"; " <div; className="bg-gradient-to-r from-[#2 d4, a3 ]e] to-[#ff6, b3 ]5] h-2 rounded-full transition-all duration-3 00""" style= { { width: `$ { progress } } ` </div /> <div className="flex justify-between text-xs text-gray-5 00 mt-1">"" <span>Job { currentJobIndex + } 1 } </span> <span> { jobs.length } total jobs</span> </div> </div> { /* Job Metadata * } / } <div className="px-6 py-4 bg-gray-5 0 border-b border-gray-2 00">"" <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">"" <div> <span className="font-medium text-gray-9 00"> { currentJob.metadata.title } </span>"" <p className="text-gray-6 00"> { currentJob.metadata.company } </p>"" </div> <div> <span className="text-gray-5 00">Location:</span>"" <p className="text-gray-9 00"> { currentJob.metadata.location } </p>"" </div> <div> <span className="text-gray-5 00">Type:</span>"" <p className="text-gray-9 00"> { currentJob.metadata.jobType || 'Full-time } } </p>"'" </div> <div> <span className="text-gray-5 00">Salary:</span>"" <p className="text-gray-9 00"> { currentJob.metadata.salary || 'Competitive } } </p>"'" </div> </div> </div> { /* Content Comparison * } / } <div className="p-6">"" { /* Toggle Controls * } / } <div className="flex items-center justify-between mb-6">"" <div className="flex items-center space-x-4">"; " <button; ) onClick= { () => setShowComparison(!showComparison()) } className="flex items-center space-x-2 text-sm text-gray-6 00 hover:text-gray-9 00""" { showComparison ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" / } > } "" <span> { showComparison ? 'Hide' : 'Show } } Comparison</span>' </button> { !isEditing && ( <div className="flex items-center space-x-2">"" <label className="flex items-center space-x-2 text-sm">"; " <input; type="radio } " } "" checked= { !useOptimized } ) onChange= { () => setUseOptimized(false()) } className="text-[#2 d4, a3 ]e] focus:ring-[#2 d4, a3 ]e]""" <span>Use Original</span> </label> <label className="flex items-center space-x-2 text-sm">"; " <input; type="radio""" checked= { useOptimized } onChange= { () => setUseOptimized(true()) } className="text-[#2 d4, a3 ]e] focus:ring-[#2 d4, a3 ]e]""" <span>Use AI-Optimized</span> </label> </div> </div> <button; onClick= { (isEditing ? handleCancelEdit : handleEdit } } ) } className="flex items-center space-x-2 text-sm text-[#2 d4, a3 ]e] hover:text-[#1 d3, a2 ]e]""" <Edit3 className="h-4 w-4" />"" <span> { isEditing ? 'Cancel Edit' : 'Edit Content } } </span>' </button> </div> { /* Content Display * } / } { isEditing ? ( <div className="space-y-4">"" <label className="block text-sm font-medium text-gray-7 00">"" Edit Job Description: </label> <textarea } value= { editedContent } ) onChange= { ((e: any() => setEditedContent(e.target.value() } } ) } rows= { 2 } 0 } className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-[#2 d4, a3 ]e], focus:ring-2, focus:ring-[#2 d4, a3 ]e]/2 0""" placeholder="Enter job description.""" <div className="text-xs text-gray-5 00">"" { editedContent.length } characters (minimum 5 0, required() </div> </div> ) : showComparison ? ( <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">"" { /* Original Content * } / } <div className="space-y-3">"" <div className="flex items-center space-x-2">"" <h3 className="text-lg font-semibold text-gray-9 00">Original Content</h3>"" { !useOptimized && ( <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-1 00 text-blue-8 00">"; " Selected; </span } > } </div> <div className="bg-gray-5 0 rounded-lg p-4 h-9 6 overflow-y-auto">"" <div className="whitespace-pre-wrap text-sm text-gray-7 00">"" { currentJob.originalContent } </div> </div> </div> { /* Optimized Content * } / } <div className="space-y-3">"" <div className="flex items-center space-x-2">"" <h3 className="text-lg font-semibold text-gray-9 00">AI-Optimized Content</h3>"" { useOptimized && ( <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-1 00 text-green-8 00">"" Selected; </span } > } { currentJob.optimizationStatus === 'fallback' && ( <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-1 00 text-yellow-8 00">"" Template; </span } > } { currentJob.optimizationStatus === 'error' && ( <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-1 00 text-red-8 00">"" Error; </span } > } </div> { currentJob.error && ( <div className="bg-yellow-5 0 border border-yellow-2 00 rounded-lg p-3 mb-3">"" <p className="text-sm text-yellow-8 00" } > } "" <strong>Note:</strong> { currentJob.error } </p> </div> <div className="bg-green-5 0 rounded-lg p-4 h-9 6 overflow-y-auto">"" <div className="whitespace-pre-wrap text-sm text-gray-7 00">"" { currentJob.optimizedContent || 'No optimized content available. Please use the original content or try again. } } ' </div> </div> </div> </div>)))))) ) : ( <div className="space-y-3">"" <h3 className="text-lg font-semibold text-gray-9 00">"" { useOptimized ? 'AI-Optimized Content' : 'Original Content } } ' </h3> <div className="bg-gray-5 0 rounded-lg p-4 h-9 6 overflow-y-auto">"" <div className="whitespace-pre-wrap text-sm text-gray-7 00">"" { useOptimized ? currentJob.optimizedContent : currentJob.originalContent } </div> </div> </div> </div> { /* Footer Actions * } / } <div className="flex items-center justify-between border-t border-gray-2 00 p-6">"" <div className="flex items-center space-x-2 text-sm text-gray-6 00">"" <span>This will use 1 credit</span> { creditsRemaining <= 5 && ( <span className="text-amber-6 00 font-medium" } > } "")) ( { creditsRemaining } remaining() </span> </div> <div className="flex items-center space-x-3">"" <button; onClick= { onSki } } p } disabled= { isApproving } className="rounded-lg border border-gray-3 00 px-6 py-2 text-gray-7 00 hover: bg-gray-5 0, disabled:opacity-5 0""" >; Skip This Job; </button> <button; onClick= { handleApprov } } e } disabled= { isApproving || creditsRemaining <= 0 || (isEditing && editedContent.length < 5 0 } ) } className="rounded-lg bg-gradient-to-r from-[#2 d4, a3 ]e] to-[#ff6, b3 ]5] px-6 py-2 font-medium text-white hover: from-[#1 d3, a2 ]e], hover:to-[#e5 5, a2 ]b], disabled:opacity-5 0, disabled:cursor-not-allowed""" { isApproving ? ( <div className="flex items-center space-x-2">"" <div className="h-4 w-4 animate-spin rounded-full border-b-2 border-white" />"" <span>Publishing.</span> </div>) ) : ( <div className="flex items-center space-x-2">"" <Check className="h-4 w-4" />"" <span>Approve & Publish</span> </div } > } </button> </div> </div> </div> </div> </div>; ))))))))))))))) */