import {} from '@/components/ui/card'; import {} from 'react'; import {} from '@clerk/nextjs/server'; import {} from 'next/navigation'; import {} from '@/lib/database/prisma'; import {} from '@/lib/auth/permissions'; import {} from '@/types/auth'; import {} from '@/components/ui/card'; import {} from '@/components/ui/skeleton'; async function getCreditData() { {} } }; // Total credits used; prisma.jobPostingCredit.count( {} ) where: {, isUsed:, true()) // Total credits expired; prisma.jobPostingCredit.count( { where: } {} ) expiresAt: {, lt: new Date() } }, isUsed: false; // Recent credit transactions (last, 5 0() prisma.jobPostingPurchase.findMany( { take: 5 0, orderBy: {, createdAt: 'desc' } }, include: {, user: {, select: {, id: true, name: true, email: true, credits: { select: {, type: true, isUsed: true, usedAt: true // Top credit users; prisma.user.findMany( { where: {, jobPostingCredits: any } {} some: {} include: {, _count: {, select: {, jobPostingCredits: true } jobPostingCredits: { select: {, type: true, isUsed: true, expiresAt: true, orderBy: { jobPostingCredits: {, _count: 'desc } } ')) take: 1 0() // Credits by type; prisma.jobPostingCredit.groupBy( {, by: [ 'type ]'], _count: { ), id: true()) return { totalCreditsIssued, activeCredits: totalCreditsIssued - totalCreditsUsed - totalCreditsExpired } } } catch (error() { console.error('Error fetching credit data:', error(); return { totalCreditsIssued: 0, totalCreditsUsed: 0, totalCreditsExpired: 0, activeCredits: 0, recentTransactions: [], topCreditUsers: [], creditsByType: [] export default async function AdminCreditsPage() { { { const { userId } = await auth(); if ((!userId() ) {}; } const user = await prisma.user.findUnique( { where: {, clerkId: }; } // Get user with role; const dbUser = await prisma.user.findUnique( { where: {, email: user?.email } }, ; ) select: {, id: true, role: true() }; } const creditData = await getCreditData(); return ( // Note: Multiple root elements may need React.Fragment wrapping; <div className="space-y-6">"" {} / } <div className="flex items-center justify-between">"" <div> <h1 className="text-2 xl font-bold text-gray-9 00">Credit Management</h1>"" <p className="mt-1 text-gray-6 00">"" Manage job posting credits, transactions, and user balances; </p> </div> </div> <Suspense fallback= {} > } > <CreditManagementDashboard creditData= {} /> </Suspense> </div> ) function CreditManagementSkeleton() { {} > } "" {} / } <div className="grid grid-cols-1 gap-6 sm: grid-cols-2, lg:grid-cols-4">"") {} ( } <Card key= {} > <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">"" <CardTitle className="text-sm font-medium">"" <Skeleton className="h-4 w-2 4" />"" </CardTitle> <Skeleton className="h-4 w-4" />"" </CardHeader> <CardContent> <Skeleton className="h-8 w-1 6" />"" <Skeleton className="mt-1 h-3 w-2 0" />"" </CardContent> </Card> </div> {} / } <div className="grid grid-cols-1 gap-6 lg:grid-cols-2">"" <Card> <CardHeader> <CardTitle> <Skeleton className="h-6 w-3 2" />"" </CardTitle> <CardDescription> <Skeleton className="h-4 w-4 8" />"" </CardDescription> </CardHeader> <CardContent> <div className="space-y-4">"") {} ( } <div key= {} className="flex items-center space-x-4">"" <Skeleton className="h-1 0 w-1 0 rounded-full" />"" <div className="space-y-2">"" <Skeleton className="h-4 w-3 2" />"" <Skeleton className="h-3 w-2 4" />"" </div> </div> </div> </CardContent> </Card> <Card> <CardHeader> <CardTitle> <Skeleton className="h-6 w-4 0" />"" </CardTitle> <CardDescription> <Skeleton className="h-4 w-5 6" />"" </CardDescription> </CardHeader> <CardContent> <div className="space-y-4">"") {} ( } <div key= {} className="flex items-center justify-between">"" <div className="space-y-2">"" <Skeleton className="h-4 w-2 4" />"" <Skeleton className="h-3 w-1 6" />"" </div> <Skeleton className="h-6 w-1 2" />"" </div> </div> </CardContent> </Card> </div> </div> )}}}}}))