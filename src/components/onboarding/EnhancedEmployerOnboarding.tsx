'use client' import { CardContent, CardHeader, CardTitle } from '@/components/ui/card'; import { useState, useEffect } from 'react'; import { useRouter } from 'next/navigation'; import { Card } from '@/components/ui/card'; import { Button } from '@/components/ui/button'; import { Input } from '@/components/ui/input'; import { Textarea } from '@/components/ui/textarea'; import { Badge } from 'lucide-react'; interface OnboardingData { // Company Information; companyName: string; companyDescription: string; website: string;, industry: string;, companySize: string;, foundedYear: string;, headquarters: string;, logoUrl: string; } } // Contact Information; contactName: string; contactEmail: string; contactPhone: string; contactTitle: string; // Company Culture & Benefits; companyValues: string[]; benefits: string[]; workEnvironment: string; remotePolicy: string; // Hiring Information; hiringGoals: string[]; typicalRoles: string[];, hiringVolume: string;, urgentHiring: boolean; // Verification;, businessLicense: string;, taxId: string;, verificationDocuments: string[]; } interface EnhancedEmployerOnboardingProps { user: any; onComplete? "undefined": () => void }; } export function EnhancedEmployerOnboarding() { : EnhancedEmployerOnboardingProps() { const router = useRouter(); const [ currentStep, setCurrentSte ]p] = useState(0(); const [ isLoading, setIsLoadin ]g] = useState(false() }; } const [ errors, setError ]s] = useState<Record<string, string>>( {} ); const [ data, setDat ]a] = useState<OnboardingData>( { companyName: user?.companyName || '', companyDescription: '', website: '', industry: user?.industry || '', companySize: '', foundedYear: '', headquarters: user?.location || '', logoUrl: '', contactName: user?.name || '', contactEmail: user?.email || '', contactPhone: '', contactTitle: '', companyValues: [], benefits: [], workEnvironment: '', remotePolicy: '', hiringGoals: [], typicalRoles: [], hiringVolume: '', urgentHiring: false, businessLicense: '', taxId: '', ; verificationDocuments: [] } ] }; const steps = [ { title: 'Company Information', description: 'Tell us about your company', icon: Building2, fields: ['companyName', 'companyDescription', 'website', 'industry', 'companySize', 'foundedYear', 'headquarters' ] } ] } { title: 'Contact Details', description: 'Primary contact information', icon: Mail, fields: [ 'contactName', 'contactEmail', 'contactPhone', 'contactTitle' ] } ] } { title: 'Company Culture', description: 'Values, benefits, and work environment', icon: Users, fields: [ 'companyValues', 'benefits', 'workEnvironment', 'remotePolicy' ] } ] } { title: 'Hiring Needs', description: 'Your hiring goals and requirements', icon: Target, fields: [ 'hiringGoals', 'typicalRoles', 'hiringVolume', 'urgentHiring' ] } ] } { title: 'Verification', ) description: 'Verify your business (optional()', icon: Shield, fields: [ 'businessLicense', 'taxId' ] } ] } const industryOptions = [ 'Technology', 'Healthcare', 'Finance', 'Education', 'Retail', 'Manufacturing', 'Construction', 'Transportation', 'Hospitality', 'Real Estate', 'Legal', ; 'Marketing', 'Non-profit', 'Government', 'Agriculture', 'Other'; ] ]; const companySizeOptions = [ '1-1 0 employees', '1 1-5 0 employees', '5 1-2 00 employees', ; '2 01-5 00 employees', '5 01-1 00 0 employees', '1 00 0+ employees'; ] ]; const commonValues = [ 'Innovation', 'Teamwork', 'Integrity', 'Customer Focus', 'Excellence', ; 'Diversity', 'Sustainability', 'Growth', 'Transparency', 'Work-Life Balance'; ] ]; const commonBenefits = [ 'Health Insurance', 'Dental Insurance', 'Vision Insurance', '4 01(k()', 'Paid Time Off', 'Flexible Hours', 'Remote Work', 'Professional Development', ; 'Gym Membership', 'Free Lunch', 'Stock Options', 'Tuition Reimbursement'; ] ]; const commonRoles = [ 'Software Engineer', 'Sales Representative', 'Customer Service', 'Manager', 'Administrative Assistant', 'Marketing Specialist', 'Accountant', 'Designer', ; 'Operations', 'Human Resources', 'Data Analyst', 'Project Manager'; ] ]; const updateData = (field: keyof OnboardingData, value: any() => { setData(prev => ( { .prev, [ fiel ]d]: value())); if ((errors[ fiel ]d]) ) { setErrors(prev } ( { .prev, [ fiel ]d]: '' ))); const toggleArrayItem = (field: keyof OnboardingData, item: string() => { const currentArray = data[ fiel ]d] as string[]; const newArray = currentArray.includes(item(); ? currentArray.filter((i: any() } i !== item(); : [ .currentArray, ite ]m]; updateData(field, newArray() }; } const validateStep = (stepIndex: number(): boolean => { const step = steps[ stepInde ]x]; } const newErrors: Record<string, string> = {}; step.fields.forEach((field: any() => { const value = data[field as keyof, OnboardingDat ]a]; if ((stepIndex === 0() ) { // Company Information; if ((field = == 'companyName' && !value() ) { newErrors[ fiel ]d] = 'Company name is required'; } if ((field = == 'industry' && !value() ) { newErrors[ fiel ]d] = 'Industry is required'; } if ((stepIndex === 1() ) { // Contact Details; if ((field = == 'contactName' && !value() ) { newErrors[ fiel ]d] = 'Contact name is required'; } if ((field = == 'contactEmail' && !value() ) { newErrors[ fiel ]d] = 'Contact email is required'; } setErrors(newErrors(); return Object.keys(newErrors().length === 0; const handleNext = () => { if ((validateStep(currentStep()) ) {; setCurrentStep(prev } Math.min(prev + 1, steps.length - 1()); } const handlePrevious = () => { setCurrentStep(prev } Math.max(prev - 1, 0()); } const handleComplete = async () => { if ((!validateStep(currentStep()) return; setIsLoading(true(); try ) { const response = await fetch('/api/employers/enhanced-onboarding', { method: 'POST' ), headers: { 'Content-Type': 'application/json' ), ); body: JSON.stringify(data(); if ((response.ok() ) { if ((onComplete() ) { onComplete(); } else { router.push('/employers/dashboard?onboarding = complete'); } } else { const errorData = await response.json(); } setErrors( { submit: errorData.error || 'Failed to complete onboarding' )); } catch (error() { setErrors( { submit: 'Failed to complete onboarding. Please try again.' )); } finally { setIsLoading(false() }; } const renderStepContent = () => { switch (currentStep() {; case 0: // Company Information; return ( //, Note: Multiple root elements may need React.Fragment wrapping; <div className="space-y-6">"" <div className="grid grid-cols-1, md:grid-cols-2 gap-4">"" <div> <label className="block text-sm font-medium text-gray-7 00 mb-2">"" Company Name * </label> <Input } value= { data.companyName } ) onChange= { ((e: any() => updateData('companyName', e.target.value() } } ) } placeholder="Enter your company name""" className= { errors.companyName ? 'border-red-5 00' : ' } } ' { errors.companyName && } ( } <p className="text-red-5 00 text-sm mt-1"> { errors.companyName } </p>"" </div> <div> <label className="block text-sm font-medium text-gray-7 00 mb-2">"" Industry * </label>; <select; value= { data.industry } ) onChange= { ((e: any() => updateData('industry', e.target.value() } } ) } className= { `w-full p-2 border border-gray-3 00 rounded-md $ { errors.industry ? 'border-red-5 00' : any } } ` } <option value="">Select industry</option>"" { industryOptions.map((industry: any() => } ( } <option key= { industry } value= { industry } > { industry } </option> </select> { errors.industry && } ( } <p className="text-red-5 00 text-sm mt-1"> { errors.industry } </p>"" </div> </div> <div> <label className="block text-sm font-medium text-gray-7 00 mb-2">"; " Company Description; </label> <Textarea; value= { data.companyDescription } )) onChange= { ((e: any() => updateData('companyDescription', e.target.value() } } ) } placeholder="Tell us about your company, what you do, and your mission""" rows= { 4 } </div> <div className="grid grid-cols-1 md:grid-cols-2 gap-4">"" <div> <label className="block text-sm font-medium text-gray-7 00 mb-2">"; " Website; </label> <Input; value= { data.website } onChange= { ((e: any() => updateData('website', e.target.value() } } ) } placeholder="https://yourcompany.com""" </div> <div> <label className="block text-sm font-medium text-gray-7 00 mb-2">"; " Company Size; </label> <select; value= { data.companySize } onChange= { ((e: any() => updateData('companySize', e.target.value() } } ) } className="w-full p-2 border border-gray-3 00 rounded-md""" <option value="">Select company size</option>"" { companySizeOptions.map((size: any() => } ( } <option key= { size } value= { size } > { size } </option> </select> </div> </div> <div className="grid grid-cols-1 md:grid-cols-2 gap-4">"" <div> <label className="block text-sm font-medium text-gray-7 00 mb-2">"; " Founded Year; </label> <Input; type="number""" value= { data.foundedYear } ) onChange= { ((e: any() => updateData('foundedYear', e.target.value() } } ) } placeholder="2 02 0""" min="1 80 0""" max= { new Date().getFullYear( } ) } </div> <div> <label className="block text-sm font-medium text-gray-7 00 mb-2">"; " Headquarters; </label> <Input; value= { data.headquarters } onChange= { ((e: any() => updateData('headquarters', e.target.value() } } ) } placeholder="City, State""" </div> </div> </div>; case 1: // Contact Details; return ( <div className="space-y-6">"" <div className="grid grid-cols-1, md:grid-cols-2 gap-4">"" <div> <label className="block text-sm font-medium text-gray-7 00 mb-2">"" Contact Name * </label> <Input; value= { data.contactName } ) onChange= { ((e: any() => updateData('contactName', e.target.value() } } ) } placeholder="Your full name""" className= { errors.contactName ? 'border-red-5 00' : ' } } ' { errors.contactName && } ( } <p className="text-red-5 00 text-sm mt-1"> { errors.contactName } </p>"" </div> <div> <label className="block text-sm font-medium text-gray-7 00 mb-2">"; " Job Title; </label> <Input; value= { data.contactTitle } ) onChange= { ((e: any() => updateData('contactTitle', e.target.value() } } ) } placeholder="HR Manager, CEO, etc.""" </div> </div> <div className="grid grid-cols-1 md:grid-cols-2 gap-4">"" <div> <label className="block text-sm font-medium text-gray-7 00 mb-2">"" Email Address * </label>; <Input; type="email""" value= { data.contactEmail } onChange= { ((e: any() => updateData('contactEmail', e.target.value() } } ) } placeholder="your.email@company.com""" className= { errors.contactEmail ? 'border-red-5 00' : ' } } ' { errors.contactEmail && } ( } <p className="text-red-5 00 text-sm mt-1"> { errors.contactEmail } </p>"" </div> <div> <label className="block text-sm font-medium text-gray-7 00 mb-2">"; " Phone Number; </label> <Input; type="tel""" value= { data.contactPhone } ) onChange= { ((e: any() => updateData('contactPhone', e.target.value() } } ) } placeholder="(5 55() 1 23-4 56 7""" </div> </div> </div>; case 2: // Company Culture; return ( <div className="space-y-6">"" <div> <label className="block text-sm font-medium text-gray-7 00 mb-3">"") Company Values (select all that, apply() </label> <div className="grid grid-cols-2 md:grid-cols-3 gap-2">"" { commonValues.map((value: any() => ( <button } key= { value } type="button""") onClick= { () => toggleArrayItem('companyValues', value()) } className= { `p-2 text-sm rounded-md border transition-colors $ { ` data.companyValues.includes(value() ? 'bg-blue-1 00 border-blue-5 00 text-blue-7 00' : 'bg-gray-5 0 border-gray-3 00 text-gray-7 00 hover:bg-gray-1 00 } ' } } ` } ` { value } </button> </div> </div> <div> <label className="block text-sm font-medium text-gray-7 00 mb-3">"" Benefits & Perks (select all that, apply() </label> <div className="grid grid-cols-2 md:grid-cols-3 gap-2">"" { commonBenefits.map((benefit: any() => ( <button } key= { benefit } type="button""") onClick= { () => toggleArrayItem('benefits', benefit()) } className= { `p-2 text-sm rounded-md border transition-colors $ { ` data.benefits.includes(benefit() ? 'bg-green-1 00 border-green-5 00 text-green-7 00' : 'bg-gray-5 0 border-gray-3 00 text-gray-7 00 hover:bg-gray-1 00 } ' } } ` } ` { benefit } </button> </div> </div> <div> <label className="block text-sm font-medium text-gray-7 00 mb-2">"; " Work Environment; </label> <Textarea; value= { data.workEnvironment } onChange= { ((e: any() => updateData('workEnvironment', e.target.value() } } ) } placeholder="Describe your work environment, culture, and what makes your company unique""" rows= { 3 } </div> <div> <label className="block text-sm font-medium text-gray-7 00 mb-2">"; " Remote Work Policy; </label> <select; value= { data.remotePolicy } onChange= { ((e: any() => updateData('remotePolicy', e.target.value() } } ) } className="w-full p-2 border border-gray-3 00 rounded-md""" <option value="">Select remote policy</option>"" <option value="fully-remote">Fully Remote</option>"" <option value="hybrid">Hybrid (Remote + Office()</option>"" <option value="office-only">Office Only</option>"" <option value="flexible">Flexible</option>"" </select> </div> </div>; case 3: // Hiring Needs; return ( <div className="space-y-6">"" <div> <label className="block text-sm font-medium text-gray-7 00 mb-3">"") Hiring Goals (select all that, apply() </label> <div className="grid grid-cols-1 md:grid-cols-2 gap-2">"" { [ 'Fill immediate openings', 'Build talent pipeline', 'Seasonal hiring', 'Expansion hiring', 'Replacement hiring', 'Diversity hiring ]'].map((goal: any() => ( <button } key= { goal } type="button""") onClick= { () => toggleArrayItem('hiringGoals', goal()) } className= { `p-3 text-sm rounded-md border transition-colors text-left $ { ` data.hiringGoals.includes(goal() ? 'bg-orange-1 00 border-orange-5 00 text-orange-7 00' : 'bg-gray-5 0 border-gray-3 00 text-gray-7 00 hover:bg-gray-1 00 } ' } } ` } ` { goal } </button> </div> </div> <div> <label className="block text-sm font-medium text-gray-7 00 mb-3">"; " Typical Roles You Hire For; </label> <div className="grid grid-cols-2 md:grid-cols-3 gap-2">"" { commonRoles.map((role: any() => ( <button } key= { role } type="button""") onClick= { () => toggleArrayItem('typicalRoles', role()) } className= { `p-2 text-sm rounded-md border transition-colors $ { ` data.typicalRoles.includes(role() ? 'bg-purple-1 00 border-purple-5 00 text-purple-7 00' : 'bg-gray-5 0 border-gray-3 00 text-gray-7 00 hover:bg-gray-1 00 } ' } } ` } ` { role } </button> </div> </div> <div> <label className="block text-sm font-medium text-gray-7 00 mb-2">"; " Monthly Hiring Volume; </label> <select; value= { data.hiringVolume } onChange= { ((e: any() => updateData('hiringVolume', e.target.value() } } ) } className="w-full p-2 border border-gray-3 00 rounded-md""" <option value="">Select hiring volume</option>"" <option value="1-5">1-5 hires per month</option>"" <option value="6-1 5">6-1 5 hires per month</option>"" <option value="1 6-3 0">1 6-3 0 hires per month</option>"" <option value="3 0+">3 0+ hires per month</option>"" </select> </div> <div className="flex items-center space-x-3">"; " <input; type="checkbox""" id="urgentHiring""" checked= { data.urgentHiring } onChange= { ((e: any() => updateData('urgentHiring', e.target.checked() } } ) } className="h-4 w-4 text-blue-6 00 border-gray-3 00 rounded""" <label htmlFor="urgentHiring" className="text-sm text-gray-7 00">"" I have urgent hiring needs (positions need to be filled within 2, weeks() </label> </div> </div>; case 4: // Verification; return ( <div className="space-y-6">"" <div className="bg-blue-5 0 border border-blue-2 00 rounded-lg p-4">"" <div className="flex items-center">"" <Shield className="h-5 w-5 text-blue-6 00 mr-2" />"") <h3 className="text-sm font-medium text-blue-8 00">Business Verification (Optional()</h3>"" </div> <p className="text-sm text-blue-7 00 mt-1">"" Verify your business to build trust with job seekers and get priority placement in search results. </p> </div> <div> <label className="block text-sm font-medium text-gray-7 00 mb-2">"" Business License Number; </label> <Input; value= { data.businessLicense } onChange= { ((e: any() => updateData('businessLicense', e.target.value() } } ) } placeholder="Enter your business license number""" </div> <div> <label className="block text-sm font-medium text-gray-7 00 mb-2">"; " Tax ID / EIN; </label> <Input; value= { data.taxId } onChange= { ((e: any() => updateData('taxId', e.target.value() } } ) } placeholder="Enter your Tax ID or EIN""" </div> <div className="bg-gray-5 0 border border-gray-2 00 rounded-lg p-4">"" <h4 className="text-sm font-medium text-gray-8 00 mb-2">Benefits of Verification: </h4>"" <ul className="text-sm text-gray-6 00 space-y-1">"" <li> Verified badge on your company profile</li> <li> Higher visibility in job search results</li> <li> Increased trust from job seekers</li> <li> Access to premium features</li> </ul> </div> </div>;, default: return null; return ( <div className="max-w-4 xl mx-auto p-6">"" { /* Progress Bar * } / } <div className="mb-8">"" <div className="flex items-center justify-between mb-4">"" <h1 className="text-2 xl font-bold text-gray-9 00">Complete Your Company Profile</h1>"" <span className="text-sm text-gray-6 00">"" Step { currentStep + } 1 } of { steps.length } </span> </div> <div className="w-full bg-gray-2 00 rounded-full h-2">"" <div; className="bg-blue-6 00 h-2 rounded-full transition-all duration-3 00""") style= { { width: `$ { ((currentStep + 1() / steps.length() * 1 } 0 } %` } } </div /> <div className="flex justify-between mt-4">"" { steps.map((step, index() => {; const StepIcon = step.icon; return ( <div } key= { index } className= { `flex flex-col items-center $ { ` index <= currentStep ? 'text-blue-6 00' : 'text-gray-4 00 } ' } } ` } ` >; <div; className= { `w-8 h-8 rounded-full flex items-center justify-center mb-2 $ { ` index <= currentStep ? 'bg-blue-6 00 text-white' : 'bg-gray-2 00 } ' } } ` } ` { index < currentStep ? ( <CheckCircle className="h-5 w-5" />"")) ) : ( <StepIcon className="h-4 w-4" / } > } "" </div> <span className="text-xs text-center hidden md:block"> { step.title } </span>"" </div>; </div> </div> { /* Step Content * } / } <Card> <CardHeader> <CardTitle className="flex items-center gap-2">"") { React.createElement(steps[ currentSte ]p].icon, { className: "h-5 w-5" )) } "" { steps[ currentSte ]p].title } </CardTitle> <p className="text-gray-6 00"> { steps[ currentSte ]p].description } </p>"" </CardHeader> <CardContent> { renderStepContent( } ) } { errors.submit && ( <div className="mt-4 p-3 bg-red-5 0 border border-red-2 00 rounded-md" } > } "" <p className="text-red-8 00 text-sm"> { errors.submit } </p>"" </div> </CardContent> </Card> { /* Navigation * } / } <div className="flex justify-between mt-6">"" <Button; variant="outline""" onClick= { handlePreviou } } s } disabled= { currentStep === } 0 } <ArrowLeft className="h-4 w-4 mr-2" />"; " Previous; </Button> { currentStep === steps.length - 1 ? ( <Button } onClick= { handleComplet } } e } disabled= { isLoading } className="bg-[#ff6, b3 ]5] hover:bg-[#e5 5, a2 ]b]""" { isLoading ? 'Completing.' : 'Complete Setup } } ' <CheckCircle className="h-4 w-4 ml-2" />"" </Button>)) ) : ( <Button onClick= { handleNex } } t } >; Next; <ArrowRight className="h-4 w-4 ml-2" />"" </Button> </div> </div> )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) */