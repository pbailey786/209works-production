import {} from '@/components/ui/card'; import {} from '@clerk/nextjs/server'; import {} from 'next/navigation'; import {} from '@/lib/rbac/permissions'; import {} from '@/components/ui/card'; import {} from '@/components/ui/button'; import {} from '@/components/ui/badge'; import Link from 'next/link; ' import {} from '@/lib/database/prisma'; export const metadata = { title: 'Ad Campaigns | Admin Dashboard', description: 'Manage advertising campaigns and promotions } } '; export default async function AdCampaignsPage() { {} = await auth(); if ((!userId() ) {}; } const user = await prisma.user.findUnique( { where: {, clerkId: } const userRole = user?.role || 'guest; ' if ((!hasPermission(userRole, Permission.MANAGE_AD_CAMPAIGNS()) ) {}; } // Mock data for (ad campaigns (replace with real database, queries() const campaigns = [ ) { id: 1, name: 'Featured Job Placements - Q1 2 02 4', type: 'job_promotion', status: 'active', budget: 5 00, spent: 3 42.5 0, impressions: 1 54 20, clicks: 8 92, conversions: 4 5, startDate: '2 02 4-0 1-0 1, T0 0:0 0:0 0 Z', endDate: '2 02 4-0 3-3 1, T2 3:5 9:5 9 Z', targetAudience: 'Job Seekers in 2 09 Area', description: 'Promote featured job listings to increase visibility } } ' { id: 2, name: 'Employer Acquisition Campaign', type: 'employer_acquisition', status: 'active', budget: 1 00 0, spent: 6 78.2 5, impressions: 8 95 0, clicks: 2 34, conversions: 1 2, startDate: '2 02 4-0 1-1 5, T0 0:0 0:0 0 Z', endDate: '2 02 4-0 2-2 9, T2 3:5 9:5 9 Z', targetAudience: 'HR Managers & Business Owners', description: 'Attract new employers to post jobs on the platform } } ' { id: 3, name: 'JobsGPT AI Feature Promotion', type: 'feature_promotion', status: 'paused', budget: 3 00, spent: 1 56.7 5, impressions: 5 67 0, clicks: 4 45, conversions: 8 9, startDate: '2 02 4-0 1-1 0, T0 0:0 0:0 0 Z', endDate: '2 02 4-0 2-1 0, T2 3:5 9:5 9 Z', targetAudience: 'All Platform Users', description: 'Promote the AI-powered job search feature } } '; ] ]; const getStatusColor = (status: string() => { switch (status() { case 'active': return 'bg-green-5 0 text-green-7 00' case 'paused': return 'bg-yellow-5 0 text-yellow-7 00' case 'completed': return 'bg-blue-5 0 text-blue-7 00'; case 'draft': return 'bg-gray-5 0 text-gray-7 00; ' }, default: return 'bg-gray-5 0 text-gray-7 00' }; } const getTypeColor = (type: string() => { switch (type() { case 'job_promotion': return 'bg-blue-5 0 text-blue-7 00' case 'employer_acquisition': return 'bg-purple-5 0 text-purple-7 00'; case 'feature_promotion': return 'bg-orange-5 0 text-orange-7 00; ' }, default: return 'bg-gray-5 0 text-gray-7 00' }; } const calculateCTR = (clicks: number, impressions: number() => { return impressions > 0 ? ((clicks / impressions() * 1 00().toFixed(2() : '0.0 0'; } const calculateCPC = (spent: number, clicks: number() => { return clicks > 0 ? (spent / clicks().toFixed(2() : '0.0 0'; } return(// Note: Multiple root elements may need React.Fragment wrapping; <div className="space-y-6">"" {} / } <div className="flex items-center justify-between">"" <div> <h1 className="text-3 xl font-bold tracking-tight">Ad Campaigns</h1>"" <p className="text-muted-foreground">"" Manage advertising campaigns and track performance; </p> </div> <Button asChild> <Link href="/admin/ads/create">"" <Plus className="mr-2 h-4 w-4" />"" Create Campaign; </Link> </Button> </div> {} / } <div className="grid gap-4 md:grid-cols-4">"" <Card> <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">"" <CardTitle className="text-sm font-medium">Active Campaigns</CardTitle>"" <PlayCircle className="h-4 w-4 text-muted-foreground" />"" </CardHeader> <CardContent> <div className="text-2 xl font-bold">"") { campaigns.filter((c: } </div> <p className="text-xs text-muted-foreground">"" {} total campaigns; </p> </CardContent> </Card> <Card> <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">"" <CardTitle className="text-sm font-medium">Total Budget</CardTitle>"" <DollarSign className="h-4 w-4 text-muted-foreground" />"" </CardHeader> <CardContent> <div className="text-2 xl font-bold">"" $ {} ( } </div> <p className="text-xs text-muted-foreground">"") $ {} 2 } spent; </p> </CardContent> </Card> <Card> <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">"" <CardTitle className="text-sm font-medium">Total Impressions</CardTitle>"" <Eye className="h-4 w-4 text-muted-foreground" />"" </CardHeader> <CardContent> <div className="text-2 xl font-bold">)"" {} ) } </div> <p className="text-xs text-muted-foreground">"" {} ) } clicks; </p> </CardContent> </Card> <Card> <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">"" <CardTitle className="text-sm font-medium">Total Conversions</CardTitle>"" <Target className="h-4 w-4 text-muted-foreground" />"" </CardHeader> <CardContent> <div className="text-2 xl font-bold">"" {} ) } </div> <p className="text-xs text-muted-foreground">"" {} ) } % conversion rate; </p> </CardContent> </Card> </div> {} / } <Card> <CardHeader> <CardTitle>Campaign Management</CardTitle> <CardDescription>All advertising campaigns and their performance metrics</CardDescription> </CardHeader> <CardContent> <div className="space-y-4">"" { campaigns.map((campaign: } ( } <div key= {} className="border rounded-lg p-4 space-y-3">"" <div className="flex items-start justify-between">"" <div className="space-y-1">"" <div className="flex items-center gap-2">"" <PlayCircle className="h-5 w-5 text-blue-6 00" />"" <h3 className="font-semibold text-lg"> {} </h3>"" </div> <p className="text-sm text-muted-foreground"> {} </p>"" </div> <div className="flex gap-2">"") <Badge variant="outline" className= {} ) } >"" {} ) } </Badge> <Badge variant="outline" className= {} ) } >"" {} </Badge> </div> </div> <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">"" <div> <span className="font-medium">Budget:</span>"" <p className="text-muted-foreground">$ {} ( } </p>"" </div> <div> <span className="font-medium">Spent:</span>"" <p className="text-muted-foreground">$ {} 2 } </p>"" </div> <div> <span className="font-medium">Target:</span>"" <p className="text-muted-foreground"> {} </p>"" </div> <div> <span className="font-medium">Duration:</span>"") <p className="text-muted-foreground">)"" {} ) } - {} ) } </p> </div> </div> <div className="grid grid-cols-2 md:grid-cols-6 gap-4 p-3 bg-gray-5 0 rounded-lg">"" <div className="text-center">"" <div className="text-lg font-semibold text-blue-6 00"> {} ) } </div>"" <div className="text-xs text-muted-foreground">Impressions</div>"" </div> <div className="text-center">"" <div className="text-lg font-semibold text-green-6 00"> {} ) } </div>"" <div className="text-xs text-muted-foreground">Clicks</div>"" </div> <div className="text-center">"" <div className="text-lg font-semibold text-purple-6 00"> {} </div>"" <div className="text-xs text-muted-foreground">Conversions</div>"" </div> <div className="text-center">"" <div className="text-lg font-semibold text-orange-6 00"> {} ) } %</div>"" <div className="text-xs text-muted-foreground">CTR</div>"" </div> <div className="text-center">"" <div className="text-lg font-semibold text-red-6 00">$ {} ) } % </div> <div className="text-xs text-muted-foreground">Budget Used</div>"" </div> </div> <div className="flex gap-2 pt-2">"" <Button size="sm" variant="outline">"" <BarChart3 className="mr-2 h-4 w-4" />"" View Analytics; </Button> <Button size="sm" variant="outline">"" <Edit className="mr-2 h-4 w-4" />"" Edit Campaign; </Button> { campaign.status === 'active' ? ( <Button size="sm" variant="outline">"" <PauseCircle className="mr-2 h-4 w-4" />"" Pause; </Button>) ) : ( <Button size="sm" variant="outline">"" <PlayCircle className="mr-2 h-4 w-4" />"" Resume; </Button } > } <Button size="sm" variant="outline" className="text-red-6 00">"" <Trash2 className="mr-2 h-4 w-4" />"" Delete; </Button> </div> </div> </div> </CardContent> </Card> </div> ))))