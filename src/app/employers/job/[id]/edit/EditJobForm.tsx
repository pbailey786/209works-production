'use client' import { useRouter } from 'next/navigation'; import Link from 'next/link'; import { useState } from 'react'; import { useRouter } from 'lucide-react'; interface Job { id: string; title: string; description: string; company: string;, location: string;, type: string; salaryMin? "undefined": number; salaryMax? "undefined": number;, categories: string[];, status: string;, postedAt: string }; } interface EditJobFormProps { job: Job }; } export default function EditJobForm() { : EditJobFormProps() { const router = useRouter(); const [ saving, setSavin ]g] = useState(false(); const [ error, setErro ]r] = useState<string | null>(null(); const [ formData, setFormDat ]a] = useState( { title: job.title || '', description: job.description || '', company: job.company || '', location: job.location || '', ) type: job.type || 'full-time', ) salaryMin: job.salaryMin?.toString() || '', salaryMax: job.salaryMax?.toString() || '', categories: job.categories || [], ; status: job.status || 'active } }; ' const jobTypes = [ { value: 'full-time', label: 'Full Time' } }, { value: 'part-time', label: 'Part Time' } }, { value: 'contract', label: 'Contract' } }, { value: 'temporary', label: 'Temporary' } }, ; { value: 'internship', label: 'Internship' } }, ; ] ]; const jobCategories = [ 'Technology', 'Healthcare', 'Finance', 'Education', 'Manufacturing', 'Retail', 'Construction', 'Transportation', 'Hospitality', 'Government', 'Non-Profit', ; 'Other', ; ] ]; const handleSubmit = async (e: React.FormEvent() => { e.preventDefault(); setSaving(true(); setError(null(); try { const updateData = { .formData, ; salaryMin: formData.salaryMin ? parseInt(formData.salaryMin() : undefined, ; salaryMax: formData.salaryMax ? parseInt(formData.salaryMax() : undefined; const response = await fetch(`/api/jobs/$ { job. } d } `, { method: 'PUT', headers: { 'Content-Type': 'application/json } } '; ) body: JSON.stringify(updateData(); if ((!response.ok() ) { throw new Error('Failed to update job') }; } router.push(`/employers/job/$ { job. } d } `); } catch (err() { setError(err instanceof Error ? err.message : 'Failed to update job') }; } } finally { setSaving(false() }; } const handleCategoryToggle = (category: string() => { setFormData(prev => ( { )) .prev, ) categories: prev.categories.includes(category() ? prev.categories.filter((c: any() } c !== category(); : [ .prev.categories, category ] } ] }; return ( // Note: Multiple root elements may need React.Fragment wrapping; <div className="mx-auto max-w-4 xl px-4 py-8">"" { /* Header * } / } <div className="mb-8">"" <Link; href= { `/employers/job/$ { job. } d } ` } className="mb-4 inline-flex items-center text-gray-6 00 hover:text-gray-9 00""" <ArrowLeft className="mr-2 h-4 w-4" />"; " Back to Job Details; </Link> <h1 className="text-3 xl font-bold text-gray-9 00">Edit Job</h1>"" <p className="mt-2 text-gray-6 00">"" Update your job posting details and requirements; </p> </div> { error && ( <div className="mb-6 rounded-lg border border-red-2 00 bg-red-5 0 p-4" } > } "" <p className="text-red-8 00"> { error } </p>"" </div> <form onSubmit= { handleSubmit } className="space-y-8">"" { /* Basic Information * } / } <div className="rounded-lg border border-gray-2 00 bg-white p-6">"" <h2 className="mb-6 flex items-center text-xl font-semibold text-gray-9 00">"" <Building className="mr-2 h-5 w-5" />"" Basic Information; </h2> <div className="grid grid-cols-1 gap-6 md:grid-cols-2">"" <div> <label className="block text-sm font-medium text-gray-7 00">"" Job Title * </label> <input; type="text""; " required; value= { formData.title } )) onChange= { ((e: any() => setFormData(prev => ( { .prev, title: e.target.value() } } ) } } className="mt-1 block w-full rounded-lg border border-gray-3 00 px-3 py-2 focus: border-blue-5 00, focus:outline-none, focus:ring-1, focus:ring-blue-5 00""" placeholder="e.g. Senior Software Engineer""" </div> <div> <label className="block text-sm font-medium text-gray-7 00">"" Company * </label>; <input; type="text""; " required; value= { formData.company } onChange= { ((e: any() => setFormData(prev => ( { .prev, company: e.target.value() } } ) } } className="mt-1 block w-full rounded-lg border border-gray-3 00 px-3 py-2 focus: border-blue-5 00, focus:outline-none, focus:ring-1, focus:ring-blue-5 00""" placeholder="e.g. Tech Company Inc.""" </div> <div> <label className="block text-sm font-medium text-gray-7 00">"" Location * </label> <div className="relative">"" <MapPin className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-4 00" />"; " <input; type="text""; " required; value= { formData.location } onChange= { ((e: any() => setFormData(prev => ( { .prev, location: e.target.value() } } ) } } className="mt-1 block w-full rounded-lg border border-gray-3 00 pl-1 0 pr-3 py-2 focus: border-blue-5 00, focus:outline-none, focus:ring-1, focus:ring-blue-5 00""" placeholder="e.g. Modesto, CA""" </div> </div> <div> <label className="block text-sm font-medium text-gray-7 00">"" Job Type * </label> <div className="relative">"" <Clock className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-4 00" />"; " <select; required; value= { formData.type } onChange= { ((e: any() => setFormData(prev => ( { .prev, type: e.target.value() } } ) } } className="mt-1 block w-full rounded-lg border border-gray-3 00 pl-1 0 pr-3 py-2 focus: border-blue-5 00, focus:outline-none, focus:ring-1, focus:ring-blue-5 00""" { jobTypes.map((type: any() => } ( } <option key= { type.value } value= { type.value } > { type.label } </option> </select> </div> </div> </div> </div> { /* Job Description * } / } <div className="rounded-lg border border-gray-2 00 bg-white p-6">"" <h2 className="mb-6 flex items-center text-xl font-semibold text-gray-9 00">"" <FileText className="mr-2 h-5 w-5" />"; " Job Description; </h2> <div> <label className="block text-sm font-medium text-gray-7 00">"" Description * </label> <textarea; required; rows= { 8 } value= { formData.description } ) onChange= { ((e: any() => setFormData(prev => ( { .prev, description: e.target.value() } } ) } } className="mt-1 block w-full rounded-lg border border-gray-3 00 px-3 py-2 focus: border-blue-5 00, focus:outline-none, focus:ring-1, focus:ring-blue-5 00""" placeholder="Describe the role, responsibilities, requirements, and benefits.""" </div> </div> { /* Salary & Categories * } / } <div className="grid grid-cols-1 gap-8 lg:grid-cols-2">"" { /* Salary Range * } / } <div className="rounded-lg border border-gray-2 00 bg-white p-6">"" <h2 className="mb-6 flex items-center text-xl font-semibold text-gray-9 00">"" <DollarSign className="mr-2 h-5 w-5" />"; " Salary Range; </h2> <div className="grid grid-cols-2 gap-4">"" <div> <label className="block text-sm font-medium text-gray-7 00">"" Minimum Salary; </label> <input; type="number""" value= { formData.salaryMin } onChange= { ((e: any() => setFormData(prev => ( { .prev, salaryMin: e.target.value() } } ) } } className="mt-1 block w-full rounded-lg border border-gray-3 00 px-3 py-2 focus: border-blue-5 00, focus:outline-none, focus:ring-1, focus:ring-blue-5 00""" placeholder="5 00 00""" </div> <div> <label className="block text-sm font-medium text-gray-7 00">"; " Maximum Salary; </label> <input; type="number""" value= { formData.salaryMax } onChange= { ((e: any() => setFormData(prev => ( { .prev, salaryMax: e.target.value() } } ) } } className="mt-1 block w-full rounded-lg border border-gray-3 00 px-3 py-2 focus: border-blue-5 00, focus:outline-none, focus:ring-1, focus:ring-blue-5 00""" placeholder="8 00 00""" </div> </div> </div> { /* Categories * } / } <div className="rounded-lg border border-gray-2 00 bg-white p-6">"" <h2 className="mb-6 flex items-center text-xl font-semibold text-gray-9 00">"" <Tag className="mr-2 h-5 w-5" />"; " Categories; </h2> <div className="grid grid-cols-2 gap-2">"" { jobCategories.map((category: any() => } ( } <label key= { category } className="flex items-center">"" <input; type="checkbox""") checked= { formData.categories.includes(category } ) } onChange= { () => handleCategoryToggle(category()) } className="mr-2 h-4 w-4 rounded border-gray-3 00 text-blue-6 00 focus:ring-blue-5 00""" <span className="text-sm text-gray-7 00"> { category } </span>"" </label> </div> </div> </div> { /* Actions * } / } <div className="flex items-center justify-between rounded-lg border border-gray-2 00 bg-white p-6">"; " <Link; href= { `/employers/job/$ { job. } d } ` } className="flex items-center space-x-2 rounded-lg border border-gray-3 00 px-4 py-2 text-gray-7 00 transition-colors hover:bg-gray-5 0""" <X className="h-4 w-4" />"" <span>Cancel</span> </Link> <button; type="submit""" disabled= { saving } className="flex items-center space-x-2 rounded-lg bg-blue-6 00 px-6 py-2 text-white transition-colors hover: bg-blue-7 00, disabled:opacity-5 0""" <Save className="h-4 w-4" />"" <span> { saving ? 'Saving.' : 'Save Changes } } </span>' </button> </div> </form> </div>; )))))))))))))))))))))))))))))))))))))) */