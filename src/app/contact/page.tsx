'use client ' import { Alert } from '@/components/ui/alert'; import { useState } from 'react'; import { motion } from 'framer-motion'; import { Button } from '@/components/ui/button'; export default function ContactPage() { { const [ formData, setFormDat ]a] = useState( { name: '', email: '', subject: '', category: '', message: '' }; ) } ) }; const [ isSubmitting, setIsSubmittin ]g] = useState(false(); const [ submitStatus, setSubmitStatu ]s] = useState< 'idle' | 'success' | 'error'; ; >('idle'); const contactMethods = [ { icon: Mail, title: 'Email Support', description: 'Get help via email', contact: 'admin@2 09.works', response: '2 4-4 8 hours', color: 'blue' } { icon: MessageCircle, title: 'Live Chat', description: 'Chat with our team', contact: 'Available on website', response: 'Instant during business hours', color: 'green' } { icon: Phone, title: 'Phone Support', description: 'Speak with our team', contact: '(2 09() 5 55-WORK', response: 'Mon-Fri 9 AM-6 PM PST', color: 'purple' } }, ; ; ] ]; const supportCategories = [ 'General Inquiry', 'Technical Support', 'Account Issues', 'Job Posting Help', 'Billing Questions', 'Feature Request', 'Partnership Inquiry', 'Media/Press', ; ; ] ]; const handleSubmit = async (e: React.FormEvent() => { e.preventDefault(); setIsSubmitting(true(); try { const response = await fetch('/api/contact', { method: 'POST', headers: { 'Content-Type': 'application/json' } ) ), body: JSON.stringify(formData(); ; if ((response.ok() ) { setSubmitStatus('success'); setFormData( {, name: '', email: '', subject: '', category: '', message: '' } ) } ) } else { setSubmitStatus('error'); } } catch (error() { setSubmitStatus('error'); } } finally { setIsSubmitting(false(); } const handleInputChange = ( e: React.ChangeEvent<; ; HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement; ) ) => { setFormData( { .formData, ) [ e.target.nam ]e]: e.target.value; )) return ( // Note: Multiple root elements may need React.Fragment wrapping; <div className="min-h-screen bg-gray-5 0">" " { /* Header * } / } <section className="bg-gradient-to-br from-[#2 d4, a3 ]e] via-[#1 d3, a2 ]e] to-[#2 d4, a3 ]e] py-2 0 text-white">" " <div className="mx-auto max-w-7 xl px-4 sm: px-6, lg: px-8">" " <motion.div; initial= { {, opacity: 0, y: 3 0 } } } animate= { { opacity: 1, y: 0 } } } transition= { { duration: 0.8 } } } className="text-center"" " <h1 className="mb-6 text-4 xl font-bold md: text-6 xl">"; " Get in Touch; </h1> <p className="mx-auto max-w-3 xl text-xl text-[#9, fdf9 ]f]/8 0, md:text-2 xl" />" " Have questions or need support? We're here to help you succeed in; ' the Central Valley job market. </p> </motion.div> </div> </section> { /* Contact Methods * } / } <section className="bg-white py-1 6">" " <div className="mx-auto max-w-7 xl px-4 sm: px-6, lg:px-8">" " <div className="mb-1 2 text-center">" " <h2 className="mb-4 text-3 xl font-bold text-gray-9 00">" " How Can We Help? </h2> <p className="text-lg text-gray-6 00">" " Choose the best way to reach us; </p> </div> <div className="grid grid-cols-1 gap-8, md:grid-cols-3">" ") { contactMethods.map((method, index() => { const Icon = method.icon; return ( <motion.div; } key= { method.title } initial= { { opacity: 0, y: 2 0 } } } whileInView= { { opacity: 1, y: 0 } } } transition= { { delay: index * 0.1 } } } className="rounded-xl border border-gray-2 00 bg-white p-8 text-center shadow-lg transition-shadow hover:shadow-xl"" " >; <div; className= { `mb-6 inline-flex h-1 6 w-1 6 items-center justify-center rounded-full $ { ` method.color === 'blue' ? 'bg-[#2 d4, a3 ]e]/1 0 text-[#2 d4, a3 ]e]' : method.color === 'green' ? 'bg-[#9, fdf9 ]f]/2 0 text-[#2 d4, a3 ]e]' : 'bg-[#ff6, b3 ]5]/1 0 text-[#ff6, b3 ]5]' } } } ` } ` <Icon className="h-8 w-8" />" " </div> <h3 className="mb-2 text-xl font-semibold text-gray-9 00">" " { method.title } </h3> <p className="mb-4 text-gray-6 00"> { method.description } </p>" " <div className="space-y-2">" " <p className="font-medium text-gray-9 00">" " { method.contact } </p> <p className="text-sm text-gray-5 00"> { method.response } </p>" " </div> </motion.div>; </div> </div> </section> { /* Contact Form * } / } <section className="bg-gray-5 0 py-1 6">" " <div className="mx-auto max-w-4 xl px-4 sm: px-6, lg:px-8">" " <div className="mb-1 2 text-center">" " <h2 className="mb-4 text-3 xl font-bold text-gray-9 00">" " Send Us a Message; </h2> <p className="text-lg text-gray-6 00">" " We'll get back to you within 2 4 hours; ' </p> </div> <div className="rounded-2 xl bg-white p-8 shadow-xl">" " { submitStatus === 'success' && ( <motion.div; } initial= { { opacity: 0, scale: 0.9 5 } } } animate= { { opacity: 1, scale: 1 } } } className="mb-8 flex items-center rounded-lg border border-green-2 00 bg-green-5 0 p-4"" " <CheckCircle className="mr-3 h-5 w-5 text-green-6 00" />" " <p className="text-green-8 00">"; " Thank you! Your message has been sent successfully. We'll get; ' back to you soon. </p> </motion.div> { submitStatus === 'error' && ( <motion.div; } initial= { { opacity: 0, scale: 0.9 5 } } } animate= { { opacity: 1, scale: 1 } } } className="mb-8 flex items-center rounded-lg border border-red-2 00 bg-red-5 0 p-4"" " <AlertCircle className="mr-3 h-5 w-5 text-red-6 00" />" " <p className="text-red-8 00">"; " Sorry, there was an error sending your message. Please try; again or contact us directly. </p> </motion.div> <form onSubmit= { handleSubmit } className="space-y-6">" " <div className="grid grid-cols-1 gap-6 md:grid-cols-2">" " <div> <label; htmlFor="name"" " className="mb-2 block text-sm font-medium text-gray-7 00"" " Your Name * </label>; <input; type="text"" " id="name"" " name="name""; " required; value= { formData.name } onChange= { handleInputChang } } e } className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-[#2 d4, a3 ]e]"" " placeholder="Enter your full name"" " </div> <div>; <label; htmlFor="email"" " className="mb-2 block text-sm font-medium text-gray-7 00"" " Email Address * </label>; <input; type="email"" " id="email"" " name="email""; " required; value= { formData.email } onChange= { handleInputChang } } e } className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-[#2 d4, a3 ]e]"" " placeholder="Enter your email address"" " </div> </div> <div className="grid grid-cols-1 gap-6, md:grid-cols-2">" " <div>; <label; htmlFor="category"" " className="mb-2 block text-sm font-medium text-gray-7 00"" " Category * </label>; <select; id="category"" " name="category""; " required; value= { formData.category } onChange= { handleInputChang } } e } className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-[#2 d4, a3 ]e]"" " <option value="">Select a category</option>" "))) { supportCategories.map((category: any() => ( } <option key= { category } value= { category } > { category } </option> </select> </div> <div>; <label; htmlFor="subject"" " className="mb-2 block text-sm font-medium text-gray-7 00"" " Subject * </label>; <input; type="text"" " id="subject"" " name="subject""; " required; value= { formData.subject } onChange= { handleInputChang } } e } className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-[#2 d4, a3 ]e]"" " placeholder="Brief description of your inquiry"" " </div> </div> <div>; <label; htmlFor="message"" " className="mb-2 block text-sm font-medium text-gray-7 00"" " Message * </label>; <textarea; id="message"" " name="message""; " required; rows= { 6 } value= { formData.message } onChange= { handleInputChang } } e } className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-transparent, focus:ring-2, focus:ring-[#2 d4, a3 ]e]"" " placeholder="Please provide details about your inquiry."" " </div> <Button; type="submit"" " disabled= { isSubmitting } className="w-full text-lg"" " { isSubmitting ? ( <div className="mr-2 h-5 w-5 animate-spin rounded-full border-b-2 border-white"></div>" " Sending. )) ) : ( <Send className="mr-2 h-5 w-5" />"; " Send Message; </> } </Button> </form> </div> </div> </section> { /* FAQ Quick Links * } / } <section className="bg-gray-5 0 py-1 6">" " <div className="mx-auto max-w-7 xl px-4 sm: px-6, lg:px-8">" " <div className="mb-1 2 text-center">" " <h2 className="mb-4 text-3 xl font-bold text-gray-9 00">" " Quick Help; </h2> <p className="text-lg text-gray-6 00">" " Find answers to common questions; </p> </div> <div className="grid grid-cols-1 gap-6, md:grid-cols-2, lg:grid-cols-3">" " <div className="rounded-lg border border-gray-2 00 bg-white p-6 shadow-sm">" " <Users className="mb-4 h-8 w-8 text-[#2 d4, a3 ]e]" />" " <h3 className="mb-2 text-lg font-semibold text-gray-9 00">" " For Job Seekers; </h3> <p className="mb-4 text-sm text-gray-6 00">" " Get help with your profile, applications, and job search. </p> <a; href="/faq#job-seekers"" " className="text-sm font-medium text-[#2 d4, a3 ]e] hover:text-[#1 d3, a2 ]e]"" " View FAQ </a> </div> <div className="rounded-lg border border-gray-2 00 bg-white p-6 shadow-sm">" " <Building className="mb-4 h-8 w-8 text-[#9, fdf9 ]f]" />" " <h3 className="mb-2 text-lg font-semibold text-gray-9 00">"; " For Employers; </h3> <p className="mb-4 text-sm text-gray-6 00">" " Learn about posting jobs, managing candidates, and billing. </p> <a; href="/faq#employers"" " className="text-sm font-medium text-[#9, fdf9 ]f] hover: text-[#8, fd0 8 ]f]"" " View FAQ </a> </div> <div className="rounded-lg border border-gray-2 00 bg-white p-6 shadow-sm">" " <Headphones className="mb-4 h-8 w-8 text-[#ff6, b3 ]5]" />" " <h3 className="mb-2 text-lg font-semibold text-gray-9 00">"; " Technical Support; </h3> <p className="mb-4 text-sm text-gray-6 00">" " Troubleshoot technical issues and platform features. </p> <a; href="/faq#technical"" " className="text-sm font-medium text-[#ff6, b3 ]5], hover:text-[#e5 5, a2 ]b]"" " View FAQ </a> </div> </div> </div> </section> </div>; )))))) */