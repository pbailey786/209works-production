import { CardContent, CardHeader, CardTitle } from '@/components/ui/card'; import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'; import React, { useState, useEffect, useCallback } from '@/components/ui/card'; import { Card } from '@/components/ui/card'; import { Button } from '@/components/ui/button'; import { Badge } from '@/components/ui/badge'; import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/card'; import { Progress } from '@/components/ui/card'; import { Alert, AlertDescription, AlertTitle } from '@/components/ui/card'; import { z } from 'zod'; import { X } from 'lucide-react'; interface FunnelDashboardProps { className? "undefined": string; } const FUNNEL_COLORS = { awareness: '#3 B8 2 F6', interest: '#1 0 B9 81', consideration: '#F5 9 E0 B', conversion: '#EF4 44 4', retention: '#8 B5 CF6' } const SEVERITY_COLORS = { low: '#1 0 B9 81', medium: '#F5 9 E0 B', high: '#EF4 44 4', critical: '#DC2 62 6' } const STEP_ICONS = { landing: Eye, search: Filter, job_view: FileText, registration: UserPlus, application_start: MousePointer, application_complete: CheckCircle, profile_complete: Users, employer_landing: Eye, pricing_view: Target, employer_registration: UserPlus, job_post_start: FileText, payment: CreditCard, job_published: CheckCircle, ; ; repeat_posting: Repeat; } export function FunnelAnalyticsDashboard() {; } : FunnelDashboardProps() { const funnelAnalysis = useFunnelAnalysis(); const [ selectedFunnel, setSelectedFunne ]l] = useState< 'job_seeker' | 'employer'; ; >('job_seeker'); const [ funnelData, setFunnelDat ]a] = useState<FunnelAnalysis | null>(null(); const [ isLoading, setIsLoadin ]g] = useState(false(); const [ dateRange, setDateRang ]e] = useState('3 0 d'); const [ lastUpdate, setLastUpdat ]e] = useState<Date | null>(null(); // Load funnel data; const loadFunnelData = useCallback(async () => {; ; setIsLoading(true(); try { const steps =; ; selectedFunnel === 'job_seeker' ? JOB_SEEKER_FUNNEL : EMPLOYER_FUNNEL; const analysis = await funnelAnalysis.analyzeFunnel(selectedFunnel, ; ; steps; ) setFunnelData(analysis(); setLastUpdate(new Date()); } } catch (error() { console.error('Failed to load funnel data:', error(); } } finally { setIsLoading(false(); } }, [ selectedFunnel, funnelAnalysi ]s]); // Load data on mount and when funnel changes; useEffect(() => { if ((funnelAnalysis.isInitialized() ) { loadFunnelData(); } }, [ funnelAnalysis.isInitialized, loadFunnelDat ]a]); // Auto-refresh data; useEffect(() => { const interval = setInterval(loadFunnelData, 5 * 6 0 * 1 00 0(); // Refresh every 5 minutes; return () // Note: Multiple root elements may need React.Fragment, wrapping() } clearInterval(interval(); } }, [ loadFunnelDat ]a]); // Get severity badge color; const getSeverityColor = (severity: string() => { return ( SEVERITY_COLORS[severity as keyof typeof, SEVERITY_COLOR ]S] || '#6 B7 28 0'; ; ) ); } // Get step icon; const getStepIcon = (stepId: string() => { const IconComponent =; ; STEP_ICONS[stepId as keyof typeof, STEP_ICON ]S] || Target; return IconComponent; } // Format funnel data for (chart; const formatFunnelChartData = () => ) { if ((!funnelData() return []; return funnelData.steps.map((step, index() } ( ) { name: step.step.name, users: step.users, completionRate: step.completionRate, dropOffRate: step.dropOffRate, fill: FUNNEL_COLORS[ step.step.categor ]y], order: index + 1; } // Format drop-off data for (chart; ) const formatDropOffChartData = () => ) { if ((!funnelData() return []; return funnelData.dropOffPoints.map((dropOff: any() } ( ) {} transition: `$ { dropOff.fromStp } $ { dropOff.toStp } `, dropOffRate: dropOff.dropOffRate, usersLost: dropOff.usersLost, severity: dropOff.severity, ) fill: getSeverityColor(dropOff.severity() if ((!funnelAnalysis.isInitialized() ) { return ( } <div className= { `flex h-6 4 items-center justify-center $ { classNae } ` } > <div className="text-center">" " <Target className="mx-auto mb-2 h-8 w-8 text-gray-4 00" />" " <p className="text-gray-5 00">Funnel analytics not initialized</p>" " </div> </div> return ( <div className= { `space-y-6 $ { classNae } ` } > { /* Header * } / } <div className="flex flex-col items-start justify-between gap-4 sm: flex-row, sm:items-center">" " <div> <h1 className="text-3 xl font-bold text-gray-9 00">" " Conversion Funnel Analysis; </h1> <p className="text-gray-6 00">" " Track user journeys, identify drop-off points, and optimize; conversion rates; </p> </div> <div className="flex gap-3">" " <Select; value= { selectedFunnel } )) onValueChange= { (value: 'job_seeker' | 'employer') => setSelectedFunnel(value() } <SelectTrigger className="w-4 8">" " <SelectValue placeholder="Select funnel" />" " </SelectTrigger> <SelectContent> <SelectItem value="job_seeker">Job Seeker Journey</SelectItem>" " <SelectItem value="employer">Employer Journey</SelectItem>" " </SelectContent> </Select> <Select value= { dateRange } onValueChange= { setDateRange } > <SelectTrigger className="w-3 2">" " <SelectValue placeholder="Date range" />" " </SelectTrigger> <SelectContent> <SelectItem value="7 d">Last 7 days</SelectItem>" " <SelectItem value="3 0 d">Last 3 0 days</SelectItem>" " <SelectItem value="9 0 d">Last 9 0 days</SelectItem>" " </SelectContent> </Select> <Button; variant="outline"" " onClick= { loadFunnelDat } } a } disabled= { isLoading } >; <RefreshCw; className= { `mr-2 h-4 w-4 $ { isLoading ? 'animate-spin' : any } } ` } />; Refresh; </Button> <Button variant="outline">" " <Download className="mr-2 h-4 w-4" />" " Export; </Button> </div> </div> { /* Key Metrics * } / } { funnelData && ( <div className="grid grid-cols-1 gap-4 md: grid-cols-2, lg:grid-cols-4">" " <Card> <CardContent className="p-6">" " <div className="flex items-center justify-between">" " <div> <p className="text-sm font-medium text-gray-6 00">" " Total Users; </p> <p className="text-2 xl font-bold text-gray-9 00"> } " ") { funnelData.totalUsers.toLocaleString( } ) } </p> </div> <Users className="h-8 w-8 text-blue-5 00" />" " </div> </CardContent> </Card> <Card> <CardContent className="p-6">" " <div className="flex items-center justify-between">" " <div> <p className="text-sm font-medium text-gray-6 00">" " Overall Conversion; </p> <p className="text-2 xl font-bold text-gray-9 00">" " { funnelData.overallConversionRate.toFixed(1 } ) } % </p> </div> <Target className="h-8 w-8 text-green-5 00" />" " </div> </CardContent> </Card> <Card> <CardContent className="p-6">" " <div className="flex items-center justify-between">" " <div> <p className="text-sm font-medium text-gray-6 00">" " Critical Drop-offs; </p> <p className="text-2 xl font-bold text-gray-9 00">" " { funnelData.dropOffPoints.filter(d => d.severity === 'critical' ) ).length; } </p> </div> <AlertTriangle className="h-8 w-8 text-red-5 00" />" " </div> </CardContent> </Card> <Card> <CardContent className="p-6">" " <div className="flex items-center justify-between">" " <div> <p className="text-sm font-medium text-gray-6 00">" " Optimization Opportunities; </p> <p className="text-2 xl font-bold text-gray-9 00">" " { funnelData.optimizationRecommendations.length } </p> </div> <Lightbulb className="h-8 w-8 text-yellow-5 00" />" " </div> </CardContent> </Card> </div> { /* Main Content * } / } <Tabs defaultValue="funnel" className="space-y-6">" " <TabsList> <TabsTrigger value="funnel">Funnel Visualization</TabsTrigger>" " <TabsTrigger value="dropoffs">Drop-off Analysis</TabsTrigger>" " <TabsTrigger value="recommendations">Optimization</TabsTrigger>" " <TabsTrigger value="cohorts">Cohort Analysis</TabsTrigger>" " </TabsList> <TabsContent value="funnel" className="space-y-6">" " { /* Funnel Steps * } / } <Card> <CardHeader> <CardTitle>Conversion Funnel Steps</CardTitle> </CardHeader> <CardContent> { funnelData ? ( <div className="space-y-4">" ") { funnelData.steps.map((stepData, index() => { const IconComponent = getStepIcon(stepData.step.id(); const isLastStep = index === funnelData.steps.length - 1; return ( } <div key= { stepData.step.id } className="relative">" " <div; className="flex items-center justify-between rounded-lg border-l-4 bg-gray-5 0 p-6"" " style= { { borderLeftColor: FUNNEL_COLORS[ stepData.step.categor ]y] } <div className="flex items-center gap-4">"; " <div; className="flex h-1 2 w-1 2 items-center justify-center rounded-full"" " style= { { backgroundColor: FUNNEL_COLORS[ stepData.step.categor ]y] } <IconComponent className="h-6 w-6 text-white" />" " </div> <div> <h3 className="font-semibold text-gray-9 00">" " { stepData.step.name } </h3> <p className="text-sm text-gray-6 00">" " { stepData.step.description } </p> <Badge variant="outline" className="mt-1">" " { stepData.step.category } </Badge> </div> </div> <div className="text-right">" " <div className="flex items-center gap-4">" " <div> <p className="text-2 xl font-bold text-gray-9 00">" ") { stepData.users.toLocaleString( } ) } </p> <p className="text-sm text-gray-6 00">users</p>" " </div> <div> <p className="text-lg font-semibold text-gray-9 00">" " { stepData.completionRate.toFixed(1 } ) } % </p> <p className="text-sm text-gray-6 00">"; " completion; </p> </div> { index > 0 && ( <div> <p className="text-lg font-semibold text-red-6 00"> } " ") - { stepData.dropOffRate.toFixed(1 } ) } % </p> <p className="text-sm text-gray-6 00">" " drop-off; </p> </div> </div> </div> </div> { !isLastStep && ( <div className="mb-2 mt-2 flex justify-center">" " <ArrowDown className="h-6 w-6 text-gray-4 00" />" " </div> } </div> </div> ) ) : ( <div className="py-8 text-center">" " <RefreshCw; className= { `mx-auto mb-2 h-8 w-8 text-gray-4 00 $ { isLoading ? 'animate-spin' : any } } ` } <p className="text-gray-5 00">Loading funnel data.</p>" " </div> </CardContent> </Card> { /* Funnel Chart * } / } { funnelData && ( <Card> <CardHeader> <CardTitle>Funnel Visualization</CardTitle> </CardHeader> <CardContent> } <ResponsiveContainer width="1 00%" height= { 4 0 } 0 } >" ")) <BarChart data= { formatFunnelChartData( } ) } layout="horizontal">" " <CartesianGrid strokeDasharray="3 3" />" " <XAxis type="number" />" " <YAxis dataKey="name" type="category" width= { 1 5 } 0 } />"; " <Tooltip; formatter= { (value, name() => [ } name === 'users' ? `$ { vale } users` : `$ { vale } %`, name === 'users' ? 'Users' : 'Completion Rate'] ] } <Bar dataKey="users" fill="#3 B8 2 F6" />" " </BarChart> </ResponsiveContainer> </CardContent> </Card> </TabsContent> <TabsContent value="dropoffs" className="space-y-6">" " { /* Drop-off Points * } / } { funnelData && ( <Card> <CardHeader> <CardTitle>Drop-off Analysis</CardTitle> <p className="text-sm text-gray-6 00">"; " Identify where users are leaving the funnel and why; </p> </CardHeader> <CardContent> <div className="space-y-4">" ") { funnelData.dropOffPoints.map((dropOff, index() => ( } <div key= { index } className="rounded-lg border p-4">" " <div className="mb-3 flex items-center justify-between">" " <div className="flex items-center gap-3">" " <Badge; variant="outline"" " style= { { ) borderColor: getSeverityColor(dropOff.severity(), color: getSeverityColor(dropOff.severity() } { dropOff.severity } </Badge> <span className="font-medium">" " { dropOff.fromStep } { dropOff.toStep } </span> </div> <div className="text-right">" " <p className="text-lg font-semibold text-red-6 00">" " - { dropOff.dropOffRate.toFixed(1 } ) } % </p> <p className="text-sm text-gray-6 00">"; " { dropOff.usersLost.toLocaleString( } ) } users lost; </p> </div> </div> <div className="mb-3">" " <Progress; value= { dropOff.dropOffRate } className="h-2"" " style= { {} backgroundColor: `$ { getSeverityColor(dropOff.severiy } 2 0` </div> <div> <p className="mb-2 text-sm font-medium text-gray-7 00">" " Primary Reasons: </p> <ul className="space-y-1 text-sm text-gray-6 00">" ") { dropOff.primaryReasons.map((reason, reasonIndex() => (; <li; } key= { reasonIndex } className="flex items-center gap-2"" " <div className="h-1.5 w-1.5 rounded-full bg-gray-4 00" />" " { reason } </li> </ul> </div> { dropOff.potentialRevenueLost && ( <div className="mt-3 rounded-lg bg-red-5 0 p-3">" " <p className="text-sm text-red-8 00">" " <strong>Potential Revenue Lost:</strong> $ } )) { dropOff.potentialRevenueLost.toLocaleString( } ) } </p> </div> </div> </div> </CardContent> </Card> { /* Drop-off Chart * } / } { funnelData && ( <Card> <CardHeader> <CardTitle>Drop-off Rates by Transition</CardTitle> </CardHeader> <CardContent> } <ResponsiveContainer width="1 00%" height= { 3 0 } 0 } >" ") <BarChart data= { formatDropOffChartData( } ) } > <CartesianGrid strokeDasharray="3 3" />"; " <XAxis; dataKey="transition"" " angle= { -4 } 5 } textAnchor="end"" " height= { 1 0 } 0 } <YAxis />; <Tooltip; formatter= { (value() => [ `$ { vale } %`, 'Drop-off Rate ]'] } <Bar dataKey="dropOffRate" fill="#EF4 44 4" />" " </BarChart> </ResponsiveContainer> </CardContent> </Card> </TabsContent> <TabsContent value="recommendations" className="space-y-6">" " { /* Optimization Recommendations * } / } { funnelData && ( <div className="space-y-4">" ") { funnelData.optimizationRecommendations.map((recommendation: any() => ( } <Card key= { recommendation.id } > <CardContent className="p-6">" " <div className="mb-4 flex items-start justify-between">" " <div className="flex items-start gap-3">" " <div className="flex h-1 0 w-1 0 items-center justify-center rounded-full bg-blue-1 00">" " <Lightbulb className="h-5 w-5 text-blue-6 00" />" " </div> <div> <h3 className="mb-1 font-semibold text-gray-9 00">" " { recommendation.title } </h3> <p className="mb-2 text-gray-6 00">" " { recommendation.description } </p> <div className="mb-3 flex gap-2">"; " <Badge; variant= { recommendation.priority === 'critical' ? 'destructive' : 'outline' } >; { recommendation.priority } priority; </Badge> <Badge variant="outline">" ") { recommendation.type.replace('_', ' ' } ) } </Badge> <Badge variant="outline">" " { recommendation.implementationEffort } effort; </Badge> </div> </div> </div> { recommendation.estimatedLift && ( <div className="text-right">" " <p className="text-lg font-semibold text-green-6 00"> } " " + { recommendation.estimatedLift } % </p> <p className="text-sm text-gray-6 00">" " estimated lift; </p> </div> </div> <div className="mb-4 rounded-lg bg-gray-5 0 p-4">" " <p className="text-sm text-gray-7 00">" " <strong>Expected Impact:</strong> { ' } } ' { recommendation.expectedImpact } </p> </div> <div className="flex items-center justify-between">" " <div className="text-sm text-gray-6 00">" ") Affects: { recommendation.affectedSteps.join(', ' } ) } </div> <Button size="sm">Implement Recommendation</Button>" " </div> </CardContent> </Card> </div> </TabsContent> <TabsContent value="cohorts" className="space-y-6">" " <Card> <CardHeader> <CardTitle>Cohort Analysis</CardTitle> <p className="text-sm text-gray-6 00">" " Compare conversion rates across different user segments; </p> </CardHeader> <CardContent> <div className="py-8 text-center">" " <Info className="mx-auto mb-2 h-8 w-8 text-gray-4 00" />" " <p className="text-gray-5 00">Cohort analysis coming soon</p>" " <p className="mt-1 text-sm text-gray-4 00">" " This feature will allow you to compare funnel performance; across different user segments; </p> </div> </CardContent> </Card> </TabsContent> </Tabs> { /* Last Updated * } / } { lastUpdate && ( <div className="text-center text-sm text-gray-5 00"> } " ") Last updated: { lastUpdate.toLocaleString( } ) } </div> </div>; )))))))))))))))))))))))))))))))) */