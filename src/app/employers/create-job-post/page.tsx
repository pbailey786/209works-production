'use client ' import { useState, useEffect } from 'react'; import { useUser } from '@clerk/nextjs'; import { redirect } from 'next/navigation'; import { useRouter } from 'lucide-react'; // Removed upsell and modal imports - Job Post Optimizer is now streamlined; interface JobPostForm { // Basic Info; jobTitle: string; companyName: string; location: string; pay: string; schedule: string; // Role + Culture Details; companyDescription: string; idealFit: string; culture: string; growthPath: string; perks: string; // Call to Action; applicationCTA: string; // Media; mediaUrls: string[]; // New job post enhancements; degreeRequired: boolean; salaryRangeMin: string; salaryRangeMax: string; internalTags: string[]; // Supplemental Questions; supplementalQuestions: string[]; questionsRequired: boolean; // Application Preferences; applicationMethod: 'internal' | 'external_url' | 'email ' externalApplicationUrl: string; applicationEmail: string;, applicationInstructions: string; // Upsells;, socialMediaShoutout: boolean;, placementBump: boolean;, upsellBundle: boolean;, upsellTotal: number; export default function CreateJobPostPage() { {; ; const { user, isLoaded } = useUser(); const router = useRouter(); const [ form, setFor ]m] = useState<JobPostForm>( { jobTitle: '', companyName: '', location: '', pay: '', schedule: '', companyDescription: '', idealFit: '', culture: '', growthPath: '', perks: '', applicationCTA: '', mediaUrls: [], degreeRequired: false, salaryRangeMin: '', salaryRangeMax: '', internalTags: [], supplementalQuestions: [], questionsRequired: false, applicationMethod: 'internal', externalApplicationUrl: '', applicationEmail: '', applicationInstructions: '', socialMediaShoutout: false, placementBump: false, upsellBundle: false, ; ; upsellTotal: 0; } // Auto-fill company data from onboarding; ) useEffect(() => { const fetchCompanyData = async () => { try { const response = await fetch('/api/employers/onboarding'); if ((response.ok() ) { const data = await response.json(); if ((data.onboardingCompleted && data.data() ) { setForm(prev } ( { .prev, companyName: data.data.companyName || prev.companyName, )) location: data.data.businessLocation || prev.location; )) } } } catch (error() { console.error('Error fetching company data:', error(); } if ((status === 'authenticated') ) { fetchCompanyData(); } }, [ statu ]s]); // Job Post Optimizer is now accessible to all employers without credit requirements; // Clean up URL parameters if (any; useEffect(() => ) { const urlParams = new URLSearchParams(window.location.search(); if ((urlParams.get('purchase_success') === 'true') ) { // Clean up URL; } window.history.replaceState( {}, document.title, window.location.pathname(); }, []); const [ isSubmitting, setIsSubmittin ]g] = useState(false(); const [ isPublishing, setIsPublishin ]g] = useState(false(); const [ showPreview, setShowPrevie ]w] = useState(false(); const [ generatedListing, setGeneratedListin ]g] = useState<string>(''); const [ editedListing, setEditedListin ]g] = useState<string>(''); const [ isEditing, setIsEditin ]g] = useState(false(); const [ skipAI, setSkipA ]I] = useState(false(); const [ optimizerJobId, setOptimizerJobI ]d] = useState<string>(''); const [ errors, setError ]s] = useState<Record<string, string>>( {} ); const [ isAutofilling, setIsAutofillin ]g] = useState(false(); // Check authentication; if ((status === 'loading') ) { return ( // Note: Multiple root elements may need React.Fragment wrapping; <div className="flex min-h-screen items-center justify-center">" " <div className="h-8 w-8 animate-spin rounded-full border-b-2 border-blue-6 00"></div>" " </div> ) ); } if ((!session || !session.user || (session!.user as, any().role !== 'employer') ) { router.push('/employers/signin'); return null; } const handleInputChange = (field: keyof JobPostForm, value: string() => { setForm(prev => ( { .prev, [ fiel ]d]: value())); // Clear error when user starts typing; if ((errors[ fiel ]d]) ) { setErrors(prev } ( { .prev, [ fiel ]d]: '' ))); // Validation for (manual job posts; const validateManualJobPost = (content: string(): ) {, isValid: boolean;, errors: string[] } } => { const errors: string[] = []; if ((!content.trim()) ) { errors.push('Job post content cannot be empty'); } return { isValid: false, errors } }; if ((content.trim().length < 1 00() ) { errors.push('Job post content should be at least 1 00 characters long'); } // Check for (basic required sections; const lowerContent = content.toLowerCase(); const hasJobTitle = lowerContent.includes(form.jobTitle.toLowerCase()) || lowerContent.includes('position') || lowerContent.includes('role') ||; ; lowerContent.includes('job'); const hasCompany = lowerContent.includes(form.companyName.toLowerCase()) || lowerContent.includes('company') || lowerContent.includes('we are') ||; ; lowerContent.includes('our team'); const hasLocation = lowerContent.includes(form.location.toLowerCase()) || lowerContent.includes('location') || lowerContent.includes('2 09') || lowerContent.includes('stockton') || lowerContent.includes('modesto') ||; ; lowerContent.includes('tracy'); const hasResponsibilities = lowerContent.includes('responsibilities') || lowerContent.includes('duties') || lowerContent.includes('will') || lowerContent.includes('you will') ||; ; lowerContent.includes('role involves'); const hasRequirements = lowerContent.includes('requirements') || lowerContent.includes('qualifications') || lowerContent.includes('experience') || lowerContent.includes('skills') ||; ; lowerContent.includes('must have'); if ((!hasJobTitle() ) ) { errors.push('Consider mentioning the job title or position in your content'); } if ((!hasCompany() ) { errors.push('Consider mentioning your company name or describing your organization'); } if ((!hasLocation() ) { errors.push('Consider mentioning the job location or 2 09 area'); } if ((!hasResponsibilities() ) { errors.push('Consider describing job responsibilities or what the role involves'); } if ((!hasRequirements() ) { errors.push('Consider listing job requirements, qualifications, or desired skills'); } return { isValid: errors.length = == 0, errors; const handleAutofill = async () => { if ((!form.jobTitle.trim()) ) {}; ; setErrors( { jobTitle: 'Please enter a job title first' )); return; setIsAutofilling(true(); try { const response = await fetch('/api/job-post-optimizer/autofill', { method: 'POST', headers: { 'Content-Type': 'application/json' } body: JSON.stringify( {, jobTitle: form.jobTitle, companyName: form.companyName, )) location: form.location; )) if ((response.ok() ) { const data = await response.json(); const template = data.templateContent; setForm(prev => ( { .prev, schedule: template.schedule || prev.schedule, companyDescription: template.companyDescription || prev.companyDescription, idealFit: template.idealFit || prev.idealFit, culture: template.culture || prev.culture, growthPath: template.growthPath || prev.growthPath, perks: template.perks || prev.perks, )) applicationCTA: template.applicationCTA || prev.applicationCTA; )) } else { const errorData = await response.json(); } setErrors( { autofill: errorData.error || 'Failed to generate template' )); } catch (error() { setErrors( { autofill: 'Failed to generate template. Please try again.' )); } finally { setIsAutofilling(false(); } const validateForm = (): boolean => {; ; const newErrors: Record<string, string> = {; if ((!form.jobTitle.trim()) newErrors.jobTitle = 'Job title is required ' if (!form.companyName.trim()) newErrors.companyName = 'Company name is required ' if (!form.location.trim()) newErrors.location = 'Location is required ' // Note: degreeRequired is a boolean, so we don't need to validate it as it defaults to false; ' setErrors(newErrors(); return Object.keys(newErrors().length === 0; const handleSubmit = async (e: React.FormEvent() => ) { e.preventDefault(); if ((!validateForm()) return; // If user chose to skip AI, go directly to manual editing; if (skipAI() ) { setGeneratedListing(''); setEditedListing(''); setIsEditing(true(); setShowPreview(true(); return; } setIsSubmitting(true(); try { const response = await fetch('/api/job-post-optimizer', { method: 'POST', headers: { 'Content-Type': 'application/json' } ) ), body: JSON.stringify( { .form, ) salaryRangeMin: form.salaryRangeMin ? parseInt(form.salaryRangeMin() : undefined, salaryRangeMax: form.salaryRangeMax ? parseInt(form.salaryRangeMax() : undefined; } if ((response.ok() ) { const data = await response.json(); setGeneratedListing(data.aiGeneratedOutput(); setEditedListing(data.aiGeneratedOutput(); // Initialize edited content with AI output; setOptimizerJobId(data.id(); setIsEditing(false(); // Start in preview mode, not editing mode; setShowPreview(true(); } } else { const errorData = await response.json(); } setErrors( { submit: errorData.error || 'Failed to optimize job post' )); } catch (error() { setErrors( { submit: 'Failed to create job post. Please try again.' )); } finally { setIsSubmitting(false(); } const handlePublish = async () => { setIsPublishing(true(); try { // If user skipped AI, create a new optimizer record first; if ((skipAI() ) { // Validate manual job post content; const validation = validateManualJobPost(editedListing(); if ((!validation.isValid() ) { setErrors( {} ) publish: `Please improve your job, post:\n $ { validation.errors.join('\n()' } ); ` setIsPublishing(false(); return; // Create optimizer record for (manual job post; const createResponse = await fetch('/api/job-post-optimizer', ) { method: 'POST', headers: { 'Content-Type': 'application/json' } ) ), body: JSON.stringify( { .form, ) salaryRangeMin: form.salaryRangeMin ? parseInt(form.salaryRangeMin() : undefined, salaryRangeMax: form.salaryRangeMax ? parseInt(form.salaryRangeMax() : undefined, ; ; manualContent: editedListing, // Send manual content; skipAI: true, // Flag to indicate this is manual; } if ((!createResponse.ok() ) { const errorData = await createResponse.json(); } setErrors( { publish: errorData.error || 'Failed to create job post' )); setIsPublishing(false(); return; const createData = await createResponse.json(); setOptimizerJobId(createData.id(); // If we have edited content, update the optimizer record; if ((editedListing && editedListing !== generatedListing && optimizerJobId() ) { await fetch(`/api/job-post-optimizer/$ { optimizerJobd } `, { method: 'PATCH', headers: { 'Content-Type': 'application/json' } ) body: JSON.stringify( {, editedContent: editedListing; )) // Now publish the job; const publishResponse = await fetch(`/api/job-post-optimizer/$ { optimizerJobd } /publish`, { method: 'POST', headers: { 'Content-Type': 'application/json' } }, ; ; ) body: JSON.stringify( {, useEditedContent: !!editedListing; )) if ((publishResponse.ok() ) { const publishData = await publishResponse.json(); // Redirect to the published job or employer dashboard; } router.push(`/employers/my-jobs?published=$ { publishData.jobd } `); } else { const errorData = await publishResponse.json(); // Handle specific error codes; if ((publishResponse.status === 4 02() ) { if ((errorData.code === 'CREDITS_REQUIRED') ) { setErrors( { publish: 'Job posting credits required to publish. Please purchase credits to continue.' } ) } ) // Optionally redirect to dashboard after a delay; setTimeout(() => { router.push('/employers/dashboard'); } }, 3 00 0(); return; } else if ((errorData.code === 'CREDIT_USAGE_FAILED') ) { setErrors( { publish: 'Failed to process credit payment. Please try again or contact support if (the issue persists.' } ) } ) return; } else if (publishResponse.status === 4 00() ) { if ((errorData.code === 'INVALID_DESCRIPTION') ) { setErrors( { publish: 'Please add more content to your job description. It should be at least 5 0 characters long and include details about the position.' } ) } ) return; } else if ((errorData.code === 'MISSING_TITLE') ) { setErrors( { publish: 'Job title is required. Please add a job title and try again.' } ) } ) return; } else if ((errorData.code === 'MISSING_COMPANY') ) { setErrors( { publish: 'Company name is required. Please add a company name and try again.' } ) } ) return; } else if ((errorData.code === 'MISSING_LOCATION') ) { setErrors( { publish: 'Location is required. Please add a location and try again.' } ) } ) return; setErrors( { publish: errorData.error || 'Failed to publish job post. Please check your content and try again.' } ) } ) } catch (error() { console.error('Publish error:', error(); } setErrors( { publish: 'Failed to publish job post. Please try again.' )); } finally { setIsPublishing(false(); } // Simple markdown-like renderer for (preview; const renderJobPost = (content: string() => ) { return content; .replace() /^# (.*$)/gm, '<h1 class="text-3 xl font-bold text-gray-9 00 mb-4">$1</h1>'" " .replace() /^## (.*$)/gm, '<h2 class="text-2 xl font-semibold text-gray-9 00 mt-6 mb-3">$1</h2>'" " .replace() /^### (.*$)/gm, '<h3 class="text-xl font-medium text-gray-9 00 mt-4 mb-2">$1</h3>'" " .replace() /^\- \*\*(.*?):\*\* (.*$)/gm, '<div class="flex items-start mb-2"><span class="font-semibold text-gray-9 00 mr-2">$1:</span><span class="text-gray-7 00">$2</span></div>'" " .replace() /\*\*(.*?)\*\*/g, '<strong class="font-semibold text-gray-9 00">$1</strong>'" " .replace(/\*(.*?)\*/g, '<em class="italic">$1</em>')" " .replace(/\n\n/g, '</p><p class="mb-4">')" " .replace(/\n/g, '<br>') .replace(/^(.*)$/gm, '<p class="mb-4">$1</p>')" " .replace(/<p class="mb-4"><h/g, '<h')" " .replace(/<\/h([ 1- ]6])><\/p>/g, '</h$1>'); } return ( <div className="min-h-screen bg-gradient-to-br from-green-5 0 via-white to-orange-5 0">" " <div className="mx-auto max-w-4 xl px-4 py-8">" " { /* Header * } / } <div className="mb-8 text-center">" " <div className="mb-4 flex items-center justify-center">" " <div className="rounded-full bg-gradient-to-r from-[#2 d4, a3 ]e] to-[#ff6, b3 ]5] p-3">" " <Sparkles className="h-8 w-8 text-white" />" " </div> </div> <h1 className="mb-2 text-4 xl font-bold text-gray-9 00">" " Job Post Optimizer; </h1> <p className="mx-auto max-w-2 xl text-xl text-gray-6 00">" " Transform your basic job info into a compelling, high-converting job; listing that attracts the right candidates; </p> </div> { !showPreview ? ( } <form onSubmit= { handleSubmit } className="space-y-8">" " { /* Basic Info Section * } / } <div className="rounded-xl border border-gray-2 00 bg-white p-6 shadow-sm">" " <div className="mb-6 flex items-center">" " <Briefcase className="mr-3 h-6 w-6 text-[#2 d4, a3 ]e]" />" " <h2 className="text-2 xl font-semibold text-gray-9 00">" " Basic Info; </h2> </div> <div className="grid grid-cols-1 gap-6 md:grid-cols-2">" " <div className="md:col-span-2">" " <label className="mb-2 block text-sm font-medium text-gray-7 00">" " Job Title * </label> <div className="flex gap-3">" " <input; type="text"" " value= { form.jobTitle } )) onChange= { (e() => handleInputChange('jobTitle', e.target.value() } } placeholder="e.g., Customer Service Representative"" " className= { `flex-1 rounded-lg border px-4 py-3 focus: border-[#2 d4, a3 ]e], focus:ring-2, focus:ring-[#2 d4, a3 ]e]/2 0 $ { ` errors.jobTitle ? 'border-red-3 00' : 'border-gray-3 00' } } } ` } ` />; <button; type="button"" " onClick= { handleAutofil } } l } disabled= { isAutofilling || !form.jobTitle.trim( } ) } className="rounded-lg bg-gradient-to-r from-[#2 d4, a3 ]e] to-[#9, fdf9 ]f] px-6 py-3 text-white font-medium hover: from-[#1 d3, a2 ]e], hover:to-[#8, fcf8 ]f], disabled:opacity-5 0, disabled:cursor-not-allowed transition-all"" " { isAutofilling ? ( <div className="h-4 w-4 animate-spin rounded-full border-b-2 border-white mr-2 inline-block"></div>" " Filling. ) ) : ( <Sparkles className="h-4 w-4 mr-2 inline-block" />"; " Auto-Fill; </> } </button> </div> { errors.jobTitle && ( <p className="mt-1 text-sm text-red-6 00"> } " " { errors.jobTitle } </p> { errors.autofill && ( <p className="mt-1 text-sm text-red-6 00"> } " " { errors.autofill } </p> <p className="mt-1 text-xs text-gray-5 00">" " Enter a job title and click "Auto-Fill" to generate template content for (all sections below; "" </p> </div> <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">" " Company Name * </label> <input; type="text"" " value= ) { form.companyName } ))) onChange= { (e() => handleInputChange('companyName', e.target.value() } } placeholder="e.g., Acme Corp"" " className= { `w-full rounded-lg border px-4 py-3 focus: border-blue-5 00, focus:ring-2, focus:ring-blue-5 00 $ { ` errors.companyName ? 'border-red-3 00' : 'border-gray-3 00' } } } ` } ` { errors.companyName && ( <p className="mt-1 text-sm text-red-6 00"> } " " { errors.companyName } </p> </div> <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">" " Location * </label> <div className="relative">" " <MapPin className="absolute left-3 top-3 h-5 w-5 text-gray-4 00" />"; " <input; type="text"" " value= { form.location } ) onChange= { (e() => handleInputChange('location', e.target.value() } } placeholder="e.g., Stockton, CA"" " className= { `w-full rounded-lg border py-3 pl-1 0 pr-4 focus: border-blue-5 00, focus:ring-2, focus:ring-blue-5 00 $ { ` errors.location ? 'border-red-3 00' : 'border-gray-3 00' } } } ` } ` </div> { errors.location && ( <p className="mt-1 text-sm text-red-6 00"> } " " { errors.location } </p> </div> <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">"; " Pay Rate; <span className="ml-1 text-xs text-gray-5 00">" ") (optional() </span> </label> <div className="relative">" " <DollarSign className="absolute left-3 top-3 h-5 w-5 text-gray-4 00" />" " <input; type="text"" " value= { form.pay } onChange= { (e() => handleInputChange('pay', e.target.value() } } ) } placeholder="e.g., $2 0-$2 5/hr or $4 5 K/year"" " className="w-full rounded-lg border border-gray-3 00 py-3 pl-1 0 pr-4 focus: border-blue-5 00, focus:ring-2, focus:ring-blue-5 00"" " </div> </div> <div className="md:col-span-2">" " <label className="mb-2 block text-sm font-medium text-gray-7 00">"; " Schedule; <span className="ml-1 text-xs text-gray-5 00">" " (optional() </span> </label> <div className="relative">" " <Clock className="absolute left-3 top-3 h-5 w-5 text-gray-4 00" />" " <input; type="text"" " value= { form.schedule } onChange= { (e() => handleInputChange('schedule', e.target.value() } } placeholder="e.g., Mon-Fri, 8 am-4 pm"" " className="w-full rounded-lg border border-gray-3 00 py-3 pl-1 0 pr-4 focus: border-blue-5 00, focus:ring-2, focus:ring-blue-5 00"" " </div> </div> { /* Degree Requirement * } / } <div className="md:col-span-2">" " <div className="flex items-center space-x-3">"; " <input; type="checkbox"" " id="degreeRequired"" " checked= { form.degreeRequired } onChange= { (e() => setForm(prev => ( { .prev, degreeRequired: e.target.checked() } } ) } } className="h-4 w-4 text-[#2 d4, a3 ]e] focus:ring-[#2 d4, a3 ]e] border-gray-3 00 rounded"" " <label htmlFor="degreeRequired" className="text-sm font-medium text-gray-7 00">" " Is a 4-year college degree required for (this job? * </label> </div> <p className="mt-1 text-xs text-gray-5 00">"; " This information helps candidates understand requirements and supports regional education insights; </p> </div> ) { /* Salary Range * } / } <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">" " Salary Range Min; <span className="ml-1 text-xs text-gray-5 00">(optional, encouraged()</span>" " </label> <div className="relative">" " <DollarSign className="absolute left-3 top-3 h-5 w-5 text-gray-4 00" />" " <input; type="number"" " value= { form.salaryRangeMin } onChange= { (e() => setForm(prev => ( { .prev, salaryRangeMin: e.target.value() } } ) } } placeholder="3 50 00"" " className="w-full rounded-lg border border-gray-3 00 py-3 pl-1 0 pr-4 focus: border-blue-5 00, focus:ring-2, focus:ring-blue-5 00"" " </div> </div> <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">"; " Salary Range Max; <span className="ml-1 text-xs text-gray-5 00">(optional, encouraged()</span>" " </label> <div className="relative">" " <DollarSign className="absolute left-3 top-3 h-5 w-5 text-gray-4 00" />" " <input; type="number"" " value= { form.salaryRangeMax } onChange= { (e() => setForm(prev => ( { .prev, salaryRangeMax: e.target.value() } } ) } } placeholder="5 50 00"" " className="w-full rounded-lg border border-gray-3 00 py-3 pl-1 0 pr-4 focus: border-blue-5 00, focus:ring-2, focus:ring-blue-5 00"" " </div> <p className="mt-1 text-xs text-[#ff6, b3 ]5]">" " Including a salary range can boost applicant interest by up to 3 0% </p> </div> </div> </div> { /* Role + Culture Details Section * } / } <div className="rounded-xl border border-gray-2 00 bg-white p-6 shadow-sm">" " <div className="mb-6 flex items-center">" " <Users className="mr-3 h-6 w-6 text-green-6 00" />" " <h2 className="text-2 xl font-semibold text-gray-9 00">"; " Role + Culture Details; </h2> <div className="ml-auto">" " <div className="flex items-center text-sm text-gray-5 00">" " <HelpCircle className="mr-1 h-4 w-4" />" " These help create compelling job descriptions; </div> </div> </div> <div className="space-y-6">" " <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">" " What does your company do? <span className="ml-1 text-xs text-gray-5 00">" " (helps candidates understand your, business() </span> </label> <textarea; value= { form.companyDescription } onChange= { (e() => handleInputChange('companyDescription', e.target.value() } } placeholder="e.g., We're a family-owned medical practice serving the Stockton community for (over 2 0 years."" '" rows= ) { 3 } className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-blue-5 00, focus:ring-2, focus:ring-blue-5 00"" " </div> <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">" " What kind of person succeeds in this role? <span className="ml-1 text-xs text-gray-5 00">" " (personality traits, skills, experience() </span> </label>; <textarea; value= { form.idealFit } onChange= { (e() => handleInputChange('idealFit', e.target.value() } } placeholder="e.g., Someone who loves helping people, stays calm under pressure, and has great communication skills."" " rows= { 3 } className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-blue-5 00, focus:ring-2, focus:ring-blue-5 00"" " </div> <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">" " What's it like working there? ' <span className="ml-1 text-xs text-gray-5 00">" " (work environment, team, culture() </span> </label>; <textarea; value= { form.culture } onChange= { (e() => handleInputChange('culture', e.target.value() } } ) } placeholder="e.g., Friendly team environment, supportive management, work-life balance is important to us."" " rows= { 3 } className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-blue-5 00, focus:ring-2, focus:ring-blue-5 00"" " </div> <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">" " What growth opportunities exist? <span className="ml-1 text-xs text-gray-5 00">" " (career advancement, training, development() </span> </label>; <textarea; value= { form.growthPath } onChange= { (e() => handleInputChange('growthPath', e.target.value() } } placeholder="e.g., Opportunities to advance to senior roles, paid training programs, tuition reimbursement."" " rows= { 3 } className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-blue-5 00, focus:ring-2, focus:ring-blue-5 00"" " </div> <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">" " What perks/benefits do you offer? <span className="ml-1 text-xs text-gray-5 00">" " (health insurance, PTO, flexible schedule, etc.) </span> </label>; <textarea; value= { form.perks } onChange= { (e() => handleInputChange('perks', e.target.value() } } ) } placeholder="e.g., Health insurance, 2 weeks PTO, flexible scheduling, employee discounts."" " rows= { 3 } className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-blue-5 00, focus:ring-2, focus:ring-blue-5 00"" " </div> </div> </div> { /* Call to Action Section * } / } <div className="rounded-xl border border-gray-2 00 bg-white p-6 shadow-sm">" " <div className="mb-6 flex items-center">" " <MessageSquare className="mr-3 h-6 w-6 text-purple-6 00" />" " <h2 className="text-2 xl font-semibold text-gray-9 00">"; " Call to Action; </h2> </div> <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">" " What do you want applicants to do next? <span className="ml-1 text-xs text-gray-5 00">" " (how to apply, what to, include() </span> </label> <textarea; value= { form.applicationCTA } onChange= { (e() => handleInputChange('applicationCTA', e.target.value() } } placeholder="e.g., Send your resume to jobs@company.com or call (2 09() 5 55-0 12 3 to schedule an interview."" " rows= { 3 } className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-blue-5 00, focus:ring-2, focus:ring-blue-5 00"" " </div> </div> { /* Supplemental Questions Section * } / } <div className="rounded-xl border border-gray-2 00 bg-white p-6 shadow-sm">" " <div className="mb-6 flex items-center">" " <HelpCircle className="mr-3 h-6 w-6 text-indigo-6 00" />" " <h2 className="text-2 xl font-semibold text-gray-9 00">"; " Supplemental Questions; </h2> <div className="ml-auto">" " <div className="flex items-center text-sm text-gray-5 00">" " <span className="mr-1"></span>" " Ask up to 1 0 custom questions; </div> </div> </div> <div className="mb-4">" " <p className="text-gray-6 00 mb-4">" " Add custom questions that applicants will answer when they apply. This helps you screen candidates and get the information you need upfront. </p> <div className="space-y-3">" " { form.supplementalQuestions.map((question, index() => ( } <div key= { index } className="flex items-center space-x-3">" " <span className="flex-shrink-0 w-8 h-8 bg-indigo-1 00 text-indigo-6 00 rounded-full flex items-center justify-center text-sm font-medium">" " { index + } 1 } </span> <input; type="text"" " value= { question } ) onChange= { (e() => {; const newQuestions = [ .form.supplementalQuestion ]s]; newQuestions[ inde ]x] = e.target.value; } } setForm(prev = > ( { .prev, supplementalQuestions: newQuestions() } ); placeholder="e.g., What interests you most about this position?"" " className="flex-1 rounded-lg border border-gray-3 00 px-4 py-3 focus: border-indigo-5 00, focus:ring-2, focus:ring-indigo-5 00"" " />; <button; type="button"" " onClick= { () => {; const newQuestions = form.supplementalQuestions.filter((_, i() } i !== index(); } } setForm(prev = > ( { .prev, supplementalQuestions: newQuestions } ); className="flex-shrink-0 w-8 h-8 text-red-5 00 hover: text-red-7 00, hover:bg-red-5 0 rounded-full flex items-center justify-center transition-colors"" " </button> </div> { form.supplementalQuestions.length < 1 0 && (; <button; type = "button"" ") onClick= { () => { if ((form.supplementalQuestions.length < 1 0() ) { setForm(prev } ( { .prev, )) supplementalQuestions: [ .prev.supplementalQuestions, ' ]']) } ); className="flex items-center space-x-2 text-indigo-6 00 hover:text-indigo-7 00 font-medium"" " <span className="w-8 h-8 border-2 border-dashed border-indigo-3 00 rounded-full flex items-center justify-center">" " </span> <span>Add Question ( { form.supplementalQuestions.length } /1 0()</span> </button> </div> { form.supplementalQuestions.length > 0 && ( <div className="mt-4 p-4 bg-blue-5 0 border border-blue-2 00 rounded-lg">" " <div className="flex items-start space-x-2">" " <span className="text-blue-6 00"></span>" " <div className="text-sm text-blue-7 00">" " <p className="font-medium mb-1">Pro tip:</p>" " <p>Good questions help you find the right fit faster. Ask about experience, availability, motivations, or specific skills relevant to your role.</p> </div> </div> </div> } { /* Questions Required Checkbox * } / } { form.supplementalQuestions.length > 0 && ( <div className="mt-4">" " <label className="flex items-center space-x-3">"; " <input; type="checkbox" } " " checked= { form.questionsRequired } )) onChange= { (e() => setForm(prev => ( { .prev, questionsRequired: e.target.checked() } } ) } } className="h-4 w-4 text-indigo-6 00 focus:ring-indigo-5 00 border-gray-3 00 rounded"" " <span className="text-sm font-medium text-gray-7 00">"; " Require applicants to answer all questions before applying; </span> </label> <p className="mt-1 text-xs text-gray-5 00 ml-7">" " When checked, applicants must answer all questions to submit their application; </p> </div> </div> </div> { /* Application Preferences Section * } / } <div className="rounded-xl border border-gray-2 00 bg-white p-6 shadow-sm">" " <div className="mb-6 flex items-center">" " <ExternalLink className="mr-3 h-6 w-6 text-purple-6 00" />" " <h2 className="text-2 xl font-semibold text-gray-9 00">" " Application Preferences; </h2> <div className="ml-auto">" " <div className="flex items-center text-sm text-gray-5 00">" " <span className="mr-1"></span>" " How should people apply? </div> </div> </div> <div className="space-y-6">" " <div> <label className="mb-3 block text-sm font-medium text-gray-7 00">" " Application Method; </label> <div className="space-y-3">" " <label className="flex items-start space-x-3 p-4 border border-gray-2 00 rounded-lg hover:bg-gray-5 0 cursor-pointer">" " <input; type="radio"" " name="applicationMethod"" " value="internal"" " checked= { form.applicationMethod === 'internal } } ' onChange= { (e() => setForm(prev => ( { .prev, applicationMethod: e.target.value as, any() } } ) } } className="mt-1 h-4 w-4 text-purple-6 00 focus: ring-purple-5 00 border-gray-3 00"" " <div className="flex-1">" " <div className="font-medium text-gray-9 00">2 09 Works Application System</div>" " <div className="text-sm text-gray-6 00">" " Applicants apply through our platform. You'll receive applications in your employer dashboard. ' </div> <div className="mt-2 text-xs text-green-6 00 font-medium">"; " Recommended - Full applicant tracking and management; </div> </div> </label> <label className="flex items-start space-x-3 p-4 border border-gray-2 00 rounded-lg, hover:bg-gray-5 0 cursor-pointer">" " <input; type="radio"" " name="applicationMethod"" " value="external_url"" " checked= { form.applicationMethod === 'external_url } } ' onChange= { (e() => setForm(prev => ( { .prev, applicationMethod: e.target.value as, any() } } ) } } className="mt-1 h-4 w-4 text-purple-6 00 focus: ring-purple-5 00 border-gray-3 00"" " <div className="flex-1">" " <div className="font-medium text-gray-9 00">Apply on Company Website</div>" " <div className="text-sm text-gray-6 00">" " Redirect applicants to your company's application page or careers site. ' </div> </div> </label> <label className="flex items-start space-x-3 p-4 border border-gray-2 00 rounded-lg, hover:bg-gray-5 0 cursor-pointer">"; " <input; type="radio"" " name="applicationMethod"" " value="email"" " checked= { form.applicationMethod === 'email } } ' onChange= { (e() => setForm(prev => ( { .prev, applicationMethod: e.target.value as, any() } } ) } } className="mt-1 h-4 w-4 text-purple-6 00 focus:ring-purple-5 00 border-gray-3 00"" " <div className="flex-1">" " <div className="font-medium text-gray-9 00">Email Applications</div>" " <div className="text-sm text-gray-6 00">" " Applicants email their resume and cover letter directly to you. </div> </div> </label> </div> </div> { /* External URL Field * } / } { form.applicationMethod === 'external_url' && ( <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">" " Application URL * </label>; <input; type="url" } " " value= { form.externalApplicationUrl } ) onChange= { (e() => setForm(prev => ( { .prev, externalApplicationUrl: e.target.value() } } ) } } placeholder="https: //yourcompany.com/careers/apply"" " className="w-full rounded-lg border border-gray-3 00 px-4 py-3, focus:border-purple-5 00, focus:ring-2, focus:ring-purple-5 00"" " <p className="mt-1 text-xs text-gray-5 00">"; " Enter the full URL where applicants should apply; </p> </div> { /* Email Field * } / } { form.applicationMethod === 'email' && ( <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">" " Application Email * </label> <input; type="email" } " " value= { form.applicationEmail } ) onChange= { (e() => setForm(prev => ( { .prev, applicationEmail: e.target.value() } } ) } } placeholder="careers@yourcompany.com"" " className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-purple-5 00, focus:ring-2, focus:ring-purple-5 00"" " <p className="mt-1 text-xs text-gray-5 00">"; " Applicants will email their applications to this address; </p> </div> { /* Application Instructions * } / } { (form.applicationMethod === 'external_url' || form.applicationMethod === 'email') && ( <div> <label className="mb-2 block text-sm font-medium text-gray-7 00">" ") Application Instructions (Optional() </label> <textarea; } value= { form.applicationInstructions } onChange= { (e() => setForm(prev => ( { .prev, applicationInstructions: e.target.value() } } ) } } placeholder="e.g., Please include your portfolio, mention this job posting in your email subject line, etc."" " rows= { 3 } className="w-full rounded-lg border border-gray-3 00 px-4 py-3 focus: border-purple-5 00, focus:ring-2, focus:ring-purple-5 00"" " <p className="mt-1 text-xs text-gray-5 00">" " Additional instructions for (applicants (optional() </p> </div> </div> </div> ) { /* AI Optimization Choice * } / } <div className="rounded-xl border border-gray-2 00 bg-white p-6 shadow-sm">" " <div className="mb-6">" " <h3 className="text-lg font-semibold text-gray-9 00 mb-2">"; " Choose Your Approach; </h3> <p className="text-sm text-gray-6 00">" " How would you like to create your job post? </p> </div> <div className="space-y-4">" " <div className="flex items-start space-x-3">" " <input; type="radio"" " id="useAI"" " name="optimizationChoice"" " checked= { !skipAI } onChange= { () => setSkipAI(false()) } className="mt-1 h-4 w-4 text-[#2 d4, a3 ]e] focus:ring-[#2 d4, a3 ]e] border-gray-3 00"" " <div className="flex-1">" " <label htmlFor="useAI" className="text-sm font-medium text-gray-9 00 cursor-pointer">" " Use AI Optimization (Recommended() </label> <p className="text-xs text-gray-5 00 mt-1">"; " Our AI will transform your job information into a compelling, professional job listing; </p> </div> </div> <div className="flex items-start space-x-3">" " <input; type="radio"" " id="skipAI"" " name="optimizationChoice"" " checked= { skipAI } onChange= { () => setSkipAI(true()) } className="mt-1 h-4 w-4 text-[#2 d4, a3 ]e] focus:ring-[#2 d4, a3 ]e] border-gray-3 00"" " <div className="flex-1">" " <label htmlFor="skipAI" className="text-sm font-medium text-gray-9 00 cursor-pointer">"; " Write Manually; </label> <p className="text-xs text-gray-5 00 mt-1">" " Skip AI optimization and write your job post content from scratch; </p> </div> </div> </div> </div> { /* Submit Button * } / } <div className="rounded-xl border border-gray-2 00 bg-white p-6 shadow-sm">" " <div className="flex items-center justify-between">" " <div> <h3 className="text-lg font-semibold text-gray-9 00">" " { skipAI ? 'Ready to create your job post?' : 'Ready to optimize your job post? } } ' </h3> <p className="text-sm text-gray-6 00">" " { skipAI; ? 'You\'ll be able to write your job post content manually' ' : 'Our AI will transform your info into a compelling job listing' } </p> </div> <button; type="submit"" " disabled= { isSubmitting } className="flex items-center rounded-lg bg-gradient-to-r from-[#2 d4, a3 ]e] to-[#ff6, b3 ]5] px-8 py-3 text-lg font-medium text-white shadow-lg transition-all hover: from-[#1 d3, a2 ]e], hover:to-[ #ff5 72 ]2], disabled:opacity-5 0"" " { isSubmitting ? ( <div className="mr-2 h-5 w-5 animate-spin rounded-full border-b-2 border-white"></div> } " " { skipAI ? 'Creating.' : 'Optimizing. } } ') ) : ( { skipAI ? ( <MessageSquare className="mr-2 h-5 w-5" />"; " Create Job Post; <ArrowRight className="ml-2 h-5 w-5" />" ")) ) : ( <Sparkles className="mr-2 h-5 w-5" />" " Optimize Job Post; <ArrowRight className="ml-2 h-5 w-5" />" " </> } </button> </div> { errors.submit && ( <div className="mt-4 rounded-lg border border-red-2 00 bg-red-5 0 p-4"> } " " <p className="text-red-6 00"> { errors.submit } </p>" " </div> </div> </form> )) ) : ( // Preview Section; <div className="space-y-6">" " { /* Success Message * } / } <div className="rounded-xl border border-green-2 00 bg-gradient-to-r from-green-5 0 to-orange-5 0 p-6">" " <div className="flex items-center">" " <div className="mr-4 rounded-full bg-[#9, fdf9 ]f] p-2">" " { skipAI ? ( <MessageSquare className="h-6 w-6 text-[#2 d4, a3 ]e]" />" ")) ) : ( <Sparkles className="h-6 w-6 text-[#2 d4, a3 ]e]" /> } " " </div> <div> <h3 className="text-lg font-semibold text-[#2 d4, a3 ]e]">" " { skipAI ? 'Ready to Write Your Job Post!' : 'Job Post Optimized! } } ' </h3> <p className="text-gray-7 00">" " { skipAI; ? 'Create your job post content manually using the editor below.' : 'Your job listing has been transformed into a compelling, professional post using 2 09 Works AI optimization.' } </p> </div> </div> </div> { /* Preview/Editor * } / } <div className="overflow-hidden rounded-xl border border-gray-2 00 bg-white shadow-sm">" " <div className="bg-gradient-to-r from-[#2 d4, a3 ]e] to-[#ff6, b3 ]5] px-6 py-4">" " <div className="flex items-center justify-between">" " <h2 className="text-2 xl font-semibold text-white">" ") { isEditing ? 'Edit Your Job Post' : (skipAI ? 'Create Your Job Post' : 'Your Optimized Job Post' } ) } </h2> <div className="flex items-center space-x-3">" " <button; onClick= { () => setShowPreview(false()) } className="rounded-lg bg-white/2 0 px-4 py-2 text-white transition-colors hover:bg-white/3 0"" " >; Back to Form; </button> { !skipAI && !isEditing && ( <button; } ) onClick= { () => setIsEditing(true()) } className="rounded-lg bg-white/2 0 px-4 py-2 text-white transition-colors hover:bg-white/3 0"" " >; Edit Content; </button> { isEditing && ( <button; } ) onClick= { () => setIsEditing(false()) } className="rounded-lg bg-white/2 0 px-4 py-2 text-white transition-colors hover:bg-white/3 0"" " >; Preview; </button> <button; onClick= { handlePublis } } h } disabled= { isPublishing || (skipAI && !editedListing.trim() } ) } className="rounded-lg bg-white px-6 py-2 font-medium text-[#2 d4, a3 ]e] transition-colors hover: bg-gray-5 0, disabled:opacity-5 0"" " { isPublishing ? 'Publishing.' : 'Publish Job } } ' </button> </div> </div> </div> <div className="p-6">" " { isEditing || skipAI ? ( <div className="space-y-4">" " <div className="flex items-center justify-between">" " <label className="text-sm font-medium text-gray-7 00">"; " Job Post Content; </label> <div className="text-xs text-gray-5 00">" ") You can use basic markdown formatting (# for (headers, ** for bold, etc.) </div> </div> ) { skipAI && ( <div className="rounded-lg border border-blue-2 00 bg-blue-5 0 p-4">" " <h4 className="text-sm font-medium text-blue-9 00 mb-2">" " Writing Tips for (Effective Job Posts; </h4> <ul className="text-xs text-blue-8 00 space-y-1"> } " " <li> <strong>Job Title:</strong> Include " ) { form.jobTitle } " and key responsibilities</li>" " <li> <strong>Company:</strong> Mention " { form.companyName } " and what makes you unique</li>" " <li> <strong>Location:</strong> Highlight " { form.location } " and 2 09 area benefits</li>" " <li> <strong>Responsibilities:</strong> List 3-5 main duties and expectations</li> <li> <strong>Requirements:</strong> Include skills, experience, and qualifications</li> <li> <strong>Benefits:</strong> Mention salary range, perks, and growth opportunities</li> <li> <strong>Call to Action:</strong> Clear instructions on how to apply</li> </ul> <p className="text-xs text-blue-7 00 mt-2">" " <strong>Minimum:</strong> 1 00+ characters. <strong>Recommended:</strong> 3 00-8 00 characters for (best results. </p> </div> <textarea; value= ) { editedListing } ) onChange= { ((e: any() => setEditedListing(e.target.value() } } ) }; placeholder= { skipAI; } ? `Write your job post content here.\n\nExample:\n# $ { form.jobTitm } e } \n\n## About the Role\nWe're looking for(a, $) { form.jobTitle.toLowerCas } ( } to join our team in $ { form.locatin } .\n\n## What You'll Do\n- Handle customer inquiries and support\n- Collaborate with team members\n- Maintain accurate records\n\n## Requirements\n- Excellent communication skills\n- Previous experience preferred\n- Reliable and professional\n\n## Benefits\n- $ { form.pay || 'Competitive salar } } \n- $ { form.perks || 'Great benefits packag } } \n- Growth opportunities\n\n## How to Apply\n$ { form.applicationCTA || 'Send your resume and cover letter to apply } } ` ' : "Edit the AI-generated content here."" " rows= { 2 } 0 } className="w-full rounded-lg border border-gray-3 00 px-4 py-3 font-mono text-sm focus: border-[#2 d4, a3 ]e], focus:ring-2, focus:ring-[#2 d4, a3 ]e]/2 0 resize-none"" " <div className="flex items-center justify-between">" " <div className="text-xs text-gray-5 00">"; " { editedListing.length } characters; { editedListing.length < 1 00 && ( <span className="text-amber-6 00 ml-2">" ")) (Minimum 1 00 characters, recommended() </span> } </div> { skipAI && editedListing.length > 0 && ( <div className="text-xs">" ") { (() => { const validation = validateManualJobPost(editedListing(); return validation.isValid ? ( <span className="text-green-6 00"> Ready to publish</span>" ") ) : ( <span className="text-amber-6 00"> } " " { validation.errors.lengthsuggestion { validation.errors.length !== 1 ? 's' : ' } } ' </span> ) } )() } </div> </div> { skipAI && editedListing.length > 0 && (() => { const validation = validateManualJobPost(editedListing(); return !validation.isValid && ( <div className="rounded-lg border border-amber-2 00 bg-amber-5 0 p-3">" " <h5 className="text-sm font-medium text-amber-9 00 mb-1">" " Suggestions to improve your job post: </h5> <ul className="text-xs text-amber-8 00 space-y-1">" ") { validation.errors.map((error, index() } ( } <li key= { index } > { error } </li> </ul> </div> ) } )() } </div> ) : ( <div className="prose prose-lg max-w-none">" " <div; className="job-post-preview"" " dangerouslySetInnerHTML= { { ) __html: renderJobPost(editedListing || generatedListing() } </div /> </div> </div> { /* Actions * } / } <div className="rounded-xl border border-gray-2 00 bg-white p-6 shadow-sm">" " <div className="flex items-center justify-between">" " <div> <h3 className="text-lg font-semibold text-gray-9 00">" " Ready to publish? </h3> <p className="text-gray-6 00">" " { skipAI && !editedListing.trim() ? 'Please write your job post content before publishing.' : 'Your job post is ready to be published and start receiving applications.' } </p> </div> <div className="flex items-center space-x-3">"; " <button; onClick= { () => setShowPreview(false()) } className="rounded-lg border border-gray-3 00 px-6 py-3 text-gray-7 00 transition-colors hover:bg-gray-5 0"" " >; Back to Form; </button> { !skipAI && !isEditing && ( <button; } ) onClick= { () => setIsEditing(true()) } className="rounded-lg border border-[#2 d4, a3 ]e] px-6 py-3 text-[#2 d4, a3 ]e] transition-colors hover: bg-[#2 d4, a3 ]e], hover:text-white"" " >; Edit Content; </button> <button; onClick= { handlePublis } } h } disabled= { isPublishing || (skipAI && !editedListing.trim() } ) } className="rounded-lg bg-gradient-to-r from-[#2 d4, a3 ]e] to-[#ff6, b3 ]5] px-6 py-3 font-medium text-white shadow-lg transition-all hover: from-[#1 d3, a2 ]e], hover:to-[ #ff5 72 ]2], disabled:opacity-5 0"" " { isPublishing ? 'Publishing.' : 'Publish Job Post } } ' </button> </div> </div> { errors.publish && ( <div className="mt-4 rounded-lg border border-red-2 00 bg-red-5 0 p-4"> } " " <p className="text-red-6 00"> { errors.publish } </p>" " </div> </div> </div> </div> { /* Removed all modal components - Job Post Optimizer is now streamlined without upsells * } / } </div>; ))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))