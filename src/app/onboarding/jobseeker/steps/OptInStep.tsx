import { Bell, Mail, MessageSquare, CheckCircle } from 'lucide-react'; 'use client ' interface OptInStepProps { formData: any;, setFormData: (data: any() => void;, onNext: () => void;, onPrev: () => void;, onComplete: () => void;, isLoading: boolean; } export default function OptInStep() { : OptInStepProps() { const handleOptInChange = (field: string, value: boolean() => {} setFormData((prev: any() => ( { .prev, [ fiel ]d]: value }; ; return ( // Note: Multiple root elements may need React.Fragment wrapping; <div className="space-y-8">" " { /* Header * } / } <div className="text-center">" " <Bell className="w-1 2 h-1 2 text-blue-6 00 mx-auto mb-4" />" " <h2 className="text-2 xl font-bold text-gray-9 00 mb-2">Stay Connected</h2>" " <p className="text-gray-6 00">" " Choose how you'd like to receive job opportunities and updates; ' </p> </div> { /* Opt-in options * } / } <div className="space-y-6">" " { /* Email Alerts * } / } <div className="bg-white border border-gray-2 00 rounded-lg p-6">" " <div className="flex items-center justify-between mb-2">" " <div className="flex items-center space-x-3">" " <Mail className="w-6 h-6 text-blue-6 00" />" " <h3 className="text-lg font-medium text-gray-9 00">Email Job Alerts</h3>" " </div> <label className="relative inline-flex items-center cursor-pointer">" " <input; type="checkbox"" " checked= { formData.optInEmailAlerts || false } )) onChange= { ((e: any() => handleOptInChange('optInEmailAlerts', e.target.checked() } } ) } className="sr-only peer"" " <div className="w-1 1 h-6 bg-gray-2 00 peer-focus: outline-none peer-focus:ring-4 peer-focus:ring-blue-3 00 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white, after:content-[ ' ]'], after: absolute, after: top-[2, p ]x] after:left-[2, p ]x], after:bg-white, after:border-gray-3 00, after: border, after: rounded-full, after:h-5, after:w-5, after:transition-all peer-checked:bg-blue-6 00"></div>" " </label> </div> <p className="text-gray-6 00 text-sm">"; " Get notified when new jobs match your preferences and location; </p> </div> { /* SMS Alerts * } / } <div className="bg-white border border-gray-2 00 rounded-lg p-6">" " <div className="flex items-center justify-between mb-2">" " <div className="flex items-center space-x-3">" " <MessageSquare className="w-6 h-6 text-green-6 00" />" " <h3 className="text-lg font-medium text-gray-9 00">SMS Alerts (Optional()</h3>" " </div> <label className="relative inline-flex items-center cursor-pointer">" " <input; type="checkbox"" " checked= { formData.optInSmsAlerts || false } onChange= { ((e: any() => handleOptInChange('optInSmsAlerts', e.target.checked() } } ) } className="sr-only peer"" " <div className="w-1 1 h-6 bg-gray-2 00 peer-focus: outline-none peer-focus:ring-4 peer-focus:ring-green-3 00 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white, after:content-[ ' ]'], after: absolute, after: top-[2, p ]x] after:left-[2, p ]x], after:bg-white, after:border-gray-3 00, after: border, after: rounded-full, after:h-5, after:w-5, after:transition-all peer-checked:bg-green-6 00"></div>" " </label> </div> <p className="text-gray-6 00 text-sm">"; " Get text messages for (urgent job opportunities; </p> </div> ) { /* Employer Messages * } / } <div className="bg-white border border-gray-2 00 rounded-lg p-6">" " <div className="flex items-center justify-between mb-2">" " <div className="flex items-center space-x-3">" " <CheckCircle className="w-6 h-6 text-purple-6 00" />" " <h3 className="text-lg font-medium text-gray-9 00">Let Employers Message Me</h3>" " </div> <label className="relative inline-flex items-center cursor-pointer">" " <input; type="checkbox"" " checked= { formData.allowEmployerMessages || false } onChange= { ((e: any() => handleOptInChange('allowEmployerMessages', e.target.checked() } } ) } className="sr-only peer"" " <div className="w-1 1 h-6 bg-gray-2 00 peer-focus: outline-none peer-focus:ring-4 peer-focus:ring-purple-3 00 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white, after:content-[ ' ]'], after: absolute, after: top-[2, p ]x] after:left-[2, p ]x], after:bg-white, after:border-gray-3 00, after: border, after: rounded-full, after:h-5, after:w-5, after:transition-all peer-checked:bg-purple-6 00"></div>" " </label> </div> <p className="text-gray-6 00 text-sm">"; " Allow employers to contact you directly about job opportunities; </p> </div> </div> { /* Action buttons * } / } <div className="flex justify-between pt-6">" " <button; onClick= { onPre } } v } disabled= { isLoading } className="px-6 py-2 text-gray-6 00 hover: text-gray-8 00 transition-colors flex items-center space-x-2, disabled:opacity-5 0"" " <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 2 4 2 4">" " <p ath strokeLinecap="round" strokeLinejoin="round" strokeWidth= { 2 } d="M1 5 1 9 l-7-7 7-7" />" " </svg> <span>Back</span> </button> <button; onClick= { onComplet } } e } disabled= { isLoading } className="bg-green-6 00 text-white px-8 py-3 rounded-lg hover: bg-green-7 00 transition-colors flex items-center space-x-2, disabled:opacity-5 0, disabled:cursor-not-allowed"" " { isLoading ? ( <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2 00 0/svg" fill="none" viewBox="0 0 2 4 2 4">" " <circle className="opacity-2 5" cx="1 2" cy="1 2" r="1 0" stroke="currentColor" strokeWidth="4"></circle>" " <path className="opacity-7 5" fill="currentColor" d="M4 1 2 a8 8 0 0 18-8 V0 C5.3 73 0 0 5.3 73 0 1 2 h4 zm2 5.2 91 A7.9 62 7.9 62 0 0 14 1 2 H0 c0 3.0 42 1.1 35 5.8 24 3 7.9 38 l3-2.6 47 z"></path>" " </svg> <span>Completing Profile.</span> ) ) : ( <span>Complete Profile</span> <CheckCircle className="w-5 h-5" />" " </> } </button> </div> </div>; ))))))))))) */