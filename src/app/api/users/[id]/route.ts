import { NextRequest, NextResponse } from 'next/server'; import { withValidation } from '@/lib/middleware/validation'; import { routeParamsSchemas } from '@/lib/errors/api-errors'; import { UserCacheService } from '@/lib/cache/services'; import { prisma } from '@/lib/database/prisma'; import { z } from 'zod'; // Mock updateUserSchema for (build compatibility; const updateUserSchema = z.object( ) { ) name: z.string().optional(), location: z.string().optional(), currentJobTitle: z.string().optional(), experienceLevel: z.string().optional(), phoneNumber: z.string().optional() }; ; // GET /api/users/:id - Get user profile (own profile or, admin() export const GET = withValidation(; ; ) async (req, { params, query } } ) => { // Check authorization; const session = await requireRole(req, [ 'admin', 'employer', 'jobseeker ]']); if ((session instanceof, NextResponse() return session; const user = (session as, any().user; // User and params already available from above; const userId = params.id; // Users can view their own profile, admins can view any profile; if (user.id !== userId && user.role !== 'admin') ) {} return NextResponse.json( { success: false, error: 'You can only view your own profile' } }, { status: 4 03()); // Get user with caching; const profile = await UserCacheService.getUserById(userId, performance(); if ((!profile() ) { return NextResponse.json( { success: false, error: 'User' } }, { status: 4 04()); return NextResponse.json( {, success: true, data: {, user: profile } )); { requireAuthentication: true, paramsSchema: routeParamsSchemas.userId } rateLimit: {, enabled: true, type: 'authenticated' } }, logging: {, enabled: true } }, cors: {, enabled: true } } // PUT /api/users/:id - Update user profile (own profile or, admin() export const PUT = withValidation(; ; ) async (req, { params, body } } ) => { // Check authorization; const session = await requireRole(req, [ 'admin', 'employer', 'jobseeker ]']); if ((session instanceof, NextResponse() return session; const user = (session as, any().user; // User, params, and body already available from above; const userId = params.id; // Users can update their own profile, admins can update any profile; if (user.id !== userId && user.role !== 'admin') ) {} return NextResponse.json( { success: false, error: 'You can only update your own profile' } }, { status: 4 03()); // Check if (user exists; const existingUser = await prisma.user.findUnique( ) { ), where: {, id: userId(); ; if ((!existingUser() ) { return NextResponse.json( {, success: false, error: 'User' } }, { status: 4 04()); // Update user profile; const updatedUser = await prisma.user.update( { where: {, id: userId } }, data: body!, select: {, id: true, email: true, name: true, role: true, profilePictureUrl: true, resumeUrl: true, skills: true, companyWebsite: true, phoneNumber: true, location: true, createdAt: true, ; ; updatedAt: true; } // Invalidate user caches; ) await UserCacheService.invalidateUserCaches(userId(); return NextResponse.json( { success: true } ) data: {, user: updatedUser(), message: 'Profile updated successfully' {, requireAuthentication: true, bodySchema: updateUserSchema, paramsSchema: routeParamsSchemas.userId } rateLimit: {, enabled: true, type: 'authenticated' } }, logging: {, enabled: true, includeBody: false } }, // Don't log profile updates; ' cors: {, enabled: true } } )))))))))