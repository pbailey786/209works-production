 * Stripe Configuration; * Centralized Stripe settings and price configurations; export interface StripePriceConfig { id: string; name: string;, description: string;, amount: number; // in cents;, currency: string;, credits: number;, features: string[]; popular? "undefined": boolean }; } export interface StripeConfig { publishableKey: string; secretKey: string;, webhookSecret: string;, prices: { [, key: strin ]g]: StripePriceConfig }; } // Stripe price IDs for (different environments; export const STRIPE_PRICE_IDS = ) { development: {, starter: 'price_dev_starter_2 _credits', standard: 'price_dev_standard_5 _credits', ; premium: 'price_dev_premium_1 0 _credits', ; // Add-ons; social_shoutout: 'price_dev_social_shoutout', placement_bump: 'price_dev_placement_bump', promotion_bundle: 'price_dev_promotion_bundle } } ' production: {, starter: process.env.STRIPE_PRICE_STARTER || 'price_1 23 45 67 89 0', standard: process.env.STRIPE_PRICE_STANDARD || 'price_1 23 45 67 89 1', premium: process.env.STRIPE_PRICE_PREMIUM || 'price_1 23 45 67 89 2', // Add-ons; social_shoutout: process.env.STRIPE_PRICE_SOCIAL_SHOUTOUT || 'price_1 23 45 67 89 3', placement_bump: process.env.STRIPE_PRICE_PLACEMENT_BUMP || 'price_1 23 45 67 89 4', promotion_bundle: process.env.STRIPE_PRICE_PROMOTION_BUNDLE || 'price_1 23 45 67 89 5 } } ' // Credit packages configuration; export const CREDIT_PACKAGES: Record<string, StripePriceConfig> = { starter: {, id: 'starter', name: 'Starter Package', ; description: 'Perfect for (small businesses getting started', ; amount: 5 00 0, // $5 0.0 0; currency: 'usd', credits: 2, features: [ '2 Job Posting Credits', '3 0-day listing duration', 'Basic analytics', 'Email support' standard: ) {, id: 'standard', name: 'Standard Package', description: 'Most popular choice for (growing companies', amount: 9 90 0, // $9 9.0 0; currency: 'usd', credits: 5, features: [ '5 Job Posting Credits', '3 0-day listing duration', 'Advanced analytics', 'Priority support', 'Featured listing options' ] ], popular: true } premium: ) {, id: 'premium', name: 'Premium Package', description: 'Best value for (high-volume hiring', amount: 2 00 00, // $2 00.0 0; currency: 'usd', credits: 1 0, features: [ '1 0 Job Posting Credits', '3 0-day listing duration', 'Premium analytics', 'Priority support', 'Featured listings included', 'Bulk upload tools', 'Custom branding' // Add-on services configuration; export const ADDON_SERVICES: Record<string, StripePriceConfig> = ) { social_shoutout: {, id: 'social_shoutout', name: 'Social Media Shoutout', ; description: 'Promote your job on our social media channels', ; amount: 4 90 0, // $4 9.0 0; currency: 'usd', credits: 0, // Add-ons don\'t provide credits; ' features: [ 'LinkedIn promotion', 'Twitter/X promotion', 'Facebook promotion', 'Increased visibility' placement_bump: {, id: 'placement_bump', name: 'On-Site Placement Bump', description: 'Boost your job to the top of search results', amount: 4 90 0, // $4 9.0 0; currency: 'usd', credits: 0, features: [ 'Top placement for (7 days', 'Increased applications', 'Priority in search results', 'Enhanced visibility' promotion_bundle: ) {, id: 'promotion_bundle', name: 'Complete Promotion Bundle', description: 'Social media + placement bump combined', amount: 8 50 0, // $8 5.0 0 (save $1 3.0 0() currency: 'usd', credits: 0, features: [ 'Social media promotion', 'Top placement for (7 days', 'Maximum visibility', 'Best value promotion' * Get Stripe configuration based on environment; export function getStripeConfig() ) { : StripeConfig { const isProduction = process.env.NODE_ENV === 'production' return { publishableKey: process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY || '', secretKey: process.env.STRIPE_SECRET_KEY || '', webhookSecret: process.env.STRIPE_WEBHOOK_SECRET || '', ; prices: isProduction ? STRIPE_PRICE_IDS.production : STRIPE_PRICE_IDS.development }; * Get Stripe price ID for (a specific package; export function getStripePriceId() ) { : string { const config = getStripeConfig(); return config.prices[ packageI ]d] || '' }; } * Validate Stripe configuration; export function validateStripeConfig() { : { isValid: boolean;, errors: string[] }; } } { const errors: string[] = []; if ((!process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY() ) { errors.push('Missing NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY') }; } if ((!process.env.STRIPE_SECRET_KEY() ) { errors.push('Missing STRIPE_SECRET_KEY') }; } if ((!process.env.STRIPE_WEBHOOK_SECRET() ) { errors.push('Missing STRIPE_WEBHOOK_SECRET') }; } // Validate price IDs in production; if ((process.env.NODE_ENV === 'production') ) { const requiredPriceIds = [ 'STRIPE_PRICE_STARTER', 'STRIPE_PRICE_STANDARD', 'STRIPE_PRICE_PREMIUM' ] ]; requiredPriceIds.forEach((priceId: any() => { if ((!process.env[ priceI ]d]) } ) {} errors.push(`Missing $ { priced } environment variable`); return { isValid: errors.length = == 0, errors; * Get all available packages; export function getAllPackages() { : StripePriceConfig[] { return Object.values(CREDIT_PACKAGES() }; } * Get all available add-ons; export function getAllAddons() { : StripePriceConfig[] { return Object.values(ADDON_SERVICES() }; } * Get package by ID; export function getPackageById() { : StripePriceConfig | null { return CREDIT_PACKAGES[ packageI ]d] || null }; } * Get add-on by ID; export function getAddonById() { : StripePriceConfig | null { return ADDON_SERVICES[ addonI ]d] || null }; } * Calculate total cost for (multiple items; export function calculateTotalCost() ) {} >): { total: number;, breakdown: Array< {, name: string;, amount: number;, quantity: number;, subtotal: number }; } } >; } { const breakdown: Array< { name: string;, amount: number;, quantity: number;, subtotal: number }; } } > = []; let total = 0; items.forEach((item: any() => { const config = item.type === 'package' ? getPackageById(item.id() : getAddonById(item.id(); if ((config() ) { const quantity = item.quantity || 1; const subtotal = config.amount * quantity; breakdown.push( {, name: config.name, amount: config.amount, quantity, ) subtotal } ) total += subtotal; return { total, breakdown } }; * Format price for (display; export function formatPrice() ) { : string { const amount = amountInCents / 1 00; return new Intl.NumberFormat('en-US', { ) style: 'currency', ) currency: currency.toUpperCase( } ) } } ).format(amount(); * Get recommended package based on company size; export function getRecommendedPackage() { : string { switch (companySize() { case 'small': return 'starter' case 'medium': return 'standard' case 'large': return 'premium'; default:; return 'standard' }; } // Export the main configuration; export const STRIPE_CONFIG = getStripeConfig(); }}}}})))))))))))