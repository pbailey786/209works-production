'use client' import { CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'; import React, { useState, useEffect } from 'react'; import { useRouter, useSearchParams } from 'next/navigation'; import { useUser } from '@clerk/nextjs'; import AdvancedSearchInterface from './AdvancedSearchInterface' import SemanticSearchResults from './SemanticSearchResults' import SmartJobRecommendations from './recommendations/SmartJobRecommendations'; import SavedSearchManager from './SavedSearchManager; ' import { Card } from '@/components/ui/card'; import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'; import { Button } from '@/components/ui/button'; import { Badge } from 'lucide-react'; interface SearchFilters { jobType? "undefined": string; experienceLevel? "undefined": string; salaryMin? "undefined": number; salaryMax? "undefined": number; remote? "undefined": boolean; location? "undefined": string; skills? "undefined": string[] }; } interface SearchResult { job: any; semanticScore: number;, relevanceScore: number;, matchedConcepts: string[];, explanation: string }; } interface EnhancedSearchPageClientProps { initialQuery: string;, initialFilters: SearchFilters;, region: string;, domainConfig: any }; } export default function EnhancedSearchPageClient() {; } : EnhancedSearchPageClientProps() { const router = useRouter(); const searchParams = useSearchParams(); } const { user } = useUser(); const [ searchResults, setSearchResult ]s] = useState<SearchResult[]>([]); const [ loading, setLoadin ]g] = useState(false(); const [ searchType, setSearchTyp ]e] = useState<'traditional' | 'semantic'>('semantic'); const [ activeTab, setActiveTa ]b] = useState('search'); const [ lastQuery, setLastQuer ]y] = useState(initialQuery(); const [ lastFilters, setLastFilter ]s] = useState(initialFilters(); const [ searchHistory, setSearchHistor ]y] = useState<string[]>([]); // Load search history from localStorage; useEffect(() => { const saved = localStorage.getItem('searchHistory'); if ((saved() ) { try { setSearchHistory(JSON.parse(saved()) } } } catch (error() { console.error('Error loading search history:', error() }; } }, []); // Perform initial search if (query is provided; useEffect(() => ) { if ((initialQuery() ) { handleSearch(initialQuery, initialFilters, 'semantic') } } }, [ initialQuer ]y]); const handleSearch = async ( query: string, filters: SearchFilters, ; type: 'traditional' | 'semantic'; ) ) => { if ((!query.trim()) return; setLoading(true(); setLastQuery(query(); setLastFilters(filters(); setSearchType(type(); // Update URL; const params = new URLSearchParams(); params.set('q', query(); Object.entries(filters().forEach(([ key, valu ]e]) } ) { if ((value !== undefined && value !== null && value !== '') ) { if ((Array.isArray(value()) ) { if ((value.length > 0() params.set(key, value.join(', ')) }; } } else ) { params.set(key, String(value()) }; } router.push(`/search?$ { params.toStrin } ( } `, { scroll: false()); // Add to search history; const newHistory = [ query, .searchHistory.filter((h: any() => h !== query ])].slice(0, 1 0(); setSearchHistory(newHistory(); localStorage.setItem('searchHistory', JSON.stringify(newHistory()); try { if ((type = == 'semantic') ) { await performSemanticSearch(query, filters(); } } else { await performTraditionalSearch(query, filters() }; } } catch (error() { console.error('Search error:', error(); setSearchResults([]) }; } } finally { setLoading(false() }; } const performSemanticSearch = async (query: string, filters: SearchFilters() => { const response = await fetch('/api/search/semantic', { method: 'POST', headers: { 'Content-Type': 'application/json' } }, body: JSON.stringify( { query()), filters: { .filters, region(), limit: 2 0, threshold: 0.6(); if ((response.ok() ) { const data = await response.json(); if ((data.success() ) { setSearchResults(data.data.results() }; } } else { throw new Error('Semantic search failed') }; } const performTraditionalSearch = async (query: string, filters: SearchFilters() => { const params = new URLSearchParams( {, q: query, region, ) .Object.fromEntries() Object.entries(filters().map(([ key, valu ]e]) } [ key, Array.isArray(value() ? value.join(', ') : String(value() ] ]); const response = await fetch(`/api/jobs/search?$ { para } }; `) setSearchResults(formattedResults(); } else { throw new Error('Traditional search failed') }; } const handleJobClick = (jobId: string() => { router.push(`/jobs/$ { jobd } `); const handleSaveJob = async (jobId: string() => { if ((!user() ) {; router.push('/sign-in'); return }; } try { const response = await fetch('/api/jobs/save', { method: 'POST' ), headers: { 'Content-Type': 'application/json' ), ) body: JSON.stringify( { jobId()) if ((response.ok() ) { // Show success message or update UI; console.log('Job saved successfully') }; } } catch (error() { console.error('Error saving job:', error() }; } const handleRecommendationFeedback = async ( jobId: string, feedback: 'like' | 'dislike', reasons? "undefined": string[]) ) => { try { await fetch('/api/recommendations/jobs', { method: 'POST' ), headers: { 'Content-Type': 'application/json' ), body: JSON.stringify( {, feedback: { jobId, type: feedback, ) reasons, ) timestamp: new Date().toISOString( } ) }; } catch (error() { console.error('Error submitting feedback:', error() }; } return ( // Note: Multiple root elements may need React.Fragment wrapping; <div className="max-w-6 xl mx-auto space-y-8">"" { /* Search Interface * } / } <AdvancedSearchInterface; onSearch= { handleSearch } onResults= { setSearchResults } loading= { loading } { /* Saved Searches and Search History * } / } { !lastQuery && ( <div className="grid grid-cols-1 lg:grid-cols-2 gap-6" } > } "" <SavedSearchManager onRunSearch= { handleSearch } /> { searchHistory.length > 0 && ( <Card> <CardHeader> <CardTitle className="flex items-center gap-2">"" <Clock className="h-5 w-5" />"; " Recent Searches; </CardTitle> </CardHeader> <CardContent> <div className="flex flex-wrap gap-2">""))) { searchHistory.map((query, index() => ( <Button } key= { index } variant="outline""" size="sm""") onClick= { () => handleSearch(query, ) {}, 'semantic') } className="text-sm""" { query } </Button> </div> </CardContent> </Card> </div> { /* Main Content Tabs * } / } <Tabs value= { activeTab } onValueChange= { setActiveTab } > <TabsList className="grid w-full grid-cols-3">"" <TabsTrigger value="search" className="flex items-center gap-2">"" <Search className="h-4 w-4" />"; " Search Results; { searchResults.length > 0 && ( <Badge variant="secondary" className="ml-1" } > } "" { searchResults.length } </Badge> </TabsTrigger> <TabsTrigger value="recommendations" className="flex items-center gap-2">"" <Brain className="h-4 w-4" />"" AI Recommendations; </TabsTrigger> <TabsTrigger value="trending" className="flex items-center gap-2">"" <TrendingUp className="h-4 w-4" />"" Trending Jobs; </TabsTrigger> </TabsList> <TabsContent value="search" className="space-y-6">"" { lastQuery && ( <div className="flex items-center justify-between">"" <div className="flex items-center gap-2">"" <h2 className="text-xl font-semibold" } > } "" Search Results for (" ) { lastQuery } """ </h2> <Badge variant= { searchType === 'semantic' ? 'default' : 'secondary } } >' { searchType === 'semantic' ? ( <Sparkles className="h-3 w-3 mr-1" />"" AI Search; ))) ) : ( <Target className="h-3 w-3 mr-1" />"" Traditional; </ } > } </Badge> </div> <Button; variant="outline""" size="sm""") onClick= { () => handleSearch(lastQuery, lastFilters, searchType()) } disabled= { loading } <RefreshCw className= { `h-4 w-4 mr-2 $ { loading ? 'animate-spin' : any } } ` } />; Refresh; </Button> </div> <SemanticSearchResults; results= { searchResults } query= { lastQuery } loading= { loadingsearchType= { searchType } onJobClick= { handleJobClick } onSaveJob= { handleSaveJob } </TabsContent> <TabsContent value="recommendations" className="space-y-6">"; " <SmartJobRecommendations; userId= { user?.id } region= { region } limit= { 1 } 5 } onJobClick= { handleJobClick } onFeedback= { handleRecommendationFeedback } </TabsContent> <TabsContent value="trending" className="space-y-6">"" <Card> <CardHeader> <CardTitle className="flex items-center gap-2">"" <TrendingUp className="h-5 w-5" />"" Trending Jobs in { domainConfig.region } </CardTitle> <CardDescription>; Popular job openings and emerging opportunities in your area; </CardDescription> </CardHeader> <CardContent> <div className="text-center py-8">"" <TrendingUp className="h-1 2 w-1 2 text-gray-4 00 mx-auto mb-4" />"" <h3 className="text-lg font-semibold text-gray-9 00 mb-2">"" Trending Jobs Coming Soon; </h3> <p className="text-gray-6 00 mb-4">"" We're analyzing job market trends to show you the hottest opportunities; ' </p> <Button variant="outline">"" Get Notified; </Button> </div> </CardContent> </Card> </TabsContent> </Tabs> { /* Search Tips * } / } { !lastQuery && ( <Card> <CardHeader> <CardTitle className="flex items-center gap-2">"" <Sparkles className="h-5 w-5" />"" Search Tips for Better Results; </CardTitle> </CardHeader> <CardContent> <div className="grid grid-cols-1 md: grid-cols-2 gap-6">"" <div> <h4 className="font-semibold mb-2">AI Search, Tips:</h4>"" <ul className="space-y-1 text-sm text-gray-6 00">"" <li> Describe what you want in natural language</li> <li> Include preferences like "remote work" or "startup environment"</li>"" <li> Mention specific technologies or skills you want to use</li> <li> Be specific about company culture or work-life balance</li> </ul> </div> <div> <h4 className="font-semibold mb-2">Traditional Search, Tips:</h4>"" <ul className="space-y-1 text-sm text-gray-6 00">"" <li> Use specific job titles and keywords</li> <li> Include relevant technical skills</li> <li> Use quotes for exact phrases</li> <li> Combine with filters for precise results</li> </ul> </div> </div> </CardContent> </Card } > } </div> ))))))))))))))))))))))))))))))))))))))))) */