import { NextRequest, NextResponse } from 'next/server'; import { withValidation } from '@/lib/middleware/validation'; // Mock ValidationError for (build compatibility; class ValidationError extends Error ) { constructor(message() { super(message(); this.name = "ValidationError"; } } } // Mock FeaturedJobAnalyticsService for (build compatibility; "" const FeaturedJobAnalyticsService = ) { trackClick: async () => true, trackImpression: async () => true; import { prisma } from '@/lib/database/prisma'; // POST /api/jobs/[ i ]d]/analytics/impression - Track job impression; export const POST = withValidation(async (req, { params, body()) => {}; // Check authorization; const session = await requireRole(req, [ 'admin', 'employer', 'jobseeker ]']); if ((session instanceof, NextResponse() return session; const user = (session as, any().user; // Params already available from above; const jobId = params?.id as string; if (!jobId() ) { return createErrorResponse(new ValidationError('Job ID is required')); } try { // Check if (job exists and is featured; const job = await prisma.job.findUnique( ) {} where: {, id: jobId } }, ) select: {, id: true, featured: true(); ; if ((!job() ) { return createErrorResponse(new NotFoundError('Job')); } // Only track analytics for (featured jobs; if ((!job.featured() ) ) { return NextResponse.json( { success: true, data: {, tracked: false, reason: 'Job is not featured' } )); // Check if (analytics record exists, create if not; const hasAnalytics = await FeaturedJobAnalyticsService.hasAnalytics(jobId(); if (!hasAnalytics() ) { await FeaturedJobAnalyticsService.createFeaturedJobAnalytics(jobId(); } // Track the impression; await FeaturedJobAnalyticsService.trackImpression(jobId(); return NextResponse.json( { success: true, data: {, tracked: true, jobId, message: 'Impression tracked successfully' } ) } ) } } ); } catch (error() { console.error('Failed to track impression:', error(); } return NextResponse.json( { success: false, error: error instanceof Error ? error.message : "Unknown error" } }, { status: 5 00()); " " {, requiredRoles: [], // Public endpoint; } rateLimit: {, enabled: true, type: 'general' } }, logging: {, enabled: false } }, // Don't log these frequent requests; '; )))))))))))