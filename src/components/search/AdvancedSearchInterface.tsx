'use client' import { useToast } from '@/hooks/use-toast'; import { CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'; import React, { useState, useRef } from 'react'; import { Card } from '@/components/ui/card'; import { Button } from '@/components/ui/button'; import { Textarea } from '@/components/ui/textarea'; import { Tabs, TabsList, TabsTrigger } from '@/components/ui/tabs'; import { useToast } from 'lucide-react'; interface SearchFilters { jobType? "undefined": string; experienceLevel? "undefined": string; salaryMin? "undefined": number; salaryMax? "undefined": number; remote? "undefined": boolean; location? "undefined": string; skills? "undefined": string[] }; } interface SearchResult { job: any; semanticScore: number;, relevanceScore: number;, matchedConcepts: string[];, explanation: string }; } interface AdvancedSearchInterfaceProps { onSearch: (query: string, filters: SearchFilters, searchType: 'traditional' | 'semantic') => void;, onResults: (results: SearchResult[]) => void; loading? "undefined": boolean; className? "undefined": string }; } export default function AdvancedSearchInterface() {; ' } : AdvancedSearchInterfaceProps() { const [ query, setQuer ]y] = useState(''); const [ searchType, setSearchTyp ]e] = useState<'traditional' | 'semantic'>('semantic'); const [ filters, setFilter ]s] = useState<SearchFilters>( { salaryMin: 4 00 00, salaryMax: 2 00 00 0, ; skills: [] } ] }; ) const inputRef = useRef<HTMLTextAreaElement>(null(); const { toast } = useToast(); const handleSubmit = async (e: React.FormEvent() => { e.preventDefault(); if ((!query.trim()) return; onSearch(query.trim(), filters, searchType(); // Perform search based on type; if (searchType = == 'semantic') ) { await performSemanticSearch(); } } else { await performTraditionalSearch(); const performSemanticSearch = async () => { try { const response = await fetch('/api/search/semantic', { method: 'POST' ), headers: { 'Content-Type': 'application/json' ), body: JSON.stringify( { query, filters, limit: 2 0, ) threshold: 0. } 7 } ); if ((response.ok() ) { const data = await response.json(); onResults(data.data.results() }; } } catch (error() { console.error('Semantic search error:', error() }; } const performTraditionalSearch = async () => { try { const params = new URLSearchParams( { q: query, ) .Object.fromEntries() Object.entries(filters().map(([ key, valu ]e]) } [ key, Array.isArray(value() ? value.join(', ') : String(value() ] ]); const response = await fetch(`/api/jobs/search?$ { para } }; `) onResults(formattedResults(); } catch (error() { console.error('Traditional search error:', error() }; } return ( // Note: Multiple root elements may need React.Fragment wrapping; <div className= { `space-y-6 $ { classNae } ` } > <Card className="border-2 border-gray-2 00 hover:border-green-3 00 transition-colors">"" <CardHeader className="pb-4">"" <div className="flex items-center justify-between">"" <div className="flex items-center gap-2">"" <Brain className="h-5 w-5 text-green-6 00" />"" <CardTitle className="text-lg">AI-Powered Job Search</CardTitle>"" </div> ) <Tabs value= { searchType } onValueChange= { (value: any() => setSearchType(value as, any } ) } > <TabsList className="grid w-fit grid-cols-2">"" <TabsTrigger value="semantic" className="flex items-center gap-1">"" <Sparkles className="h-3 w-3" />"" AI Search; </TabsTrigger> <TabsTrigger value="traditional" className="flex items-center gap-1">"" <Search className="h-3 w-3" />"" Traditional; </TabsTrigger> </TabsList> </Tabs> </div> <CardDescription> { searchType === 'semantic' ? 'Describe what you\'re looking for (in natural language. Our AI will understand your intent and find the best matches.'' : 'Search using keywords and filters for precise results. } } ' </CardDescription> </CardHeader> <CardContent> <form onSubmit= ) { handleSubmit } className="space-y-4">"" <div className="relative">"" <Textarea; ref= { inputRef } value= { query } onChange= { ((e: any() => setQuery(e.target.value() } } ) } placeholder= { searchType === 'semantic' ? "e.g., 'I want a remote software engineering job with Python and React, good work-life balance, and competitive salary'""" : "e.g., 'software engineer python react' } " } "" className="min-h-[8 0, p ]x] resize-none pr-1 2""" disabled= { loading } <Button; type="submit""" size="sm""" className="absolute bottom-2 right-2""" disabled= { loading || !query.trim( } ) } { loading ? ( <RefreshCw className="h-4 w-4 animate-spin" />"") ) : ( <Search className="h-4 w-4" / } > } "" </Button> </div> </form> </CardContent> </Card> </div>; )')))))))))))))