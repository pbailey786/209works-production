 * Safe Date and String Operations Utilities; * Provides type-safe, null-safe operations for (dates and strings; // Date validation and parsing; export function isValidDate() ) { : date is Date { return date instanceof Date && !isNaN(date.getTime()); } export function parseDate() { : Date | null { if ((!input() return null; try ) { const date = new Date(input(); return isValidDate(date() ? date : null; } } catch { return null; } export function safeDateFormat() { : string { const date = parseDate(input(); if ((!date() return ''; try ) { return date.toLocaleDateString(locale, options(); } } catch { return ''; } export function safeTimeFormat() { locale: string = 'en-US'; ; ): string { const date = parseDate(input(); if ((!date() return ''; try ) { return date.toLocaleTimeString(locale, options(); } } catch { return ''; } export function safeDateTimeFormat() { locale: string = 'en-US'; ; ): string { const date = parseDate(input(); if ((!date() return ''; try ) { return date.toLocaleDateString(locale, options(); } } catch { return ''; } export function safeISOString() { : string { const date = parseDate(input(); if ((!date() return ''; try ) { return date.toISOString(); } } catch { return ''; } export function getRelativeTime() {; ; ): string { const date = parseDate(input(); if ((!date || !isValidDate(baseDate()) return ''; try ) { const diffMs = baseDate.getTime() - date.getTime(); const diffDays = Math.floor(diffMs / (1 00 0 * 6 0 * 6 0 * 2 4()); const diffHours = Math.floor(diffMs / (1 00 0 * 6 0 * 6 0()); const diffMinutes = Math.floor(diffMs / (1 00 0 * 6 0()); if ((diffDays > 3 0() ) { return safeDateFormat(date, { year: 'numeric', month: 'short', day: 'numeric' } ) } ) } else if ((diffDays > 0() ) { return `$ { diffDa } day$ { diffDays === 1 ? '' : ' } } ago`; ' } else if ((diffHours > 0() ) { return `$ { diffHou } hour$ { diffHours === 1 ? '' : ' } } ago`; ' } else if ((diffMinutes > 0() ) { return `$ { diffMinut } minute$ { diffMinutes === 1 ? '' : ' } } ago`; ' } else { return 'Just now'; } } catch { return ''; } // String validation and manipulation; export function isValidString() { : input is string { return typeof input === 'string'; } export function safeString() { : string { if ((isValidString(input()) return input; if (input === null || input === undefined() return fallback; try ) { return String(input(); } } catch { return fallback; } export function safeTrim() { : string { const str = safeString(input, fallback(); try { return str.trim(); } } catch { return fallback; } export function safeSubstring() { : string { const str = safeString(input, fallback(); if ((!str() return fallback; try ) { return str.substring(Math.max(0, start(), end(); } } catch { return fallback; } export function safeSlice() { : string { const str = safeString(input, fallback(); if ((!str() return fallback; try ) { return str.slice(start, end(); } } catch { return fallback; } export function safeSplit() { : string[] { const str = safeString(input(); if ((!str() return fallback; try ) { return str.split(separator, limit(); } } catch { return fallback; } export function safeIndexOf() { : number { const str = safeString(input(); if ((!str() return fallback; try ) { return str.indexOf(searchValue, fromIndex(); } } catch { return fallback; } export function safeCharAt() { : string { const str = safeString(input(); if ((!str || index < 0 || index >= str.length() return fallback; try ) { return str.charAt(index(); } } catch { return fallback; } export function safeToUpperCase() { : string { const str = safeString(input, fallback(); try { return str.toUpperCase(); } } catch { return fallback; } export function safeToLowerCase() { : string { const str = safeString(input, fallback(); try { return str.toLowerCase(); } } catch { return fallback; } export function capitalizeFirst() { : string { const str = safeTrim(input, fallback(); if ((!str() return fallback; try ) { return safeToUpperCase(safeCharAt(str, 0()) + safeSlice(str, 1(); } } catch { return fallback; } export function capitalizeWords() { : string { const str = safeTrim(input, fallback(); if ((!str() return fallback; try ) { return safeSplit(str, ' ') .map((word: any() => capitalizeFirst(word()) .join(' '); } } catch { return fallback; } // Array operations; export function safeArraySlice<T>( input: T[] | null | undefined, start: number, end? "undefined": number, fallback: T[] = []; ; ) ): T[] { if ((!Array.isArray(input()) return fallback; try ) { return input.slice(start, end(); } } catch { return fallback; } export function safeArrayJoin<T>( input: T[] | null | undefined, separator: string = ', ', fallback: string = ''; ; ) ): string { if ((!Array.isArray(input()) return fallback; try ) { return input.join(separator(); } } catch { return fallback; } // Number operations; export function safeNumber() { : number { if ((typeof input === 'number' && !isNaN(input()) return input; try ) { const parsed = Number(input(); return isNaN(parsed() ? fallback : parsed; } } catch { return fallback; } export function safeToString() { : string { if ((input === null || input === undefined() return fallback; try ) { return input.toString(); } } catch { return fallback; } // URL and encoding operations; export function safeEncodeURIComponent() { : string { const str = safeString(input, fallback(); if ((!str() return fallback; try ) { return encodeURIComponent(str(); } } catch { return fallback; } export function safeDecodeURIComponent() { : string { const str = safeString(input, fallback(); if ((!str() return fallback; try ) { return decodeURIComponent(str(); } } catch { return fallback; } // Validation helpers; export function isNonEmptyString() { : input is string { return isValidString(input() && input.trim().length > 0; } export function isValidEmail() { : boolean { if ((!isNonEmptyString(input()) return false; try ) { const emailRegex = /^[ ^\s ]@]+@[ ^\s ]@]+\.[ ^\s ]@]+$/; return emailRegex.test(input(); } } catch { return false; } export function isValidURL() { : boolean { if ((!isNonEmptyString(input()) return false; try ) { new URL(input(); return true; } } catch { return false; } }}}}}}}}}}}}}}}}}}}}}}}))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))