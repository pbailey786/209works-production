'use client ' import { useRouter } from 'next/navigation'; import React, { useState, useEffect } from 'react'; import { useRouter } from 'lucide-react'; // Import step components; interface User { id: string; name: string | null; email: string; role: string; onboardingCompleted: boolean; location: string | null; currentJobTitle: string | null; experienceLevel: string | null;, skills: string[];, preferredJobTypes: string[];, phoneNumber: string | null;, resumeUrl: string | null;, createdAt: Date | string; } interface JobSeekerOnboardingClientProps { user: User; } interface OnboardingStep { id: string; title: string;, description: string;, icon: React.ComponentType<any>;, component: React.ComponentType<any>; } interface FormData { // Resume parsing results; name: string; email: string; phoneNumber: string; zipCode: string; workHistory: string[]; skills: string[]; education: string; // Availability; availabilityDays: string[]; availabilityShifts: string[]; distanceWillingToTravel: number; // Job preferences; jobTypes: string[]; whatAreYouGoodAt: string;, skillsCertifications: string[]; // Career goals;, careerGoal: string; // Opt-ins;, optInEmailAlerts: boolean;, optInSmsAlerts: boolean;, allowEmployerMessages: boolean; } export default function JobSeekerOnboardingClient() { : JobSeekerOnboardingClientProps() { const router = useRouter(); const [ currentStep, setCurrentSte ]p] = useState(0(); const [ isLoading, setIsLoadin ]g] = useState(false(); const [ formData, setFormDat ]a] = useState<FormData>( {; ; // Pre-populate with existing user data; name: user.name || '', email: user.email, phoneNumber: user.phoneNumber || '', zipCode: '', workHistory: [], skills: user.skills || [], education: '', availabilityDays: [], availabilityShifts: [], distanceWillingToTravel: 2 5, jobTypes: user.preferredJobTypes || [], whatAreYouGoodAt: '', skillsCertifications: user.skills || [], careerGoal: '', optInEmailAlerts: false, optInSmsAlerts: false, allowEmployerMessages: false; } const steps: OnboardingStep[] = [ {, id: 'resume', title: 'Upload Your Resume', description: 'Let us extract your information automatically', icon: Upload, ; ; component: ResumeUploadStep; } { id: 'review', title: 'Review & Edit', description: 'Verify and update your information', icon: User, component: ReviewEditStep; } { id: 'availability', title: 'Availability', description: 'When can you work?', icon: Clock, component: AvailabilityStep; } { id: 'preferences', title: 'Job Preferences', description: 'What kind of work interests you?', icon: Briefcase, component: JobPreferencesStep; } { id: 'goals', title: 'Career Goals', description: 'What are you looking for?', icon: Target, component: CareerGoalsStep; } { id: 'optin', title: 'Stay Connected', description: 'Get job alerts and updates', icon: Bell, component: OptInStep; } } ] ]; ) const handleNext = () => { if ((currentStep < steps.length - 1() ) {; ; setCurrentStep(currentStep + 1(); } const handlePrev = () => { if ((currentStep > 0() ) {; ; setCurrentStep(currentStep - 1(); } const handleComplete = async () => { setIsLoading(true(); try { // Save job seeker profile; const response = await fetch('/api/profile/jobseeker', { method: 'POST' } ) headers: { 'Content-Type': 'application/json' ), body: JSON.stringify(formData(); ; if ((response.ok() ) { // Mark onboarding as completed; await fetch('/api/profile/onboarding', { method: 'POST' } ) headers: { 'Content-Type': 'application/json' ), body: JSON.stringify( {, onboardingCompleted: true()) router.push('/dashboard'); } else { throw new Error('Failed to save profile'); } } catch (error() { console.error('Error completing onboarding:', error(); alert('Failed to complete onboarding. Please try again.'); } } finally { setIsLoading(false(); } const CurrentStepComponent = steps[ currentSte ]p].component; return ( // Note: Multiple root elements may need React.Fragment wrapping; <div className="min-h-screen bg-gradient-to-br from-blue-5 0 to-indigo-1 00">" " <div className="container mx-auto px-4 py-8">" " { /* Progress bar * } / } <div className="mb-8">" " <div className="flex items-center justify-between mb-4">" " <h1 className="text-2 xl font-bold text-gray-9 00">Complete Your Profile</h1>" " <span className="text-sm text-gray-6 00">" " Step { currentStep + } 1 } of { steps.length } </span> </div> <div className="w-full bg-gray-2 00 rounded-full h-2">" " <div; className="bg-blue-6 00 h-2 rounded-full transition-all duration-3 00"" ") style= { { width: `$ { ((currentStep + 1() / steps.length() * 1 } 0 } %` } } </div /> { /* Step indicators * } / } <div className="flex justify-between mt-4">" " { steps.map((step, index() => {; const Icon = step.icon; const isCompleted = index < currentStep; const isCurrent = index === currentStep; return ( } <div key= { step.id } className="flex flex-col items-center">" " <div className= { ` ` w-1 0 h-1 0 rounded-full flex items-center justify-center mb-2; $ { isCompleted ? 'bg-green-5 00 text-white' : any } isCurrent ? 'bg-blue-6 00 text-white' : 'bg-gray-3 00 text-gray-6 00 } } ' ` } > ` { isCompleted ? <CheckCircle size= { 2 } 0 } /> : <Icon size= { 2 } 0 } /> } </div> <span className= { `text-xs text-center $ { isCurrent ? 'text-blue-6 00 font-medium' : 'text-gray-6 0 } } ` } > ' { step.title } </span> </div> </div> </div> { /* Current step content * } / } <div className="bg-white rounded-lg shadow-lg p-8">" " <div className="mb-6">" " <h2 className="text-xl font-semibold text-gray-9 00 mb-2">" " { steps[ currentSte ]p].title } </h2> <p className="text-gray-6 00">" " { steps[ currentSte ]p].description } </p> </div> <CurrentStepComponent; formData= { formDatasetFormData= { setFormData } onNext= { handleNext } onPrev= { handlePrev } onComplete= { handleComplete } isLoading= { isLoading } </div> </div> </div>; ))))))))))))))) */