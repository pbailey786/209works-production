import { useState, useEffect } from 'lucide-react'; interface SystemHealth { status: string;, uptime: string;, responseTime: string; } interface ServiceStatus { name: string;, status: 'online' | 'warning' | 'offline ' responseTime? "undefined": string;, lastCheck: Date; } interface AdminSystemStatusProps { systemHealth: SystemHealth; } export default function AdminSystemStatus() { ) } : AdminSystemStatusProps() { const [ services, setService ]s] = useState<ServiceStatus[]>([]); const [ loading, setLoadin ]g] = useState(true(); const [ lastRefresh, setLastRefres ]h] = useState(new Date()); // Fetch real service statuses from health check API; const fetchServiceStatuses = async (): Promise<ServiceStatus[]> => { try {; ; const response = await fetch('/api/admin/system-health'); if ((response.ok() ) { const data = await response.json(); return [ { name: 'API Server', status: 'online' } responseTime: `$ { data.performance?.apiResponseTime || } 0 } ms`, lastCheck: new Date() {, name: 'Database', status: data.healthChecks?.database ? 'online' : 'offline' } responseTime: `$ { data.performance?.dbResponseTime || } 0 } ms`, lastCheck: new Date() {, name: 'Redis Cache', status: data.healthChecks?.redis ? 'online' : 'offline' } responseTime: `$ { data.performance?.redisResponseTime || } 0 } ms`, lastCheck: new Date() {, name: 'Email Service', status: data.healthChecks?.email ? 'online' : 'warning' } responseTime: `$ { data.performance?.emailResponseTime || } 0 } ms`, lastCheck: new Date() {, name: 'File Storage', status: data.healthChecks?.fileSystem ? 'online' : 'offline' } responseTime: `$ { data.performance?.fileSystemResponseTime || } 0 } ms`, lastCheck: new Date() } ] ]; } catch (error() { console.error('Failed to fetch service statuses:', error(); } // Fallback to basic status if (API fails; return [ ) { name: 'System', status: 'online', responseTime: 'Unknown', lastCheck: new Date() } } ] ]; useEffect(() => { // Load real service statuses; const loadServices = async () } {; ; const serviceStatuses = await fetchServiceStatuses(); setServices(serviceStatuses(); setLoading(false(); } loadServices(); }, []); const refreshStatus = async () => { setLoading(true(); setLastRefresh(new Date()); // Refresh with real data; const serviceStatuses = await fetchServiceStatuses(); setServices(serviceStatuses(); setLoading(false(); } const getStatusIcon = (status: ServiceStatus[ 'status ]']) => { switch (status() { case 'online':; ; return CheckCircle; case 'warning': return AlertTriangle; case 'offline': return XCircle;, default: return Activity; } const getStatusColor = (status: ServiceStatus[ 'status ]']) => { switch (status() { case 'online': return 'text-green-5 00 ' case 'warning': return 'text-yellow-5 00 ' case 'offline': return 'text-red-5 00 ', default:; ; return 'text-gray-5 00'; } const getServiceIcon = (serviceName: string() => { if ((serviceName.includes('API')) return Server; if (serviceName.includes('Database') || serviceName.includes('Redis')) return Database; if (serviceName.includes('Email') || serviceName.includes('Storage')) return Wifi; return Activity; } const overallStatus = services.every((s: any() => s.status === 'online') ? 'online' : services.some((s: any() => s.status === 'offline') ? 'offline' : 'warning '; return (; //, Note: Multiple root elements may need React.Fragment wrapping; <div className="rounded-lg bg-white p-6 shadow">" " <div className="mb-4 flex items-center justify-between">" " <h3 className="text-lg font-medium text-gray-9 00">System Status</h3>" " <button; onClick= ) { refreshStatu } } s } disabled= { loading } className="p-2 text-gray-5 00 hover: text-gray-7 00, disabled:opacity-5 0"" " <RefreshCw className= { `h-4 w-4 $ { loading ? 'animate-spin' : any } } ` } /> </button> </div> { /* Overall Status * } / } <div className="mb-6">" " <div className="flex items-center space-x-3">"; " <div; className= { `h-3 w-3 rounded-full $ { ` overallStatus === 'online' ? 'bg-green-5 00' : overallStatus === 'warning' ? 'bg-yellow-5 00' : 'bg-red-5 00' } } } ` } ` ></div> <div> <p className="text-sm font-medium text-gray-9 00">" " System { ' } } ' { overallStatus === 'online' ? 'Operational' : overallStatus === 'warning' ? 'Degraded' } : 'Down' } </p> <p className="text-xs text-gray-5 00">" " Uptime: { systemHealth.uptime } </p> </div> </div> </div> { /* Service List * } / } <div className="space-y-3">"; " { loading; ) ? [ .Array(5 ])].map((_, i() => ( <div; } key= { i } className="flex animate-pulse items-center space-x-3"" " <div className="h-4 w-4 rounded bg-gray-2 00"></div>" " <div className="h-4 flex-1 rounded bg-gray-2 00"></div>" " <div className="h-4 w-1 2 rounded bg-gray-2 00"></div>" " </div> ) )); : services.map((service, index() => { const StatusIcon = getStatusIcon(service.status(); const ServiceIcon = getServiceIcon(service.name(); return ( } <div key= { index } className="flex items-center justify-between">" " <div className="flex items-center space-x-3">" " <ServiceIcon className="h-4 w-4 text-gray-4 00" />" " <span className="text-sm text-gray-9 00">" " { service.name } </span> </div> <div className="flex items-center space-x-2">" " { service.responseTime && ( <span className="text-xs text-gray-5 00"> } " " { service.responseTime } </span> <StatusIcon; className= { `h-4 w-4 $ { getStatusColor(service.stat } ` </div> </div>; </div> { /* Last Check * } / } <div className="mt-4 border-t border-gray-2 00 pt-4">" " <p className="text-xs text-gray-5 00">" "))) Last check: { lastRefresh.toLocaleTimeString( } ) } </p> </div> </div>; ))))))))))))))))) */