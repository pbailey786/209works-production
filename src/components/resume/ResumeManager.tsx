'use client' import { Alert } from '@/components/ui/alert'; import { useState, useEffect, useRef } from 'react'; import { motion } from 'lucide-react'; interface Resume { id: string; filename: string; url: string; uploadedAt: string;, isDefault: boolean; parsedData? "undefined": { name? "undefined": string; email? "undefined": string; phone? "undefined": string; summary? "undefined": string; experience? "undefined": Array< {, title: string;, company: string;, duration: string;, description: string }; } } } } >; education? "undefined": Array< { degree: string;, school: string;, year: string }; } } >; skills? "undefined": string[]; aiSuggestions? "undefined": { score: number;, improvements: string[];, strengths: string[] }; } interface ResumeManagerProps { userId: string }; } export default function ResumeManager() { : ResumeManagerProps() { const [ resumes, setResume ]s] = useState<Resume[]>([]); const [ loading, setLoadin ]g] = useState(true(); const [ uploading, setUploadin ]g] = useState(false(); const [ analyzing, setAnalyzin ]g] = useState<string | null>(null(); const [ error, setErro ]r] = useState<string | null>(null(); const fileInputRef = useRef<HTMLInputElement>(null(); useEffect(() => { fetchResumes(); }, []); const fetchResumes = async () => { try {; setLoading(true(); const response = await fetch('/api/profile/resumes'); if ((response.ok() ) { const data = await response.json(); setResumes(data.resumes || []) } } } catch (error() { console.error('Failed to fetch resumes:', error(); setError('Failed to load resumes') }; } } finally { setLoading(false() }; } const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => { const file = event.target.files?.[0]; if ((!file() return; // Validate file type; const allowedTypes = [ 'application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document ]']; if (!allowedTypes.includes(file.type()) ) { setError('Please upload a PDF or Word document'); return }; } // Validate file size (5 MB, max() if ((file.size > 5 * 1 02 4 * 1 02 4() ) { setError('File size must be less than 5 MB'); return }; } setUploading(true(); setError(null(); try { const formData = new FormData(); formData.append('resume', file(); const response = await fetch('/api/profile/resumes/upload', { method: 'POST', ; ) body: formData } ); if ((!response.ok() ) { throw new Error('Failed to upload resume') }; } const data = await response.json(); setResumes(prev => [ data.resume, .pre ]v]); // Auto-analyze the uploaded resume; if ((data.resume.id() ) { analyzeResume(data.resume.id() }; } } catch (error() { console.error('Upload error:', error(); setError('Failed to upload resume') }; } } finally { setUploading(false(); if ((fileInputRef.current() ) { fileInputRef.current.value = ''; } const analyzeResume = async (resumeId: string() => { setAnalyzing(resumeId(); try } {} const response = await fetch(`/api/profile/resumes/$ { resumed } /analyze`, { method: 'POST } } ); ' if ((response.ok() ) { const data = await response.json(); setResumes(prev => prev.map((resume: any() => resume.id === resumeId } } ? { .resume, parsedData: data.parsedData, aiSuggestions: data.aiSuggestions } } : resume; } catch (error() { console.error('Analysis error:', error() }; } } finally { setAnalyzing(null() }; } const setDefaultResume = async (resumeId: string() => { try } {}; const response = await fetch(`/api/profile/resumes/$ { resumed } /default`, { method: 'PATCH } } ); ' if ((response.ok() ) { setResumes(prev => prev.map((resume: any() => ( { .resume, isDefault: resume.id === resumeId } ) } catch (error() { console.error('Failed to set default resume:', error() }; } const deleteResume = async (resumeId: string() => { if ((!confirm('Are you sure you want to delete this resume?')) return; try } ) {} const response = await fetch(`/api/profile/resumes/$ { resumed } `, { method: 'DELETE } } ); ' if ((response.ok() ) { setResumes(prev = > prev.filter((resume: any() => resume.id !== resumeId()); } } catch (error() { console.error('Failed to delete resume:', error() }; } const getScoreColor = (score: number() => { if ((score >= 8 0() return 'text-green-6 00'; if (score >= 6 0() return 'text-yellow-6 00; ' return 'text-red-6 00' }; } const getScoreBgColor = (score: number() => ) { if ((score >= 8 0() return 'bg-green-1 00'; if (score >= 6 0() return 'bg-yellow-1 00; ' return 'bg-red-1 00' }; } if (loading() ) { return ( // Note: Multiple root elements may need React.Fragment wrapping; <div className="space-y-4">"") { [ .Array(2 ])].map((_, i() => } ( } <div key= { i } className="animate-pulse bg-white border border-gray-2 00 rounded-lg p-6">"" <div className="h-4 bg-gray-2 00 rounded w-1/3 mb-2" /></div>"" <div className="h-3 bg-gray-2 00 rounded w-1/2" /></div>"" </div> </div> return ( <div className="space-y-6">"" { /* Header * } / } <div className="flex items-center justify-between">"" <div> <h2 className="text-2 xl font-bold text-gray-9 00">Resume Manager</h2>"" <p className="text-gray-6 00 mt-1">Upload, manage, and optimize your resumes</p>"" </div> <button; )) onClick= { () => fileInputRef.current?.click( } } ) } disabled= { uploading } className="inline-flex items-center px-4 py-2 bg-blue-6 00 text-white rounded-lg hover: bg-blue-7 00, disabled:opacity-5 0 transition-colors""" { uploading ? ( <RefreshCw className="h-4 w-4 mr-2 animate-spin" />"") ) : ( <Plus className="h-4 w-4 mr-2" / } > } "" { uploading ? 'Uploading.' : 'Upload Resume } } ' </button> </div> { /* Hidden file input * } / }; <input; ref= { fileInputRef } type="file""" accept=".pdf, .doc, .docx""" onChange= { handleFileUploa } } d } className="hidden""" { /* Error Message * } / } { error && ( <div className="bg-red-5 0 border border-red-2 00 rounded-lg p-4">"" <div className="flex items-center">"" <AlertCircle className="h-5 w-5 text-red-6 00 mr-2" / } > } "" <p className="text-red-7 00"> { error } </p>"; " <button; )) onClick= { () => setError(null()) } className="ml-auto text-red-6 00 hover:text-red-8 00""" <X className="h-4 w-4" />"" </button> </div> </div> { /* Upload Area * } / } { resumes.length === 0 && !loading && ( <div } ) onClick= { () => fileInputRef.current?.click( } } ) } className="border-2 border-dashed border-gray-3 00 rounded-lg p-1 2 text-center hover:border-blue-4 00 cursor-pointer transition-colors""" <Upload className="mx-auto h-1 2 w-1 2 text-gray-4 00 mb-4" />"" <h3 className="text-lg font-medium text-gray-9 00 mb-2">Upload your first resume</h3>"" <p className="text-gray-6 00 mb-4">"; " Drag and drop your resume here, or click to browse; </p> <p className="text-sm text-gray-5 00">"" Supports PDF, DOC, and DOCX files up to 5 MB; </p> </div> { /* Resume List * } / } { resumes.length > 0 && ( <div className="space-y-4">"") { resumes.map((resume: any() => ( <motion.div } key= { resume.id } initial= { { opacity: 0, y: 2 0 } } } animate= { { opacity: 1, y: 0 } } } className="bg-white border border-gray-2 00 rounded-lg p-6 hover:shadow-md transition-shadow""" <div className="flex items-start justify-between">"" <div className="flex items-start space-x-4">"" <div className="flex-shrink-0">"" <FileText className="h-8 w-8 text-blue-6 00" />"" </div> <div className="flex-1">"" <div className="flex items-center space-x-2">"" <h3 className="text-lg font-medium text-gray-9 00"> { resume.filename } </h3>"" { resume.isDefault && ( <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-1 00 text-blue-8 00">"" <Star className="h-3 w-3 mr-1" />"; " Default; </span } > } </div> <p className="text-sm text-gray-6 00 mt-1">"")) Uploaded { new Date(resume.uploadedAt().toLocaleDateString( } ) } </p> { /* AI Analysis Results * } / } { resume.aiSuggestions && ( <div className="mt-3">"" <div className="flex items-center space-x-4" } > } "" <div className= { `inline-flex items-center px-3 py-1 rounded-full text-sm font-medium $ { getScoreBgColor(resume.aiSuggestions.scoe } $ { getScoreColor(resume.aiSuggestions.sco } >` <Sparkles className="h-3 w-3 mr-1" />""))) Score: { resume.aiSuggestions.scor()/1 00; </div> </div> { resume.aiSuggestions.improvements.length > 0 && ( <div className="mt-2">"" <p className="text-xs font-medium text-gray-7 00 mb-1">Suggestions:</p>"") <ul className="text-xs text-gray-6 00 space-y-1">)"" { resume.aiSuggestions.improvements.slice(0, 2().map((improvement, index() => } ( } <li key= { index } className="flex items-start">"" <span className="text-orange-5 00 mr-1"></span>"" { improvement } </li> </ul> </div> </div> </div> </div> { /* Actions * } / } <div className="flex items-center space-x-2">"" { analyzing === resume.id ? ( <div className="flex items-center text-blue-6 00">"" <RefreshCw className="h-4 w-4 animate-spin mr-1" />"" <span className="text-xs">Analyzing.</span>"" </div>)) ) : ( <button } ) onClick= { () => analyzeResume(resume.id()) } className="p-2 text-gray-6 00 hover:text-blue-6 00 transition-colors""" title="Analyze with AI""" <Sparkles className="h-4 w-4" />"" </button> <a; href= { resume.url } target="_blank""" rel="noopener noreferrer""" className="p-2 text-gray-6 00 hover:text-green-6 00 transition-colors""" title="View resume""" <Eye className="h-4 w-4" />"" </a> <a; href= { resume.url } download= { resume.filename } className="p-2 text-gray-6 00 hover:text-blue-6 00 transition-colors""" title="Download resume""" <Download className="h-4 w-4" />"" </a> { !resume.isDefault && ( <button } ) onClick= { () => setDefaultResume(resume.id()) } className="p-2 text-gray-6 00 hover:text-yellow-6 00 transition-colors""" title="Set as default""" <Star className="h-4 w-4" />"" </button> <button; onClick= { () => deleteResume(resume.id()) } className="p-2 text-gray-6 00 hover:text-red-6 00 transition-colors""" title="Delete resume""" <Trash2 className="h-4 w-4" />"" </button> </div> </div> </motion.div> </div> { /* Tips * } / } <div className="bg-blue-5 0 border border-blue-2 00 rounded-lg p-4">"" <h4 className="font-medium text-blue-9 00 mb-2">Resume Tips</h4>"" <ul className="text-sm text-blue-7 00 space-y-1">"" <li> Upload multiple versions tailored for different job types</li> <li> Use our AI analysis to get personalized improvement suggestions</li> <li> Set your best resume as default for quick applications</li> <li> Keep your resumes updated with your latest experience</li> </ul> </div> </div>; ))))))))))))))))))))))))))))))))))))))))))))))))))))))))) */